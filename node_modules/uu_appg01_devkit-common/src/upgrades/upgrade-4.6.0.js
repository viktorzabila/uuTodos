const fs = require("fs-extra");
const klaw = require("klaw");

const upgradeVersion = __filename.replace(/.*upgrade-(.*)\.js$/, "$1");

module.exports = async function (config, templateInfo) {
  let { type } = templateInfo;

  if (type === "uu5-lib" || type === "lib") {
    let issueFiles = new Set();
    let processedFiles = new Set();
    let modifiedFiles = new Set();

    console.log(`${upgradeVersion} Upgrading demo *.html files to use uu5loaderg01.`);
    if (fs.existsSync("demo")) {
      for await (const item of klaw("demo")) {
        if (!item.path.endsWith(".html")) continue;
        replaceLoader(item.path, issueFiles, modifiedFiles);
        processedFiles.add(item.path);
      }
    }
    if (fs.existsSync("src")) {
      for await (const item of klaw("src")) {
        if (!item.path.endsWith(".html") || !item.path.match(/src[/\\].*demo[/\\]/)) continue;
        replaceLoader(item.path, issueFiles, modifiedFiles);
        processedFiles.add(item.path);
      }
    }
    console.log(
      (issueFiles.size > 0 ? `There were ${issueFiles.size} files with issues. ` : "") +
        `Processed ${processedFiles.size} files, ${modifiedFiles.size} upgraded.`
    );
  }
};

function replaceLoader(file, issueFiles, modifiedFiles) {
  let origContent = fs.readFileSync(file, "utf-8");
  let content = origContent;

  let unprocessedStrings = new Set();
  content = content.replace(
    /(?:SystemJS)(\.config\s*\(\s*\{\s*)("?)paths\2(.)|(SystemJS\.config)/g,
    (m, g1, g2, g3, alt) => {
      if (alt) return "Uu5Loader.config";
      if (g3 !== ":") {
        unprocessedStrings.add(m);
        return m;
      }
      return "Uu5Loader" + g1 + g2 + "imports" + g2 + ":";
    }
  );
  content = content.replace(
    /<script\s+[^>]*?src=['"]([^'"]+)system(?:\.src)?\.js(\?[^'"]*|)['"][^>]*>\s*<\/script>/g,
    (m, g1, g2) => {
      return `<script src="https://cdn.plus4u.net/uu-uu5loaderg01/1.0.0/uu5loaderg01.min.js${g2}" crossorigin="anonymous"></script>`;
    }
  );
  content = content.replace(/<!--((?!-->)\s|\S)*?\/in-browser-transpilation.*?-->\s*/, "");
  content = content.replace(/<script\s+[^>]*?\/in-browser-transpilation[^>]*>\s*<\/script>\s*/, "");
  content = content.replace(/SystemJS\.([a-zA-Z0-9_$]+)/g, (m, g) => {
    if (g === "import") return "Uu5Loader.import";
    unprocessedStrings.add(m);
    return m;
  });
  if (unprocessedStrings.size > 0) {
    for (let k of unprocessedStrings) console.warn(`${file} - needs manual replace of: ${k}`);
    issueFiles.add(file);
  }
  content = content.replace(/window\.SystemJS/g, "window.Uu5Loader");
  if (content.match(/SystemJS/) && unprocessedStrings.size === 0) {
    console.warn(`${file} - unexpected occurrence of "SystemJS", do manual check.`);
    issueFiles.add(file);
  }
  if (content !== origContent) {
    modifiedFiles.add(file);
    fs.writeFileSync(file, content, "utf-8");
  }
}
