const fs = require("fs-extra");
const path = require("path");

const { VALUE_PLACEHOLDER, APP_JSON_KEY_ORDER } = require("../tools/constants.js");
const Package = require("../tools/package.js");
const upgradeVersion = __filename.replace(/.*upgrade-(.*)\.js$/, "$1");

module.exports = async function (config, templateInfo) {
  let { type } = templateInfo;
  if (type === "nodejs-multi") return; // no changes for the top-level project itself

  const LIB_SCRIPTS_TO_OMIT_IF_IN_MULTI_LIB = [
    "deploy",
    "uuAppBox",
    "uuCloudDeploy",
    "uuCloudUndeploy",
    "uuCloudDeployList",
  ];

  let name = config.get("name");
  let projectLibList = config.getWorkspaceLibraryList(true);
  let isLib = type.endsWith("lib"); // library, potentially with custom versioning
  let isWorkspaceLib = !!projectLibList.find((it) => it.name === name);

  // generate top-level files if needed
  if (isWorkspaceLib) {
    let cwd = path.resolve(process.cwd());
    process.chdir("..");
    try {
      await require("../init-project.js").upgradeToLibWorkspaceTopLevel(projectLibList, upgradeVersion);
    } finally {
      process.chdir(cwd);
    }
  }

  console.log(`${upgradeVersion} Updating configuration.`);
  // update uuapp.json
  let uuappJson = JSON.parse(fs.readFileSync("../uuapp.json", "utf-8"));
  if (isWorkspaceLib) {
    // move keys that are usually the same for single release cycle to root
    ["docUri", "flsUri", "imageUri"].forEach((key) => {
      let value = uuappJson[key];
      let valueInLibSpecificConfig = uuappJson[name][key];
      if (!value || value === VALUE_PLACEHOLDER) uuappJson[key] = value = valueInLibSpecificConfig || "";
      if (
        valueInLibSpecificConfig === value ||
        !valueInLibSpecificConfig ||
        valueInLibSpecificConfig === VALUE_PLACEHOLDER
      ) {
        delete uuappJson[name][key];
      }
    });
  }

  // update resourcePoolUri-s
  let envs = listEnvironments();
  let devkit = uuappJson[name].devkit || {};
  for (let env of envs) {
    if (!devkit[env] || !devkit[env].resourcePoolUri || devkit[env].resourcePoolUri === VALUE_PLACEHOLDER) {
      let uuCloudEnvJsonPath = path.join("env", `uucloud-${env}.json`);
      let uuCloudEnvJson = JSON.parse(fs.readFileSync(uuCloudEnvJsonPath, "utf-8"));
      let rpu = ((uuCloudEnvJson || {}).uuSubApp || {}).resourcePoolUri;
      if (!devkit[env]) devkit[env] = {};
      devkit[env].resourcePoolUri = rpu || VALUE_PLACEHOLDER;
    }
  }

  // move "devkit" key to root if it's not there yet
  if (isWorkspaceLib) delete uuappJson[name].devkit;
  if (
    !("devkit" in uuappJson) &&
    (isWorkspaceLib || (!isLib && type !== "uu5-app" && projectLibList.length === 0)) &&
    !uuappJson[name].version
  ) {
    uuappJson.devkit = devkit;
    delete uuappJson[name].devkit;
  }

  // save uuapp.json
  uuappJson = Package.sort(uuappJson, APP_JSON_KEY_ORDER);
  fs.writeFileSync("../uuapp.json", JSON.stringify(uuappJson, null, 2) + "\n", "utf-8");

  // remove env/uucloud-*.json files in libraries
  if (isLib) {
    envs.forEach((env) => fs.removeSync(path.join("env", `uucloud-${env}.json`)));
  }

  // remove deploy/uuCloud* npm scripts in workspace libraries
  if (isWorkspaceLib) {
    let pkgJson = JSON.parse(fs.readFileSync("package.json", "utf-8"));
    if (pkgJson.scripts) {
      LIB_SCRIPTS_TO_OMIT_IF_IN_MULTI_LIB.forEach((key) => delete pkgJson.scripts[key]);
    }
    fs.writeFileSync("package.json", JSON.stringify(pkgJson, null, 2) + "\n", "utf-8");
  }

  if (isWorkspaceLib && !fs.existsSync("../node_modules")) {
    console.log(`${upgradeVersion} Installing packages in workspace root (this may take a while)...`);
    const PackageManager = require("../tools/package-manager.js");
    await PackageManager.install({ cwd: path.resolve("..") });
  }
};

function listEnvironments() {
  return fs.existsSync("env")
    ? fs
        .readdirSync("env")
        .filter((it) => it.match(/^uucloud-[a-zA-Z0-9_-]+\.json$/))
        .map((it) => it.slice("uucloud-".length, -".json".length))
    : [];
}
