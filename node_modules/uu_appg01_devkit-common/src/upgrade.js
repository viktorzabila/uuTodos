const child_process = require("child_process");
const fs = require("fs");
const path = require("path");
const semver = require("semver");

module.exports = async function (config, templateInfo) {
  // TODO Install newest devkit only with the same major? Or ask if newer major && current is max in its own major && spec is latest in current major.
  if (config.get("devkitVersionCheck") !== false) {
    let installedVersion = require("../package.json").version;
    let { stdout } = child_process.spawnSync("npm", ["show", "uu_appg01_devkit", "version"], {
      shell: true,
    });
    let latestVersion = stdout.toString().trim();
    if (latestVersion && semver.compare(installedVersion, latestVersion) < 0) {
      console.log(
        `Installing newest devkit - ${latestVersion} (you have ${installedVersion}); use '-- --no-devkit-version-check' to skip this.`
      );
      const PackageManager = require("./tools/package-manager.js");
      await PackageManager.install({ packages: ["uu_appg01_devkit"], saveExact: false, saveDev: true });
      // NOTE Not passing "--no-devkit-version-check" because nodejs-multi would then pass it down to underlying projects
      // (which can still have old versions). Could be optimized.
      child_process.spawnSync("npm", ["run", "uuAppDevKitUpgrade"], {
        shell: true,
        stdio: "inherit",
        env: process.env,
        cwd: process.cwd(),
      });
      return { ranNewerUpgrade: true }; // at this point, upgrade was already performed by newer devkit, don't continue
    }
  }

  // run all relevant upgrades from ./upgrades/* folder, based on version in project's "spec" field in its package.json
  let { specVersion } = templateInfo;
  let upgrades = fs.readdirSync(path.join(__dirname, "upgrades")).filter((name) => name.match(/^upgrade-.*\.js$/));
  let upgradeVersions = upgrades.map((name) => name.replace(/^upgrade-(.*)\.js$/, "$1"));
  if (!specVersion || !semver.valid(specVersion)) {
    throw new Error(
      "Invalid spec version in package.json in 'spec' field. The value should look like: \"${templateInfo.type}; ${specName}@3.0.0\". The version denotes which devkit version was the project last updated to."
    );
  }
  let upgradeVersionsToDo = upgradeVersions.filter((version) => semver.compare(specVersion, version) < 0);
  upgradeVersionsToDo.sort((a, b) => semver.compare(a, b));
  for (upgradeVersion of upgradeVersionsToDo) {
    let upgrade = require(`./upgrades/upgrade-${upgradeVersion}.js`);
    await upgrade(config, templateInfo);
  }

  // update spec
  let pkgJson = JSON.parse(fs.readFileSync("package.json", "utf-8"));
  let { spec } = pkgJson;
  if (spec) {
    pkgJson.spec = spec.replace(
      /uu_appg01(?:_devkit)?@.*/,
      (m) => "uu_appg01_devkit@" + require("../package.json").version
    );
    if (spec !== pkgJson.spec) {
      fs.writeFileSync("package.json", JSON.stringify(pkgJson, null, 2) + "\n", "utf-8");
    }
  }
};
