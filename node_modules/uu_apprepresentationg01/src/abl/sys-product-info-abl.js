"use strict";

const { LruCache, Config } = require("uu_appg01_core-utils");
const { Validator } = require("uu_appg01_core-validation");
const { DaoFactory, ObjectStoreError, ObjectNotFound } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");

const Errors = require("../api/errors/sys-product-info-errors");

const APP_PRODUCT_INFO_CACHE_TTL_CONFIG_NAME = "uu_app_representation_product_info_cache_ttl";
const APP_PRODUCT_INFO_CACHE_TTL_DEFAULT_VALUE = 24 * 60 * 60 * 1000;

/**
 * represent sysProductInfo collection in the database
 * and store created permissions
 */
class SysProductInfoAbl {
  constructor() {
    let maxAge =
      Config.get(APP_PRODUCT_INFO_CACHE_TTL_CONFIG_NAME) !== null
        ? Config.getNumber(APP_PRODUCT_INFO_CACHE_TTL_CONFIG_NAME) * 1000
        : APP_PRODUCT_INFO_CACHE_TTL_DEFAULT_VALUE;
    this.productInfoCache = new LruCache({ maxAge });
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysProductInfo");
    this.asid = Config.get("asid");
  }

  /**
   * create empty collection with indexes
   * @returns {Promise<void>}
   */
  async createSchema() {
    await this.dao.createSchema();
  }

  /**
   * Sets product information of uuAppWorkspace.
   *
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{}>}
   */
  async setProductInfo(awid, dtoIn, uuAppErrorMap = {}) {
    const asidCall = awid === this.asid;
    const ucErrors = Errors(asidCall).SetProductInfo;

    // HDS 1. - Performs a logical check of dtoIn.
    let validationResult = this.validator.validate("sysProductInfoSetType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      ucErrors.getUnsupportedKeysWarningCode(),
      ucErrors.InvalidDtoInError
    ); // A1, A2

    dtoIn.awid = awid;

    // HDS 3. - System updates sysProductInfo uuObject (sysProductInfo DAO update). (A4, A5, A6)
    let dtoOut;

    try {
      dtoOut = await this.dao.updateByAwid(dtoIn);
    } catch (e) {
      if (e instanceof ObjectNotFound) {
        try {
          // A4 - System creates sysProductInfo uuObject. (A5)
          dtoOut = await this.dao.create(dtoIn);
        } catch (e) {
          // A5
          if (e instanceof ObjectStoreError) {
            throw new ucErrors.SysProductInfoDaoCreateFailedError({ uuAppErrorMap }, e);
          }
          throw e;
        }
      } else if (e instanceof ObjectStoreError) {
        // A6
        throw new ucErrors.SysProductInfoDaoUpdateFailedError({ uuAppErrorMap }, e);
      } else {
        throw e;
      }
    }

    // HDS 4. - System updates cache.
    this._addToCache(dtoOut);

    // HDS 5. - Returns properly filled dtoOut.
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  /**
   * gets product information of uuAppWorkspace.
   *
   * @param {String} awid
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{}>}
   */
  async getProductInfo(awid, uuAppErrorMap = {}) {
    const asidCall = awid === this.asid;
    const ucErrors = Errors(asidCall).GetProductInfo;

    // HDS 1. - System loads uuObject from cache. (A1)
    let sysProductInfo = await this._getProductInfo(awid);

    if (!sysProductInfo && !asidCall) {
      // load asid product info if set
      sysProductInfo = await this._getProductInfo(this.asid);
    }

    if (!sysProductInfo) {
      throw new ucErrors.SysProductInfoDoesNotExistError(null, { awid }, null);
    }

    // HDS 2. - Returns properly filled out dtoOut
    let dtoOut = sysProductInfo;
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  async _getProductInfo(awid) {
    let sysProductInfo = this.productInfoCache.get(awid);
    if (!sysProductInfo) {
      sysProductInfo = await this.dao.getByAwid(awid);
      if (sysProductInfo) {
        this._addToCache(sysProductInfo);
      }
    }
    return sysProductInfo;
  }

  /**
   * Store sysProductInfo info in the cache.
   *
   * @param {Object} sysProductInfo
   */
  _addToCache(sysProductInfo) {
    this.productInfoCache.set(sysProductInfo.awid, sysProductInfo);
  }
}

module.exports = new SysProductInfoAbl();
