const UuApprepresentationError = require("./uu-apprepresentation-error.js");

const setProductLogo = function (prefixCode) {
  const UC_CODE = `${prefixCode}productLogo/set/`;

  return {
    getUnsupportedKeysWarningCode: function () {
      return `${UC_CODE}unsupportedKeys`;
    },

    InvalidDtoInError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "DtoIn is not valid.";
        this.code = `${UC_CODE}invalidDtoIn`;
      }
    },

    LogoFileTypeNotSupportedError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "Logo is not valid file type (jpg, jpeg, png, svg).";
        this.code = `${UC_CODE}logoFileTypeNotSupported`;
      }
    },

    LogoExceededSizeLimitError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "Logo has exceeded size limit of 1000kB.";
        this.code = `${UC_CODE}logoExceededSizeLimit`;
      }
    },

    SysProductLogoDaoUpdateFailedError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "Failed to update sysProductLogo.";
        this.code = `${UC_CODE}sysProductLogoDaoUpdateFailed`;
      }
    },

    SysProductLogoDaoCreateFailedError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "Failed to create sysProductLogo.";
        this.code = `${UC_CODE}sysProductLogoDaoCreateFailed`;
      }
    },
  };
};

const getProductLogo = function (prefixCode) {
  const UC_CODE = `${prefixCode}productLogo/get/`;

  return {
    getUnsupportedKeysWarningCode: function () {
      return `${UC_CODE}unsupportedKeys`;
    },

    InvalidDtoInError: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "DtoIn is not valid.";
        this.code = `${UC_CODE}invalidDtoIn`;
      }
    },

    DefaultLogoDoesNotExist: class extends UuApprepresentationError {
      constructor() {
        super(...arguments);
        this.message = "All attempts to load logo according to dtoIn parameters failed.";
        this.code = `${UC_CODE}defaultLogoDoesNotExist`;
      }
    },
  };
};

module.exports = function (isAsid) {
  if (isAsid) {
    return {
      SetProductLogo: setProductLogo(UuApprepresentationError.APP_INSTANCE_ERROR_PREFIX),
      GetProductLogo: getProductLogo(UuApprepresentationError.APP_INSTANCE_ERROR_PREFIX),
    };
  } else {
    return {
      SetProductLogo: setProductLogo(UuApprepresentationError.APP_WORKSPACE_ERROR_PREFIX),
      GetProductLogo: getProductLogo(UuApprepresentationError.APP_WORKSPACE_ERROR_PREFIX),
    };
  }
};
