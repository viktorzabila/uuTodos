"use strict";

const Http = require("http");
const {BaseError, Json} = require("uu_appg01_core-utils");

class Request {

  constructor(method, url, headers, body) {
    this._method = method || null;
    this._url = url || null;
    this._headers = headers || {};
    if (body && (this._headers["content-type"] || "").startsWith("application/json")) {
      this._body = Json.parse(body);
    } else {
      this._body = body || null;
    }
  }

  getUrl() {
    return this._url;
  }

  getMethod() {
    return this._method;
  }

  getHeaders() {
    return this._headers;
  }

  getBody() {
    return this._body;
  }

}

class Response {

  constructor() {
    this._status = 200;
    this._headers = null;
    this._body = null;
  }

  setStatus(status) {
    this._status = status || 200;
  }

  getStatus() {
    return this._status;
  }

  setHeaders(headers) {
    this._headers = headers || null;
  }

  addHeader(header, value) {
    if (header) {
      if (!this._headers) {
        this._headers = {};
      }
      this._headers[header] = value;
    }
  }

  getHeaders() {
    return this._headers;
  }

  setBody(body) {
    if (body) {
      if (typeof body === "string") {
        this._body = body;
      } else {
        this._body = Json.stringify(body);
        this.addHeader("content-type", "application/json");
      }
    } else {
      this._body = null;
    }
  }

  getBody() {
    return this._body;
  }

}

class MockServer {

  constructor(port = null) {
    this._port = port || 0;
    this._server = null;
  }

  start(requestHandler = null) {
    this._server = Http.createServer((req, res) => {
      let method = req.method;
      let url = `${this.getGatewayUrl()}${req.url}`;
      let body = null;
      if (method === "POST" || method === "PUT") {
        body = "";
        req.on('data', chunk => {
          body += chunk.toString();
        });
        req.on('end', () => {
          this._processRequest(method, url, req.headers, body, res, requestHandler);
        });
      } else {
        this._processRequest(method, url, req.headers, body, res, requestHandler);
      }
    });
    try {
      this._server.listen(this._port);
    } catch (e) {
      throw new BaseError("Unable to start the server.", e);
    }
  }

  getPort() {
    if (this._port) {
      return this._port;
    } else if (this._server) {
      return this._server.address().port;
    } else {
      throw new BaseError("Server not running.");
    }
  }

  getGatewayUrl() {
    return `http://localhost:${this.getPort()}`;
  }

  stop() {
    if (this._server) {
      this._server.close();
      this._server = null;
    }
  }

  async _processRequest(method, url, headers, body, res, requestHandler) {
    let request = new Request(method, url, headers, body);
    let response = new Response();
    if (requestHandler) {
      try {
        await requestHandler(request, response);
      } catch (e) {
        response.setStatus(500);
        response.setBody(e.stack);
        response.setHeaders(null);
      }
    } else {
      response.setStatus(200);
      let responseBody = {
        method: request.getMethod(),
        url: request.getUrl(),
        headers: request.getHeaders(),
        body: request.getBody()
      };
      response.setBody(responseBody);
    }
    res.writeHead(response.getStatus(), response.getHeaders());
    if (response.getBody()) {
      res.write(response.getBody());
    }
    res.end();
  }

}

module.exports = MockServer;
