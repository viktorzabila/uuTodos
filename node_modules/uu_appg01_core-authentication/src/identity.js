"use strict";

/**
 * The identity of a user.
 */
class Identity {
  /**
   * Creates new instance of user identity.
   * @param {String} uuIdentity Unique identifier of the user
   * @param {Object} data Additional identity data.
   * @param {String} data.name Name of the identity
   * @param {String} data.type Type of the identity
   * @param {number} data.levelOfAssurance Numeric representation of identity verification level
   * @param {String} data.authenticationLevelOfAssurance String representation of the means of identity authentication
   * @param {UuAppKey} data.uuAppKey uuAppKey representing the system identity. Set only if the identity type is system identity.
   * @private
   */
  constructor(uuIdentity, data) {
    this._uuIdentity = uuIdentity;
    if (typeof data === "string") {
      this._name = data;
    } else if (data) {
      this._name = data.name;
      this._type = data.type;
      this._levelOfAssurance = data.levelOfAssurance;
      this._authenticationLevelOfAssurance = data.authenticationLevelOfAssurance;
      this._uuAppKey = data.uuAppKey;
    }
  }

  /**
   * Returns a unique identifier of the user.
   * @returns {String} String representation of the unique identifier of the user
   */
  getUuIdentity() {
    return this._uuIdentity;
  }

  /**
   * Returns the name of the user.
   * @returns {String|null} User's name
   */
  getName() {
    return this._name;
  }

  /**
   * Type of the identity.
   * @returns {String|null} Type of the identity
   */
  getType() {
    return this._type;
  }

  /**
   * Numeric representation of identity verification level.
   * @returns {number|null} Numeric representation of identity verification level
   */
  getLevelOfAssurance() {
    return this._levelOfAssurance;
  }

  /**
   * Returns the means of authentication (type of credentials) of the identity.
   * @returns {String} String representation of the means of authentication
   */
  getAuthenticationLevelOfAssurance() {
    return this._authenticationLevelOfAssurance;
  }

  /**
   * Returns uuAppKey representation of system identity.
   * @returns {UuAppKey|null} uuAppKey representation of the system identity. null if type of identity is not system identity.
   */
  getUuAppKey() {
    return this._uuAppKey;
  }

  // TODO Only for backward compatibility, drop for "1.0.0" release
  /**
   * Only for backward compatibility.
   * @private
   */
  getUUIdentity() {
    return this.getUuIdentity();
  }
}

module.exports = Identity;
