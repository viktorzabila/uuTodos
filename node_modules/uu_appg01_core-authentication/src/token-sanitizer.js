"use strict";

const AUTH_HEADER_REGEX = /^([Bb]asic|[Bb]earer)[ ](.+)$/;
const QUERY_PARAM_REGEX = /[?&](access_token|id_token)=([^&]+)/;
const JWT_TOKEN_REGEX = /^[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+$/;

class TokenSanitizer {

  static processToken(token) {
    if (!token) {
      return token;
    } else if (token.match(JWT_TOKEN_REGEX)) {
      return `...${token.split(".")[1]}...`;
    } else {
      let partLength = Math.ceil(token.length / 5);
      return `${token.substring(0, partLength)}...${token.substring(token.length - partLength)}`;
    }
  }

  static processHeader(header) {
    let match;
    if (!header || !(match = header.match(AUTH_HEADER_REGEX))) {
      return header;
    }
    let type = match[1];
    let token = match[2];
    return `${type} ${this.processToken(token)}`;
  }

  static processUri(uri) {
    let match;
    if (!uri || !(match = uri.match(QUERY_PARAM_REGEX))) {
      return uri;
    }
    let param = match[1];
    let token = match[2];
    return uri.replace(`${param}=${token}`, `${param}=${this.processToken(token)}`);
  }

}

module.exports = TokenSanitizer;
