/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

const fs = require("fs");
const path = require("path");
const ProjectConfig = require("uu_appg01_devkit-common/src/config/project-config.js");
const { resolveByTemplateType } = require("../../../tools/helpers.js");

const CDN_BASE_URI = "https://cdn.plus4u.net/";
const URL_CONFIG_PARAM = "devkitDemoConfig"; // URL-safe and regexp-safe name

module.exports = class Middleware {
  constructor(config, webpackConfig) {
    this.config = config;
    let firstWebpackConfig = Array.isArray(webpackConfig) ? webpackConfig[0] : webpackConfig;
    this.outputAbsPath = firstWebpackConfig.output.path;
  }
  process(request, response, next) {
    // handle .html files inside demo/ URLs
    if (request.url.match(/^\/demo\/.*\.html(\?|$)/) && !request.url.match(/oidc-callback/)) {
      let file = request.url.substr(1).replace(/\?.*/, "");
      if (fs.existsSync(file) || fs.existsSync((file = path.join(this.outputAbsPath, file)))) {
        let html = fs.readFileSync(file, "utf-8");
        let modHtml = html;
        // insert extra JS which reconfigures Uu5Loader and renders Controls
        modHtml = modHtml.replace(/<body\b[^>]*>/, (m) =>
          [
            m,
            '<script src="demo-middleware-browser-config.js"></script>', // reconfigure via ES5
            '<script type="text/babel" src="demo-middleware-browser-controls.js"></script>', // Controls can use ES6+
          ].join("\n")
        );

        // update URL for example-config.js script (if any)
        modHtml = modHtml.replace(/(['"])([^'"]+)/g, (m, g1, g2) => {
          if (g2.startsWith(CDN_BASE_URI) && g2.endsWith("/example-config.js")) {
            let demoConfig = (request.query || {})[URL_CONFIG_PARAM] || "";
            let parts = demoConfig.split(",");
            if (parts[0] === "0") return m; // disabled demo config
            let map = {};
            parts.slice(1).forEach((it) => {
              let [a, ...b] = it.split("=");
              map[a] = b.join("=");
            });
            let version = map["workspace"];
            return g1 + this._getExampleConfigPath(version, g2);
          }
          return m;
        });
        return response.status(200).send(modHtml);
      }
    }
    if (request.url.match(/demo-middleware-browser-[^./\\]*\.js$/)) {
      let content = this._getMiddlewareFile(request.url.split("/").pop());
      return content != null ? response.status(200).send(content) : response.status(404);
    }
    next();
  }

  _getMiddlewareFile(name) {
    let result = null;
    let filePath = path.resolve(__dirname, name);
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, "utf-8");
      result = content.replace(/<%=(.*?)%>/g, (m, expr) => {
        let context = this.config; // eslint-disable-line
        let multiLibPortMap = name === "demo-middleware-browser-config.js" ? this._getMutliLibPortMap() : null; // eslint-disable-line
        let urlConfigParam = URL_CONFIG_PARAM; // eslint-disable-line
        return eval(expr) + "";
      });
    }
    return result;
  }

  _getMutliLibPortMap() {
    if (!this._workspaceLibList) this._workspaceLibList = new ProjectConfig().getWorkspaceLibraryList();
    if (!this._workspacePorts) this._workspacePorts = {};
    let curName = path.basename(process.cwd());

    let portMap = {};
    if (this._workspaceLibList.some((it) => it.name === curName)) {
      let origCwd;
      for (let item of this._workspaceLibList) {
        let port = this._workspacePorts[item.pkg.name];
        if (port === undefined) {
          let startable = !(
            !item.pkg.scripts.start ||
            resolveByTemplateType(path.join(__dirname, "..", "..", "start.js"), item.type) == null
          );
          if (startable) {
            if (!origCwd) origCwd = path.resolve(process.cwd());
            process.chdir(item.path);
            try {
              let prjConfig;
              prjConfig = new ProjectConfig();
              // NOTE Might check whether the service is listening (connection-helper.js), but checking
              // build.lock seems sufficient.
              port = prjConfig.get("port") || null;
            } finally {
              process.chdir(origCwd);
            }
          } else {
            port = null;
          }
          this._workspacePorts[item.pkg.name] = port;
        }
        if (port) {
          let isRunning = fs.existsSync(path.join(item.path, "target/build.lock"));
          portMap[item.pkg.name] = isRunning ? (item.name === curName ? 0 : port) : -port;
        }
      }
    } else {
      portMap[this.config.name] = 0;
    }
    return portMap;
  }

  _getExampleConfigPath(version, curUrl) {
    if (version === "as-is") return curUrl;
    let multiLibPortMap = this._getMutliLibPortMap();
    let name;
    if (fs.existsSync(path.join(this.outputAbsPath, "assets/example-config.js"))) name = this.config.name;
    else {
      let libItem = this._workspaceLibList.find((it) =>
        fs.existsSync(path.join(it.path, "target/dist/assets/example-config.js"))
      );
      if (libItem) name = libItem.pkg.name;
    }
    if (!name || multiLibPortMap[name] < 0) return curUrl; // is not started locally
    return resolveToUri(name, version || "local", multiLibPortMap[name], "assets/example-config.js") || curUrl;
  }
};

function resolveToUri(name, version, port, path) {
  if (!version) return null;
  if (version === "as-is") return null;
  if (version === "local") {
    if (port < 0) return null;
    return (port ? "http://localhost:" + port : "") + "/" + path;
  }
  if (version.slice(0, 4) === "cdn-" || version.slice(0, 9) === "cdn-beta-") {
    var uri = CDN_BASE_URI;
    var versionRest = version.slice(4);
    if (versionRest.slice(0, 5) === "beta-") {
      uri += "beta/";
      versionRest = versionRest.slice(5);
    }
    var libNameBase = name.split("-")[0];
    var cdnLibName = (libNameBase.indexOf("_") === -1 && libNameBase.match(/^uu/)
      ? "uu-" + libNameBase
      : libNameBase
    ).replace(/_/g, "-");
    uri += cdnLibName + "/" + versionRest + "/";
    uri += path;
    return uri;
  }
  return null;
}
