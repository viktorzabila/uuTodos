/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

// NOTE !!! Keep this file in ES5 for IE11.
document.addEventListener("DOMContentLoaded", function (e) {
  if (typeof SystemJS === "undefined" && typeof Uu5Loader === "undefined") {
    console.log("Demo page loader configuration: unchanged (neither Uu5Loader nor SystemJS is present)");
    return;
  }
  var getLoaderConfig, setLoaderConfig;
  if (typeof Uu5Loader !== "undefined") {
    getLoaderConfig = function () {
      return Uu5Loader.config();
    };
    setLoaderConfig = function (cfg) {
      return Uu5Loader.config(cfg);
    };
  } else {
    getLoaderConfig = function () {
      var systemJsConfig = SystemJS.getConfig();
      return { imports: systemJsConfig.paths, meta: systemJsConfig.meta, dependencyMap: systemJsConfig.depCache };
    };
    setLoaderConfig = function (cfg) {
      let newSystemJsConfig = { paths: cfg.imports || {}, meta: cfg.meta || {}, depCache: cfg.dependencyMap || {} };
      SystemJS.config(newSystemJsConfig);
    };
  }

  var LIB_NAME = "<%= context.name %>";
  // eslint-disable-next-line
  var LIB_SUBMODULES = JSON.parse('<%= JSON.stringify(context.packs.map(it => it.outputFile).filter(Boolean).map(it => it.replace(/\.js$/, "")).filter(it => it.startsWith(context.name + "-"))) %>'); // prettier-ignore
  // eslint-disable-next-line
  var MULTI_LIB_PORT_MAP = JSON.parse('<%= JSON.stringify(multiLibPortMap) %>'); // prettier-ignore
  var FALLBACK_CDN = "https://cdn.plus4u.net";
  var CDN_BASE_URI = (((window.UU5 || {}).Environment || {}).cdnBaseUri || FALLBACK_CDN).replace(/\/+$/, "") + "/";
  var SERIALIZE_SEPARATOR = ",";
  var URL_CONFIG_PARAM = "<%= urlConfigParam %>";

  var uu5LoaderConfig = getLoaderConfig();
  var uu5LoaderConfigImports = {};
  if (uu5LoaderConfig.imports) {
    for (var p in uu5LoaderConfig.imports) uu5LoaderConfigImports[p] = uu5LoaderConfig.imports[p];
  }
  var onlineWorkspaceProjects = Object.keys(MULTI_LIB_PORT_MAP);
  var imports = {};
  var config = getConfig();
  if (config.enabled) {
    var normCustomizedImports = {};
    var normWorkspaceImports = {};
    for (var name in config.versions) {
      var version = config.versions[name];
      var names = (name === "workspace" && MULTI_LIB_PORT_MAP ? Object.keys(MULTI_LIB_PORT_MAP) : null) || [name];
      for (var i = 0; i < names.length; i++) {
        var uri = resolveToUri(names[i], version, MULTI_LIB_PORT_MAP[names[i]]);
        var baseUri = uri != null ? uri.replace(/[^/]*$/, "") || "./" : null;
        if (name === "workspace") normWorkspaceImports[names[i]] = { uri: uri, baseUri: baseUri, version: version };
        else normCustomizedImports[names[i]] = { uri: uri, baseUri: baseUri, version: version };
      }
    }
    normCustomizedImports = ObjectAssign({}, normWorkspaceImports, normCustomizedImports);
    onlineWorkspaceProjects = Object.keys(MULTI_LIB_PORT_MAP).filter(function (name) {
      if (!normCustomizedImports[name]) return true;
      if (normCustomizedImports[name].version !== "local") return true;
      return normCustomizedImports[name].uri != null;
    });
    for (var name2 in normCustomizedImports) {
      if (normCustomizedImports[name2].uri == null) delete normCustomizedImports[name2];
    }

    // reconfigure also submodules <name>-<anything>.js (-bricks, -forms, etc., if they
    // are not standalone NPM libraries), as well as <name>/<anything>
    for (var k in uu5LoaderConfigImports) {
      var item = normCustomizedImports[k];
      if (item) {
        imports[k] = item.uri;
      } else if (LIB_SUBMODULES.indexOf(k) !== -1) {
        var libItem = normCustomizedImports[LIB_NAME];
        if (libItem) imports[k] = libItem.baseUri + k + ".js";
      } else if (k.indexOf("/") !== -1) {
        var rootName = k.replace(/\/.*/, "");
        var rootItem = normCustomizedImports[rootName];
        if (rootItem) {
          var origRootBaseUri = (uu5LoaderConfigImports[rootName] || "").replace(/[^/]*$/, "");
          if ((uu5LoaderConfigImports[k] || "").slice(0, origRootBaseUri.length) === origRootBaseUri) {
            imports[k] = rootItem.baseUri + (uu5LoaderConfigImports[k] || "").slice(origRootBaseUri.length);
          }
        }
      }
    }

    if (Object.keys(imports).length > 0) {
      console.log("Overridden demo page loader paths:\n" + JSON.stringify(imports, null, 2));
    }

    // use non-minified versions
    for (var k2 in uu5LoaderConfigImports) {
      if (!imports[k2]) {
        imports[k2] = uu5LoaderConfigImports[k2].replace(/\.production\.min\.js$/, ".development.js").replace(/\.min\.js$/, ".js");
      }
    }

    // update the config
    setLoaderConfig({ imports: imports });
  }

  var originalVersions = {};
  originalVersions[LIB_NAME] = parseVersionFromUri(uu5LoaderConfigImports[LIB_NAME]);
  var offlineWorkspaceProjects = Object.keys(MULTI_LIB_PORT_MAP).filter(function (it) {
    return onlineWorkspaceProjects.indexOf(it) === -1;
  });
  window.uuAppDevkitDemoMiddleware = {
    setConfig: setConfig,
    config: config,
    originalPaths: uu5LoaderConfigImports,
    originalVersions: originalVersions,
    onlineWorkspaceProjects: onlineWorkspaceProjects,
    offlineWorkspaceProjects: offlineWorkspaceProjects,
  };

  function getDefaultConfig() {
    return { enabled: true, versions: { workspace: "local" } };
  }
  function getConfig() {
    var configParamValue = getQueryParam(location.search, URL_CONFIG_PARAM);
    var config = deserializeConfig(configParamValue);
    return config;
  }
  function storeConfig(newConfig) {
    var serialized = serializeConfig(newConfig);
    var existingParam = getQueryParam(location.search, URL_CONFIG_PARAM);
    if (serialized !== (existingParam || "")) {
      var newQuery = location.search.slice(1).replace(new RegExp("(^|&)" + URL_CONFIG_PARAM + "=[^&]*"), "");
      if (serialized) {
        newQuery +=
          "&" + URL_CONFIG_PARAM + "=" + encodeURIComponent(serialized).replace(/%2c/gi, ",").replace(/%3d/gi, "=");
      }
      newQuery = newQuery.replace(/^&+/, "").replace(/&+$/, "");
      return location.pathname + (newQuery ? "?" + newQuery : "") + location.hash;
    }
  }
  function setConfig(newConfig) {
    if (typeof newConfig === "function") newConfig = newConfig(getConfig());
    let url = storeConfig(newConfig);
    if (url) location.href = url;
  }
  function resolveToUri(name, version, port) {
    if (!version) return null;
    if (version === "as-is") return null;
    if (version === "local") {
      if (port < 0) return null;
      return (port && name !== LIB_NAME ? "http://localhost:" + port : "") + "/" + name + ".js";
    }
    if (version.slice(0, 4) === "cdn-" || version.slice(0, 9) === "cdn-beta-") {
      var uri = CDN_BASE_URI;
      var versionRest = version.slice(4);
      if (versionRest.slice(0, 5) === "beta-") {
        uri += "beta/";
        versionRest = versionRest.slice(5);
      }
      var libNameBase = name.split("-")[0];
      var cdnLibName = (
        libNameBase.indexOf("_") === -1 && libNameBase.match(/^uu/) ? "uu-" + libNameBase : libNameBase
      ).replace(/_/g, "-");
      uri += cdnLibName + "/" + versionRest + "/";
      uri += name + ".js";
      return uri;
    }
    return null;
  }
  function parseVersionFromUri(uri) {
    var version = null;
    if (!uri) {
      version = null;
    } else {
      var cdn = uri.slice(0, CDN_BASE_URI.length) === CDN_BASE_URI;
      var cdnVersion = cdn
        ? uri.replace(/^.*?\/((\d+)\.(\d+)\.(\d+)[^/]*).*/, function (m, g1) {
            return g1;
          })
        : null;
      if (cdn && cdnVersion === uri) {
        version = "custom";
      } else {
        var cdnBeta = cdn ? uri.slice(CDN_BASE_URI.length).slice(0, 5) === "beta/" : null;
        version = cdnBeta
          ? "cdn-beta-" + cdnVersion
          : cdn
          ? "cdn-" + cdnVersion
          : uri === location.origin + "/" + LIB_NAME + ".js"
          ? "local"
          : "custom";
      }
    }
    return version;
  }
  function serializeConfig(config) {
    var parts = [];
    if (config) {
      var defaultConfig = getDefaultConfig();
      config = ObjectAssign({}, defaultConfig, config);
      parts.push(config.enabled ? 1 : 0);
      if (config.versions) {
        for (var k in config.versions) parts.push(k + "=" + config.versions[k]);
      }
      if (
        config.enabled === defaultConfig.enabled &&
        (!config.versions || shallowEquals(config.versions, defaultConfig.versions))
      ) {
        parts = [];
      }
    }
    return parts.join(SERIALIZE_SEPARATOR);
  }
  function deserializeConfig(value) {
    var result = getDefaultConfig();
    if (value) {
      var parts = value.split(SERIALIZE_SEPARATOR);
      result.enabled = parts.shift() === "1";
      while (parts.length) {
        var p = parts.shift().split("=");
        result.versions[p[0]] = p.slice(1).join("=");
      }
    }
    return result;
  }
  function shallowEquals(a, b) {
    if (a === b || !a || !b || typeof a !== "object" || typeof b !== "object") return a === b;
    if (Object.keys(a).length !== Object.keys(b).length) return false;
    for (var k in a) if (a[k] !== b[k]) return false;
    return true;
  }
  function getQueryParam(query, name) {
    var parts = query.split(/[&?]/);
    for (var i = 0; i < parts.length; i++) {
      var eqIndex = parts[i].indexOf("=");
      if (eqIndex !== -1) {
        var paramName = decodeURIComponent(parts[i].slice(0, eqIndex));
        if (paramName === name) return decodeURIComponent(parts[i].slice(eqIndex + 1));
      }
    }
    return undefined;
  }
  function ObjectAssign() {
    if (Object.assign) return Object.assign.apply(Object, arguments);
    // IE
    var r = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      var v = arguments[i];
      if (v != null && (typeof v === "object" || typeof v === "function")) {
        for (var k in v) r[k] = v[k];
      }
    }
    return r;
  }
});
