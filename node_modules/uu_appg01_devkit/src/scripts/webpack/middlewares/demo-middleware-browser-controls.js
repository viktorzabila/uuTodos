/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

import React from "react";
import ReactDOM from "react-dom";

const LIB_NAME = "<%= context.name %>";
const LIB_VERSION = "<%= context.version %>";
const LIB_VERSION_MAJOR = LIB_VERSION.replace(/\..*/, "");
let {
  setConfig,
  config,
  originalPaths,
  originalVersions,
  onlineWorkspaceProjects,
  offlineWorkspaceProjects,
} = window.uuAppDevkitDemoMiddleware;

let style = document.createElement("style");
style.innerHTML = `
.uu-app-devkit-demo-middleware-controls {
  position: fixed;
  right: 0;
  top: 0;
  z-index: 10;
}
.uu-app-devkit-demo-middleware-controls-select {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0px;
  box-sizing: border-box;
  text-transform: none;
  pointer-events: initial;
}
.uu-app-devkit-demo-middleware-controls-offline {
  text-align: right;
  font-size: 90%;
}`;
document.body.appendChild(style);
let div = document.createElement("div");
document.body.appendChild(div);
ReactDOM.render(<Controls config={config} originalPaths={originalPaths} originalVersions={originalVersions} />, div);

function Controls(props) {
  let { originalPaths, originalVersions, config } = props;

  let items = [
    { value: "local" },
    { value: "cdn-" + LIB_VERSION_MAJOR + ".0.0" },
    { value: "cdn-beta-" + LIB_VERSION_MAJOR + ".0.0" },
  ];
  items.forEach((it) => {
    it.label = _versionToLabel(it.value, LIB_NAME);
  });
  let asIsItemLabel = _versionToLabel((originalVersions || {})[LIB_NAME]);
  items.push({
    value: "as-is",
    label: LIB_NAME + " as-is - " + asIsItemLabel,
    title: "As specified in HTML page: " + (originalPaths || {})[LIB_NAME],
  });

  let activeVersion =
    config.enabled !== false ? (config.versions || {})["workspace"] || (config.versions || {})[LIB_NAME] : "as-is";
  if (!items.some((it) => it.value === activeVersion)) {
    if (!activeVersion) activeVersion = "unknown";
    items.push({ value: activeVersion, label: _versionToLabel(activeVersion, LIB_NAME) });
  }
  // NOTE Cannot use items.find() due to IE.
  let activeItem;
  for (let i = 0; i < items.length; i++) {
    if (items[i].value === activeVersion) {
      activeItem = items[i];
      break;
    }
  }

  return (
    <div className="uu-app-devkit-demo-middleware-controls">
      <input
        type="checkbox"
        defaultChecked={config.enabled !== false}
        onChange={_toggleEnabled}
        title="If unchecked, loader configuration will remain as it is in the HTML page (not even .min.js => .js replacements will take place)."
      />{" "}
      <select
        defaultValue={activeVersion}
        onChange={_onVersionChange}
        disabled={config.enabled === false}
        className="uu-app-devkit-demo-middleware-controls-select"
        title={activeItem ? activeItem.title : undefined}
      >
        {items.map((it) => (
          <option value={it.value} key={it.value} title={it.title}>
            {it.label}
          </option>
        ))}
      </select>
      {offlineWorkspaceProjects.length > 0 ? (
        <div
          title={"Not running locally:\n" + offlineWorkspaceProjects.join("\n")}
          className="uu-app-devkit-demo-middleware-controls-offline"
        >
          {onlineWorkspaceProjects.length +
            "/" +
            (onlineWorkspaceProjects.length + offlineWorkspaceProjects.length) +
            " projects overridden"}
        </div>
      ) : null}
    </div>
  );
}

function _versionToLabel(version, libName = "") {
  let result =
    version == null
      ? "not configured"
      : version.slice(0, 9) === "cdn-beta-"
      ? "CDN beta " + version.slice(9).replace(/^(\d+)\.0\.0$/, (m, g) => g + ".x")
      : version.slice(0, 4) === "cdn-"
      ? "CDN " + version.slice(4).replace(/^(\d+)\.0\.0$/, (m, g) => g + ".x")
      : version === "local"
      ? "local - " + LIB_VERSION
      : version;
  if (libName) result = libName + " " + result;
  return result;
}
function _onVersionChange(e) {
  let value = e.target.value;
  if (value !== "unknown") {
    let versions = { workspace: value };
    setConfig({ versions });
  }
}

function _toggleEnabled() {
  setConfig((config) => ({ ...config, enabled: config && config.enabled === false ? true : false }));
}
