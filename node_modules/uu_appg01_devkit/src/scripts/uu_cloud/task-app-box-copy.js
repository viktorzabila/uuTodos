const path = require("path");
const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");
const FormData = require("form-data");

const ATTACHMENT_LIST_URI = "ues/core/attachment/UESAttachment/getAttachmentList";
const ATTACHMENT_DOWNLOAD_URI = "ues/core/attachment/UESAttachment/getAttachmentData";

class uuAppBoxCopyTask {

  constructor(cloudConfig) {
    this.config = cloudConfig.uuAppBoxCopyConfig();
    this.uuAppClient = new AppClient(this.config.oidcToken, this.config.appClientOpts);
    this.nexusAppClient = new AppClient(this.config.token, this.config.appClientOpts);
  }

  async process() {
    let files = await this._listAttachementsFromUu(this.config.appBoxUri);

    let fileMap = this._prepareFileMap(files);

    for (let code in fileMap) {
      let file = fileMap[code];
      let fileData = await this._downloadFromUU(file.uuUri);

      if (code.includes("UUAPP-DEPLOY")) {
        let data = this._processCloudDescriptor(fileData.body, fileMap);
        await this._uploadToNexus(file.filename, file.directory, data);
      } else {
        await this._uploadToNexus(file.filename, file.directory, fileData.body);
      }
      console.log("Done");
    }

    console.log("Finished");
  }

  _processCloudDescriptor(data, fileMap) {
    let json = JSON.parse(data);

    json.data.packs.forEach(pack => {
      pack.uri = fileMap[pack.code].nexusUri
    });

    return JSON.stringify(json, null, 2);
  }

  _prepareFileMap(files) {
    let fileMap = new Map();
    for (let file of files) {
      let suffix = path.extname(file.fileName);
      let filename = file.code.replace(/\//, "_") + suffix;
      let directory = this.config.nexusDirectory;
      let nexusUri = `${this.config.appBoxCopyLocationUri}/${directory}/${filename}`;
      let uuUri = file.uri;

      fileMap[file.code] = {
        filename,
        directory,
        nexusUri,
        uuUri
      };
    }
    return fileMap;
  }

  async _listAttachementsFromUu(appBoxUri) {
    console.log(`Listing attachements for AppBox in UU: ${this.config.appBoxUri}...`);
    let response;
    try {
      response = await this.uuAppClient.exchange(
          CmdHelper.buildCmdUrl(
              this.uuAppClient.os8BaseUri + "/" + ATTACHMENT_LIST_URI,
              appBoxUri
          ),
          "get"
      );
      let json = JSON.parse(response.body);
      return json.pageEntries;
    } catch (e) {
      throw new Error(`Unable to load attachements from UU: ${e}`);
    }
  }

  async _downloadFromUU(uri) {
    console.log(`Downloading attachement ${uri} from UU...`);
    try {
      let headers = {
        "Accept": "application/octet-stream"
      }
      return await this.uuAppClient.exchange(
          CmdHelper.buildCmdUrl(
              this.uuAppClient.os8BaseUri + "/" + ATTACHMENT_DOWNLOAD_URI,
              uri
          ),
          "get", null, headers
          /*, 0, {encoding: null, stream: true}*/ // TODO use streams = stream it from one UU to Nexus
          , 0, {encoding: null}
      );
    } catch (e) {
      throw new Error(`Unable to download attachement from UU: ${e}`);
    }
  }

  async _uploadToNexus(filename, directory, data) {
    console.log(`Uploading file ${filename} into Nexus...`);

    let form = new FormData();
    form.append("raw.directory", directory);
    form.append("raw.asset1.filename", filename);
    form.append("raw.asset1", data);

    try {
      return await this.nexusAppClient.exchange(
          this.config.nexusDomain + "/service/rest/v1/components?repository=" + this.config.nexusRepository,
          "post",
          form
      );
    } catch (e) {
      throw new Error(`Unable to upload data to Nexus: ${e}`);
    }
  }

}

module.exports = uuAppBoxCopyTask;
