const fs = require("fs");
const path = require("path");

const paths = require("../config/paths.js");
const zip = require("../tools/zip.js");
const UuCloudConfig = require("./uu_cloud/uu-cloud-config");
const Pack = require("uu_appg01_devkit-common/src/tools/package.js");
const helpers = require("../tools/helpers.js");

const DEFAULT_FILES = ["app.js", "package.json", "app", "config", "env", "public", ".npmrc"];

module.exports = class Package {

  constructor(config) {
    this.config = config;
  }

  async process() {
    // Ensure project is built before packaging
    await helpers.exec("npm run --loglevel=error build -- " + this.config.toCommandLineArgs().join(" ")); // TODO Escaping.
    Pack.getSingletonSync("package.json").loadSync(); // reload as version might have changed

    let pkg = Pack.getSingletonSync("package.json").get();
    let uuCloudConfig = new UuCloudConfig(path.resolve("."), pkg.name, pkg.version, paths.buildDir, this.config);

    console.log("Creating uuCloud descriptor.");
    let descriptorPath = uuCloudConfig.generateCloudDescriptor();
    const uuSubAppDescriptor = uuCloudConfig.updateUuSubAppDescriptor();
    uuCloudConfig.updateAsidDescriptor(uuSubAppDescriptor);

    console.log("  " + descriptorPath);

    console.log("Creating App package.");
    let projectName = pkg.name;
    let projectVersion = uuCloudConfig.getQualifiedVersion();
    let qualifiedAppName = `${projectName}-${projectVersion}`;
    let appPackagePath = path.join(paths.buildDir, `${qualifiedAppName}.zip`);
    let packFiles = new Set([...DEFAULT_FILES, ...(pkg.files || [])]);
    await zip(appPackagePath, appPackage => {
      for (let packFile of Array.from(packFiles)) {
        if (this._fileExists(packFile)) {
          if (this._isDirectory(packFile)) {
            appPackage.directory(`${packFile}/`, `${qualifiedAppName}/${packFile}`);
          } else {
            appPackage.file(packFile, {name: `${qualifiedAppName}/${packFile}`});
          }
        }
      }
    });
    console.log("  " + appPackagePath);
  }

  _fileExists(file) {
    return fs.existsSync(`./${file}`);
  }

  _isDirectory(file) {
    return fs.lstatSync(`./${file}`).isDirectory();
  }

};
