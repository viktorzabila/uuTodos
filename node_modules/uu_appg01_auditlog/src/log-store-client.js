"use strict";

const { UseCaseContext } = require("uu_appg01_core-appserver");
const { Uri, UriBuilder } = require("uu_appg01_core-uri");
const { AuthenticationService } = require("uu_appg01_core-authentication");
const { Config } = require("uu_appg01_core-utils");
const { AppClient } = require("uu_appg01_core-appclient");
const { LoggerFactory } = require("uu_appg01_core-logging");

const Errors = require("./api/errors/sys-auditlog-error");

const IMPORT_UC = "logRecord/import";
const LOGGER_NAME = "auditLog";

class LogStoreClient {

  constructor() {
    this.logger = LoggerFactory.get("uuapp.auditlog.logStoreClient");
    this.asid = Config.get("asid");
    this.uuEe = Config.get("uu_app_auditlog_app_logstore_uuee") || "app_identity";
  }

  async importLogRecords(logStoreUri, logRecordList) {
    const callUri = UriBuilder.parse(logStoreUri).setUseCase(IMPORT_UC).toUri();

    // hds 1
    let callOptions;
    try {
      let session = await AuthenticationService.authenticate(this.uuEe, callUri); // a1
      let headers = {};
      headers["Authorization"] = await session.getCallToken(null, { useTokenExchange: false });
      callOptions = { headers };
    } catch (e) {
      throw new Errors.AppLogStoreImport.AuthenticationFailed({}, { uuIdentity: this.uuEe }, e)
    }

    // hds 2
    const uri = UseCaseContext.getUri();
    const transformedLogRecordList = this._prepareLogRecordList(logRecordList, uri);

    // hds 3
    const logSourceUri = UriBuilder.parse(uri).setTid(null).setAwid(this.asid).toUri();

    const dtoIn = {
      logSourceUri: logSourceUri.getBaseUri().toString(),
      logRecordList: transformedLogRecordList
    };

    // hds 4
    try {
      return await AppClient.post(callUri, dtoIn, callOptions);
    } catch (e) { // a2
      if (e.code === "uu-applogstore-main/logRecord/import/importsPerMinuteLimitExceeded") {
        // TODO postpone the import based on error parameters
      }
      throw new Errors.AppLogStoreImport.ImportFailed({}, { appLogStoreUri: logStoreUri }, e);
    }
  }

  _prepareLogRecordList(logRecords, logSourceUri) {
    const logRecordList = logRecords.map(l => {
      const log = Object.assign({}, l);

      log.logAsid = this.asid;
      log.subApp = Uri.parse(logSourceUri).getProduct();
      delete Object.assign(log, { logAwid: log.awid }).awid;
      delete Object.assign(log, { logId: log.id }).id;
      delete Object.assign(log, { logTypeCode: log.eventTypeCode }).eventTypeCode;
      delete Object.assign(log, { logData: log.parameters }).parameters;
      delete log.sys;
      log.logger = LOGGER_NAME;
      return log;
    });

    return logRecordList;
  }
}

module.exports = new LogStoreClient();
