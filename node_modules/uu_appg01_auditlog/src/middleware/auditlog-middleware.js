"use strict";

const jsonpath = require("jsonpath");
const AuditLog = require("../auditlog.js");
const { DaoFactory } = require("uu_appg01_datastore");
const { LoggerFactory } = require("uu_appg01_core-logging");

// DefaultUcHandler has MIDDLEWARE_ORDER = -500, we put UuAuditLog between them
const MIDDLEWARE_ORDER = -550;

const AppServer = require("uu_appg01_core-appserver");

class AuditLogMiddleware {
  constructor() {
    this.name = "uuAuditLog middleware";
    this.order = MIDDLEWARE_ORDER;
    this.isDataStoreOn = DaoFactory.isDataStoreOn();
    this.logger = LoggerFactory.get("AuditLogMiddleware");
  }

  pre(req, res, next) {
    res.locals.auditLogStartTime = Date.now();

    return next();
  }

  ensure(req, res) {
    if (!this.isDataStoreOn) {
      return;
    }

    let auditLogData = {};
    let { locals } = res;

    let customAttrs = AppServer.UseCaseContext.getUseCaseProperties();
    if (!customAttrs || Object.keys(customAttrs).length === 0) {
      return;
    } // TODO check whether it works like this on static resource calls

    let customSession = AppServer.UseCaseContext.getSession();
    let customUri = AppServer.UseCaseContext.getUri();

    let endTime = Date.now();
    auditLogData.duration = endTime - locals.auditLogStartTime;
    let statusCode = res.statusCode;
    if (typeof statusCode === "string" || statusCode instanceof String) {
      statusCode = Number(statusCode);
    }
    auditLogData.ucStatus = statusCode;
    auditLogData.useCaseType = customAttrs.getType();
    const clientIdentity = customSession.getClientIdentity();
    auditLogData.clientAppId = clientIdentity && clientIdentity.getAwid() ? clientIdentity.getAwid() : customSession.getAttribute("client_app_id");
    auditLogData.clientAppName = clientIdentity && clientIdentity.getProduct() ? clientIdentity.getProduct() : customSession.getAttribute("client_app_name");
    auditLogData.tokenId = customSession.getId();
    auditLogData.gateway = customUri.getGateway();
    auditLogData.uri = locals.uri.toString().replace(/\?.+/, "");

    let authorizationResult = AppServer.UseCaseContext.getAuthorizationResult();
    if (authorizationResult) {
      auditLogData.profileList = authorizationResult.getAuthorizedProfiles();
    }

    if (req.headers["x-forwarded-for"]) {
      auditLogData.forwardedFor = req.headers["x-forwarded-for"];
    }

    if (req.headers["x-base-uri-alias"]) {
      auditLogData.baseUriAlias = req.headers["x-base-uri-alias"];
    }

    if ("dispatchedError" in locals) {
      auditLogData.dispatchedErrorCode = locals.dispatchedError.code;
      auditLogData.dispatchedErrorMessage = locals.dispatchedError.message;
    }

    auditLogData.dtoInAuditMap = this._parseDtoInAuditMap(
      customAttrs.getAttribute("dtoInAuditMap"),
      locals.parsedParameters
    );

    this._logData(auditLogData);
  }

  _parseDtoInAuditMap(dtoInAuditMap, dtoIn) {
    if (!dtoInAuditMap || !dtoIn) {
      return null;
    }
    let result = {};
    for (let [key, path] of Object.entries(dtoInAuditMap)) {
      try {
        let tmp = jsonpath.query(dtoIn, path);
        if (tmp.length === 0) { // the expected value is not in dtoIn
          continue;
        }
        result[key] = tmp[0];
      } catch (e) {
        this.logger.warn(`The expected JSONPath string ${path} is invalid`,e);
      }
    }
    return result;
  }

  _logData(data) {
    let severity = "CRITICAL";
    let respCode = data.ucStatus;
    let { dispatchedErrorMessage: message } = data;

    if (respCode >= 200 && respCode <= 399) {
      severity = "INFO";
      message = "Use case executed.";
    } else {
      message = message || "Use Case failed.";
      if (respCode >= 400 && respCode <= 499) {
        severity = "ERROR";
      }
    }

    let eventTypeCode = "UC_EXECUTION";
    let parameters = {
      duration: data.duration,
      ucStatus: data.ucStatus,
      useCaseType: data.useCaseType,
      profileList: data.profileList,
      clientAppId: data.clientAppId,
      clientAppName: data.clientAppName,
      tokenId: data.tokenId,
      gateway: data.gateway,
      uri: data.uri,
      forwardedFor: data.forwardedFor,
      dtoInAuditMap: data.dtoInAuditMap
    };
    if (data.baseUriAlias) {
      parameters.baseUriAlias = data.baseUriAlias;
    }

    if (data.dispatchedErrorCode) {
      parameters.errorCode = data.dispatchedErrorCode;
    }

    AuditLog.log(severity, eventTypeCode, message, parameters);
  }
}

module.exports = AuditLogMiddleware;
