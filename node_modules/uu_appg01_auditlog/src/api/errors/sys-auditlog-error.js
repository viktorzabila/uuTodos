"use strict";

const SysAuditLogGeneralError = require("./sys-auditlog-general-error.js");

const CreateAuditLogRecord = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}sys/logRecord/create/`,

  InvalidDtoIn: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${CreateAuditLogRecord.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },

  DaoFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${CreateAuditLogRecord.UC_CODE}daoFailed`;
      this.message = "DAO method failed.";
    }
  }
};

const DeleteBeforeTime = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}sys/logRecord/delete/`,

  InvalidDtoIn: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${DeleteBeforeTime.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },

  DaoFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${DeleteBeforeTime.UC_CODE}daoFailed`;
      this.message = "DAO method failed.";
    }
  }
};

const AppLogStoreImport = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}importToAppLogStore/`,

  ImportFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${AppLogStoreImport.UC_CODE}importFailed`;
      this.message = "Failed to import logs to the uuAppLogStore.";
    }
  },

  AuthenticationFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${AppLogStoreImport.UC_CODE}authenticationFailed`;
      this.message = "Unable to authenticate user used to import logs to the uuAppLogStore.";
    }
  },
};

const LogRecordList = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}sys/logRecord/list/`,

  InvalidDtoIn: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordList.UC_CODE}invalidDtoIn`;
      this.message = "DtoIn is not valid.";
    }
  },

  InvalidIntervalDefinition: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordList.UC_CODE}invalidIntervalDefinition`;
      this.message = "DtoIn.timeFrom is not before or equal to dtoIn.timeTo.";
    }
  }
};

const LogRecordTransfer = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}sys/logRecord/transfer/`,

  AppLogStoreUriIsNotSet: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordTransfer.UC_CODE}appLogStoreUriIsNotSet`;
      this.message = "AppLogStore uri is not set. Logs cannot be transferred.";
    }
  },

  SysAuditLogConfigDaoUpdateFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordTransfer.UC_CODE}sysAuditLogConfigDaoUpdateFailed`;
      this.message = "Failed to update sysAuditLogConfig object.";
    }
  },

  SysAuditLogConfigDoesNotExist: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordTransfer.UC_CODE}sysAuditLogConfigDoesNotExist`;
      this.message = "SysAuditLogConfig does not exist.";
    }
  },
  TransferRecordsToAppLogStoreFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordTransfer.UC_CODE}transferRecordsToAppLogStoreFailed`;
      this.message = "Failed to transfer AuditLog Records to uuAppLogStore.";
    }
  }
};

const LogRecordGetTransferStatus = {
  UC_CODE: `${SysAuditLogGeneralError.ERROR_PREFIX}sys/logRecord/getTransferStatus/`,

  SysAuditLogConfigDoesNotExist: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordGetTransferStatus.UC_CODE}sysAuditLogConfigDoesNotExist`;
      this.message = "SysAuditLogConfig does not exist.";
    }
  },

  SysAuditLogConfigDaoUpdateFailed: class extends SysAuditLogGeneralError {
    constructor() {
      super(...arguments);
      this.code = `${LogRecordGetTransferStatus.UC_CODE}sysAuditLogConfigDaoUpdateFailed`;
      this.message = "Failed to update sysAuditLogConfig object.";
    }
  }
};

module.exports = {
  CreateAuditLogRecord,
  DeleteBeforeTime,
  AppLogStoreImport,
  LogRecordList,
  LogRecordTransfer,
  LogRecordGetTransferStatus
};
