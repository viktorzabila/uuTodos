"use strict";

const { UuObjectDao } = require("uu_appg01_objectstore");
const { DbConnection } = require("uu_appg01_datastore");

class SysAuditLogConfigMongo extends UuObjectDao {
  async createSchema() {
    await super.createIndex({ awid: 1 }, { unique: true });
  }

  async create(uuObject) {
    return super.insertOne(uuObject);
  }

  async getByAwid(awid) {
    return super.findOne({ awid });
  }

  async lockByAwid(awid, lock) {
    return super.lockOne({ awid }, lock);
  }

  async updateById(id, update, lock) {
    return super.findOneAndUpdate({ id }, update, "LOCK", lock);
  }

  async unlockById(id, lock) {
    return super.unlockOne({ id }, lock);
  }

  async obtainPruneLock(awid, lockedBy = "", pruneLockTtl = 0) {
    let date = new Date();
    let filter = {
      awid,
      $or: [
        {
          "pruneLock.lockedSince": {
            $exists: false
          }
        },
        {
          "pruneLock.lockedSince": {
            $lte: new Date(date.setMinutes(date.getMinutes() - pruneLockTtl))
          }
        }
      ]
    };

    let update = {
      $set: {
        pruneLock: {
          lockedBy: lockedBy,
          lockedSince: new Date()
        }
      }
    };

    let db = await DbConnection.get(this.customUri);
    let collection = await db.collection(this.collectionName);

    let object = await collection.findOneAndUpdate(filter, update);
    return object && object.lastErrorObject && object.lastErrorObject.updatedExisting;
  }
}

module.exports = SysAuditLogConfigMongo;
