"use strict";

const WINDOW = location.href.startsWith("about:") && window.frameElement ? parent : window;
const BASE_ELEMENT = WINDOW.document.querySelector("base");
const APP_BASE_URI = WINDOW.location.protocol + "//" + WINDOW.location.host + ((BASE_ELEMENT && BASE_ELEMENT.getAttribute("data-uu-app-base") || "") || "/");
const CANONICAL_APP_BASE_URI = ((new RegExp("uu.app.cbu=([^;]+)")).exec(WINDOW.document.cookie) || [])[1];
const CSRF_COOKIE = new RegExp("uu.app.csrf=([^;]+)");
const CSRF_HEADER = "x-csrf-token";

/**
 * Interceptor to inject csrf token to request headers.
 */
class CsrfTokenHandler {

  constructor(next, options = null) {
    this._next = next;
    this._options = options || {};
    this._appBaseUri = APP_BASE_URI.replace(/\/$/, "");
    this._canonicalAppBaseUri = CANONICAL_APP_BASE_URI && CANONICAL_APP_BASE_URI.replace(/\/$/, "");
  }

  async invoke(request, options = null) {
    let csrfToken = (CSRF_COOKIE.exec(WINDOW.document.cookie) || [])[1];
    if (csrfToken && (request.uri.startsWith(this._appBaseUri) || request.uri.startsWith(this._canonicalAppBaseUri))) {
      request.headers[CSRF_HEADER] = csrfToken;
    }
    return this._next.invoke(request, options);
  }

}

module.exports = CsrfTokenHandler;
