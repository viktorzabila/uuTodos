"use strict";

const { BaseError } = require("uu_appg01_core-utils");

const Response = require("../http/response.js");
const Request = require("../http/request.js");

/**
 * Object passed as parameter for controllers dispatched using
 * {UseCaseDispatcher}. It provides high-level access
 * to data provided by client request.
 */
class UseCaseEnvironment {
  /**
   * Creates new instance of use case environment.
   * @param params Environment data
   * @private
   */
  constructor(params) {
    this._request = new Request(params.request);
    this._response = new Response(params.response);
    this._session = params.session;
    this._authorizationResult = params.authorizationResult;
    this._uri = params.uri;
    this._baseUriAlias = params.baseUriAlias;
    this._dtoIn = params.dtoIn;
  }

  /**
   * Instance of HTTP request allowing low-level access to request data.
   * @returns {Request} Instance of HTTP request
   */
  getRequest() {
    return this._request;
  }

  /**
   * Instance of HTTP response allowing to set custom headers, status and cookies which
   * is not commonly needed and thus is not directly available from UseCaseEnvironment.
   * @returns {Response} Instance of HTTP response
   */
  getResponse() {
    return this._response;
  }

  /**
   * Returns result of authentication process.
   * @returns {Session|null} Result of authentication process
   */
  getSession() {
    return this._session;
  }

  /**
   * Returns result of authorization process.
   * @returns {AuthorizationResult|null} Result of authorization process
   */
  getAuthorizationResult() {
    return this._authorizationResult;
  }

  /**
   * Returns parsed use case URI.
   * @returns {Uri} Use case URI
   */
  getUri() {
    return this._uri;
  }

  /**
   * Returns base URI alias (in case use case was invoked via alias)
   * @return {String|null} Base URI alias
   */
  getBaseUriAlias() {
    return this._baseUriAlias;
  }

  /**
   * Returns parsed request parameters.
   * @returns {Object} Parsed request parameters
   */
  getDtoIn() {
    return this._dtoIn;
  }

  /**
   * Sets use case result.
   * @param {Object|Stream} dtoOut Use case result
   */
  setDtoOut(dtoOut) {
    this.getResponse().setBody(dtoOut);
  }

  /**
   * Sets binary use case result. Results retrieved
   * using the uu_appg01_binarystore library are
   * automatically recognized. Other results may need
   * specification of further options, especially
   * header values.
   * @param {object} dtoOut
   * @param {string} type - type of download (inline|attachment; defaults to
   *    "inline" for images, video and audio, "attachment" for everything else)
   * @param {string|Buffer|stream.Readable} dtoOut.data - binary data
   * @param {string} dtoOut.filename - name of a file to be downloaded
   * @param {string} dtoOut.contentType - media type of the binary data
   * @param {string|number} dtoOut.contentLength - size of body
   */
  setBinaryDtoOut(dtoOut, type = null) {
    let { data, stream, ...options } = dtoOut;
    data = data || stream;

    if (!data) {
      throw new BaseError(
        "Missing data to be downloaded. Make sure dtoOut contains a data property" + "or a stream property."
      );
    }

    options.contentDisposition = type;

    this.getResponse().setBinaryBody(data, options);
  }

  /**
   * Returns string representation of environment.
   * @returns {String} String representation of environment
   */
  toString() {
    return `{"Request": ${this.request},\n"Response": ${this.response}`;
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get request() {
    return this.getRequest();
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get response() {
    return this.getResponse();
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get session() {
    return this.getSession();
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get authzContext() {
    return this.getAuthorizationResult();
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get uri() {
    return this.getUri();
  }

  /**
   * Object-like getter for backward compatibility.
   * @private
   */
  get parameters() {
    return this.getDtoIn();
  }

  /**
   * Object-like setter for backward compatibility.
   * @private
   */
  set result(value) {
    this.response.body = value;
  }
}

module.exports = UseCaseEnvironment;
