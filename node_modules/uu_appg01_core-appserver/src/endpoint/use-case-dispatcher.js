"use strict";
// NODE MODULES
const fs = require("fs");
const Path = require("path");
const AsyncWrapper = require("./async-wrapper.js");
const { Config, BaseError } = require("uu_appg01_core-utils");
const { Perflog } = require("uu_appg01_core-perflog");

// LIBRARY MODULES
const UseCaseEnvironment = require("./use-case-environment.js");
const UseCaseContext = require("./use-case-context.js");
const UveLoader = require("../utils/uve-loader.js");

// CONSTANTS
const UVE = "UVE";
const X_FRAME_OPTIONS_DEFAULT_VALUE = "SAMEORIGIN";
const X_FRAME_OPTIONS_CONFIG_PARAM = "uu_app_server_uve_xframeoptions";
const X_FRAME_OPTIONS_IGNORE_REGEX_CONFIG_PARAM = "uu_app_server_uve_xframeoptions_ignore_regex";

/**
 * UseCaseDispatcher handles transformation of Express request-response
 * into a UseCaseEnvironment object and its only public interface
 * is a function that returns an Express compliant handler (callback)
 * to be passed into any Express route. Essentially mapping routes
 * to controllers.
 *
 * Preprocessing by UriParser, ParameterParser and Auth middleware is required.
 */
class UseCaseDispatcher {
  /**
   * Creates an instance of UseCaseDispatcher and is invoked
   * once per route / controller.
   * @param useCase
   */
  constructor(useCase) {
    // UVE or CMD
    this._type = useCase.type.toUpperCase();
    // Declaration of controller from mappins.json
    this._qualifiedName = useCase.qualifiedName;
    this._ucName = useCase.useCase;
    // Resolved control method or static resource path
    this._realization = useCase.realization;

    this._publicPath = Config.get("public_path");
    if (!this._publicPath) {
      let root = Config.get("server_root");
      if (!root) {
        throw new BaseError(
          "Server root is not defined. Unable to resolve path to public folder from UseCaseDispatcher."
        );
      }
      this._publicPath = Path.join(root, "public");
    }

    this._xFrameOptions = Config.get(X_FRAME_OPTIONS_CONFIG_PARAM) || X_FRAME_OPTIONS_DEFAULT_VALUE;
    this._xFrameOptionsIgnoreRegex = new RegExp(Config.get(X_FRAME_OPTIONS_IGNORE_REGEX_CONFIG_PARAM) || null);
  }

  /**
   * getCallback returns an async function compliant with Express
   * that, upon invocation (i.e. with each request at a given route),
   * either serves a static asset or invokes the relevant controller
   * with its UseCaseEnvironment and awaits and sends its asynchronous response.
   */
  getCallback() {
    return AsyncWrapper(async (req, res, next) => {
      let ucEnv = this._buildUcEnv(req, res);
      let realization = this._realization;
      // Ensure values are set at least before controller invocation
      // (in case they were not provided by corresponding middleware)
      if (!UseCaseContext.getSession()) {
        UseCaseContext.setSession(ucEnv.getSession());
      }
      if (!UseCaseContext.getAuthorizationResult()) {
        UseCaseContext.setAuthorizationResult(ucEnv.getAuthorizationResult());
      }
      if (this._type === UVE) {
        if (req.get("Accept") && req.accepts(["text/html", "application/json"]) === "application/json") {
          // UVE authorization request
          ucEnv.setDtoOut({
            uuIdentity: ucEnv.getAuthorizationResult().getUuIdentity(),
            authorizedProfileList: ucEnv.getAuthorizationResult().getAuthorizedProfiles(),
            identityProfileList: ucEnv.getAuthorizationResult().getIdentityProfiles(),
            uuAppErrorMap: {}
          });
        } else {
          if (!this._xFrameOptionsIgnoreRegex || !this._xFrameOptionsIgnoreRegex.test(this._ucName)) {
            ucEnv.getResponse().setHeader("x-frame-options", this._xFrameOptions);
          }
          if (typeof realization === "string") {
            // Standard UVE request
            ucEnv.getResponse().setHeader("content-type", "text/html");
            ucEnv.setDtoOut(await UveLoader.load(realization));
          } else {
            // UVE realized by controller
            let qualifiedName = this._qualifiedName;
            await Perflog.measureSection("UU_APP_SERVER_CONTROLLER", async section => {
              section.setAttribute("realization", qualifiedName);
              let result = await realization(ucEnv);
              if (result != null) {
                ucEnv.getResponse().setHeader("content-type", "text/html");
                ucEnv.setDtoOut(result);
              }
            });
          }
        }
      } else {
        let qualifiedName = this._qualifiedName;
        await Perflog.measureSection("UU_APP_SERVER_CONTROLLER", async section => {
          section.setAttribute("realization", qualifiedName);
          let result = await realization(ucEnv);
          if (result != null) {
            ucEnv.setDtoOut(result);
          }
        });
      }
      res.locals.response = ucEnv.getResponse();
      return next();
    });
  }

  /**
   * Turns Express request-response into a UseCaseEnvironment object.
   * @param req
   * @param res
   * @returns {UseCaseEnvironment}
   * @private
   */
  _buildUcEnv(req, res) {
    let ucEnv = {
      uri: res.locals.uri,
      request: req,
      response: res,
      session: res.locals.session,
      authorizationResult: res.locals.authorizationResult,
      dtoIn: res.locals.parsedParameters,
      baseUriAlias: res.locals.baseUriAlias
    };

    return new UseCaseEnvironment(ucEnv);
  }
}

module.exports = UseCaseDispatcher;
