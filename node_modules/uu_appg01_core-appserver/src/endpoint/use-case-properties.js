"use strict";

/**
 * Object providing detailed information about invoked use case.
 */
class UseCaseProperties {
  /**
   * Creates new instance of use case properties.
   * @param name Use case name
   * @param mappingsData Route mappings data
   * @private
   */
  constructor(name, mappingsData) {
    this._name = name;
    this._mappingsData = mappingsData;
  }

  /**
   * Returns use case name.
   * @returns {String} Use case name
   */
  getName() {
    return this._name;
  }

  /**
   * Returns use case type.
   * @returns {String} Use case type
   */
  getType() {
    return this._mappingsData.type;
  }

  /**
   * Returns declared HTTP method(s).
   * @returns {String|Array} Declared HTTP method(s)
   */
  getMethod() {
    let method = this._mappingsData.httpMethod;
    if (method.length < 2) {
      return method[0];
    } else {
      return method;
    }
  }

  /**
   * Returns accepted request body media-type(s).
   * @returns {String|Array} Accepted request body media-types(s)
   */
  getConsumes() {
    let consumes = this._mappingsData.consumes;
    if (consumes.length < 2) {
      return consumes[0];
    } else {
      return consumes;
    }
  }

  /**
   * Returns supported response body media-type(s).
   * @returns {String|Array} Supported response body media-type(s)
   */
  getProduces() {
    let produces = this._mappingsData.produces;
    if (produces.length < 2) {
      return produces[0];
    } else {
      return produces;
    }
  }

  /**
   * Use case realization.
   * @returns {String} Use case realization
   */
  getRealization() {
    return this._mappingsData.qualifiedName;
  }

  /**
   * Returns value of custom use case attribute declared in mappings.json
   * @param name Custom attribute name
   * @returns {*} Attribute value
   */
  getAttribute(name) {
    return this._mappingsData[name];
  }
}

module.exports = UseCaseProperties;
