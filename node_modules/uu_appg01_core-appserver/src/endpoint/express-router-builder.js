"use strict";

const Router = require("express").Router();
const onHeaders = require("on-headers");
const compression = require("compression");
const Parser = require("../runner/mappings-parser.js");
const { LoggerFactory } = require("uu_appg01_core-logging");
const MiddlewareLoader = require("../runner/middleware-loader.js");
const UseCaseDispatcher = require("./use-case-dispatcher.js");

/**
 * ExpressRouterBuilder takes care of constructing an Express compliant router instance.
 * Routers in Express may contain a full set of middleware and/or routes.
 * An Express application may use any number of routers.
 * Using inputs from MappingsParser and MiddlewareLoader classes, this component
 * attaches all loaded middleware to a new Express Router instance and generates
 * all routes provided by MappingsParser.
 */
class ExpressRouterBuilder {
  /**
   * The build method constructs an Express Router, first getting all middleware
   * and routes and then attaching them to the Router instance in correct order.
   * @returns {Router}
   */
  build() {
    this._logger = LoggerFactory.get("UuApp.AppServer");

    let { preControllerMiddleware, postControllerMiddleware, ensureFunctions } = MiddlewareLoader.load();
    this._ensureFunctions = ensureFunctions;

    // add ensure functions' handler first,
    // mainly to enable Perflog's ensure function
    // to measure request time including compression time
    if (ensureFunctions.length > 0) {
      this._logger.debug("Adding ensure function handler to Router.");
      let ensFuncMw = this._ensureFunctionsMiddleware.bind(this);
      Router.use("/", ensFuncMw);
    }

    // add compression middleware
    this._logger.debug("Adding compression middleware to Router.");
    Router.use(compression());

    // add pre-controller middleware
    if (preControllerMiddleware.length > 0) {
      this._logger.debug("Adding pre-controller middleware to Router.");
      Router.use("/", preControllerMiddleware);
    }

    // handle routing and controller invocation
    const mappings = Parser.getRoutes();
    this._logger.info("Registering endpoints.");
    for (let i = 0; i < mappings.length; i++) {
      let useCase = mappings[i];
      if (this._logger.isInfoLoggable()) {
        useCase.httpMethod.forEach(method => {
          useCase.consumes.forEach(consumes => {
            useCase.produces.forEach(produces => {
              this._logger.info(`[${method}, ${useCase.uri}, ${consumes}, ${produces}] => ${useCase.qualifiedName}`);
            });
          });
        });
      }
      let dispatcher = new UseCaseDispatcher(useCase);
      // attach a controller represented by an Express compliant callback function
      // to a given route (with a given method)
      useCase.httpMethod.forEach(httpMethod => {
        Router[httpMethod.toLowerCase()](useCase.route, dispatcher.getCallback());
      });
    }
    this._logger.info("Endpoints registered.");

    // add post-controller middleware
    if (postControllerMiddleware.length > 0) {
      this._logger.debug("Adding post-controller middleware to Router.");
      Router.use("/", postControllerMiddleware);
    }
    return Router;
  }

  _ensureFunctionsMiddleware(req, res, next) {
    let ensFunc = this._ensureFunctions;
    onHeaders(res, () => {
      ensFunc.forEach(f => {
        try {
          f(req, res);
        } catch (e) {
          this._logger.error("Ensure function failed to execute.", e);
        }
      });
    });
    return next();
  }
}

/**
 * Module exports a single instance of ExpressRouterBuilder that is initialized
 * at application startup (when the first relevant require call is resolved).
 * @type {ExpressRouterBuilder}
 */
module.exports = new ExpressRouterBuilder();
