"use strict";

const { Json, Config } = require("uu_appg01_core-utils");
const { Perflog } = require("uu_appg01_core-perflog");
const ExpressBodyParser = require("body-parser");
const multipartParser = require("./partials/multipart-parser.js");
const jsonParser = require("./partials/json-parser.js");
const DotNotationParser = require("../utils/dot-notation-parser.js");

const MIDDLEWARE_ORDER = 200;

const JSON_OBJECT_REGEXP = new RegExp("(^{.*}$)|(^\\[.*\\]$)");
const JSON_STRING_REGEXP = new RegExp('^".*"$');

const MAX_BODY_SIZE_PARAM = "uu_app_server_request_body_max_size";
const DEFAULT_SIZE_LIMIT = "16mb";
const TEXT_TYPES = ["text/plain", "application/json"];

/**
 * ParameterParser uses Express recommended body-parser middleware.
 */
class ParameterParser {
  constructor() {
    this.order = MIDDLEWARE_ORDER;
    this.maxBodySize = Config.get(MAX_BODY_SIZE_PARAM) || DEFAULT_SIZE_LIMIT;
  }

  /**
   * Getter that returns Express compliant middleware function.
   * Express allows an array of middleware callback functions
   * as input as well. Executed from left to right.
   * @returns {Array}
   */
  get pre() {
    return [
      this._startMeasuring,
      multipartParser,
      ExpressBodyParser.urlencoded({ extended: false, limit: this.maxBodySize }),
      this._parseDotNotation.bind(this),
      ExpressBodyParser.raw({ limit: this.maxBodySize }),
      ExpressBodyParser.text({ limit: this.maxBodySize, type: TEXT_TYPES }),
      jsonParser,
      this._getParameters.bind(this),
      this._stopMeasuring
    ];
  }

  ensure(req, res) {
    let stop = res.locals.bodyParserMeasuredSection;
    stop && stop();
  }

  /**
   * Middleware function that makes sure parameters
   * are correctly collected from request object.
   * Returns empty object if none are found.
   *
   * In order of priority:
   * 1) body
   * 2) value of query key "dto"
   * 3) query
   *
   * @param req, res, next
   * @private
   */
  _getParameters(req, res, next) {
    let parameters;
    if (req.body && !this._isEmpty(req.body)) {
      parameters = req.body;
    } else if (req.query && !this._isEmpty(req.query)) {
      parameters = {};
      for (let key of Object.keys(req.query)) {
        let value = req.query[key];
        if (JSON_OBJECT_REGEXP.test(value)) {
          try {
            value = Json.parse(value);
          } catch (e) {
            // It was not valid JSON
          }
        } else if (JSON_STRING_REGEXP.test(value)) {
          value = value.slice(1, -1);
        }
        parameters[key] = value;
      }
      if (parameters.dto) {
        parameters = parameters.dto;
      }
    } else {
      parameters = {};
    }

    res.locals.parsedParameters = parameters;
    return next();
  }

  _isEmpty(obj) {
    for (let x in obj) return false;
    return true;
  }

  _startMeasuring(req, res, next) {
    Perflog.measureSection("UU_APP_SERVER_PARSE_PARAMS", section => {
      let close = section.close;
      res.locals.bodyParserMeasuredSection = () => close.apply(section);
      section.close = () => {
        // Override close method
      };
    });
    return next();
  }

  _stopMeasuring(req, res, next) {
    let stop = res.locals.bodyParserMeasuredSection;
    stop && stop();
    return next();
  }

  _parseDotNotation(req, res, next) {
    if (req.body && !this._isEmpty(req.body)) {
      req.body = DotNotationParser.parse(req.body);
    }

    if (req.query && !this._isEmpty(req.query)) {
      req.query = DotNotationParser.parse(req.query);
    }
    return next();
  }
}

/**
 * Module exports ParameterParser constructor.
 * @type {ParameterParser}
 */
module.exports = ParameterParser;
