"use strict";
const { Perflog, Sysmon } = require("uu_appg01_core-perflog");
const { TokenSanitizer } = require("uu_appg01_core-authentication");
const statistics = require("../monitoring/statistics.js");
const UseCaseContext = require("../endpoint/use-case-context.js");
const UriResolver = require("../utils/uri-resolver.js");

const MIDDLEWARE_ORDER = -700;

const NS_PER_SEC = 1e9;

/**
 * Initializes Perflog performance monitor (including request tracing),
 * System monitor and handles request statistics.
 */
class Monitor {
  constructor() {
    this.order = MIDDLEWARE_ORDER;
    Sysmon.initProvider();
  }

  pre(req, res, next) {
    res.locals.startRequestTime = process.hrtime();
    statistics.beginRequest();
    let traceId = req.headers["x-request-id"];
    UseCaseContext.setRequestId(traceId);
    let uri = UriResolver.getUri(req);
    UseCaseContext.setUri(uri);
    Perflog.initialize(traceId, [req, res], () => {
      let uri = TokenSanitizer.processUri(req.url.toString());
      let rootSection = Perflog._startMeasuredSection("UU_APP_SERVER_REQUEST", { uri: uri });
      res.locals.rootPerflogSection = rootSection;
      next();
    });
  }

  ensure(req, res) {
    let rootSection = res.locals.rootPerflogSection;
    if (rootSection) {
      rootSection.close();
    }
    let diff = process.hrtime(res.locals.startRequestTime);
    let nanos = diff[0] * NS_PER_SEC + diff[1];
    if (res.statusCode < 400) {
      statistics.recordRequest(nanos);
    } else if (res.statusCode < 500) {
      statistics.recordClientError(nanos);
    } else {
      statistics.recordServerError(nanos);
    }
  }
}

/**
 * Module exports Monitor handler constructor.
 * @type {Monitor}
 */
module.exports = Monitor;
