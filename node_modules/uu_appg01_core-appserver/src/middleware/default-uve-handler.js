"use strict";

const Path = require("path");
const { Config, OptsReader, BaseError } = require("uu_appg01_core-utils");
const NotFound = require("../error/not-found.js");
const { LoggerFactory } = require("uu_appg01_core-logging");
const RouteRegister = require("../endpoint/route-register.js");

const MIDDLEWARE_ORDER = -300;

const STATIC_ASSET_CLASSIFIER = "(/?(?:static|assets|public)(/|$))";
const FAVICON_PATH = "/favicon.ico";

/**
 * Enables forward to default user visual entrypoint in case original
 * request URI results in 404 error (functionality needed for
 * client side routing where URI saved in bookmarks might not
 * be URI actually served by application server)
 * Configuration parameters:<br>
 * <b>default_uve_name</b>
 * Default visual use case name. Defaults to +defaultUve+.
 */
class DefaultUveHandler {
  constructor(opts = null) {
    this.order = MIDDLEWARE_ORDER;
    this._logger = LoggerFactory.get("UuApp.AppServer");
    this._opts = new OptsReader(opts, Config);
    this._defaultUveName = null;
    this._staticClassifier = new RegExp(`^${this._opts.get("publicClassifier", STATIC_ASSET_CLASSIFIER)}`);
  }

  pre(req, res, next) {
    let uriProduct = this._getProductFromUri(req);

    this._initDefaultUveName(uriProduct);
    if (!this._defaultUveName || !this._isDefaultUveRequest(req) || req.path.endsWith(FAVICON_PATH)) {
      // Default UVE is not defined, request is not UVE request (or is favicon request)
      return next();
    } else {
      let originalUrl = req.url;
      // Check if UVE exists...
      let useCase = this._getUseCase(originalUrl);
      if (!RouteRegister.exists(useCase, uriProduct)) {
        // ...if not forward to default UVE
        let defaultUveUrl;
        if (!useCase) {
          let [baseUrl, query] = originalUrl.split(/\?(.+)/, 2);
          defaultUveUrl = baseUrl.endsWith("/") ? baseUrl : baseUrl + "/";
          defaultUveUrl += this._defaultUveName;
          if (query) {
            defaultUveUrl += "?" + query;
          }
        } else {
          defaultUveUrl = originalUrl.replace(new RegExp(`${useCase}(/)?(?=$|\\?)`), this._defaultUveName);
        }
        res.locals._uu_app_uve_handler_orig_url = originalUrl;
        req.url = defaultUveUrl;
      }
      return next();
    }
  }

  post(req, res, next) {
    if (res.locals._uu_app_uve_handler_orig_url) {
      req.url = res.locals._uu_app_uve_handler_orig_url;
    }
    return next();
  }

  onError(error, req, res, next) {
    if (res.locals._uu_app_uve_handler_orig_url) {
      req.url = res.locals._uu_app_uve_handler_orig_url;
    }
    return next(error);
  }

  _isDefaultUveRequest(req) {
    let useCase = this._getUseCase(req.url);
    // Request must be GET or HEAD, must not be request for static resource and...
    if (
      (req.method.match(/^GET$/i) || req.method.match(/^HEAD$/i)) &&
      !useCase.match(this._staticClassifier) &&
      // ...does not contain accept header
      (!req.headers.accept ||
        // ... or explicitly requires html
        req.headers.accept.match(/text\/html/) ||
        // ... or accepts anything with exclusion of application/*
        (req.headers.accept.match(/\*\/\*/) && !req.headers.accept.match(/application\//)))
    ) {
      return true;
    } else {
      return false;
    }
  }

  _initDefaultUveName(uriProduct) {
    if (this._defaultUveName === null) {
      let defaultUveName = this._opts.get("default_uve_name", "defaultUve");
      if (RouteRegister.exists(defaultUveName, uriProduct)) {
        this._defaultUveName = defaultUveName;
      } else if (RouteRegister.exists("defaultVuc", uriProduct)) {
        this._defaultUveName = "defaultVuc";
      } else {
        this._defaultUveName = "";
      }
    }
  }

  _getUseCase(url) {
    let pathParts = url
      .substr(1)
      .split("?")[0]
      .split("/");
    return pathParts
      .slice(2)
      .join("/")
      .replace(/^\/|\/$/, "");
  }

  _getProductFromUri(req) {
    let subUrl = req.originalUrl.substr(1);
    return subUrl.substring(0, subUrl.indexOf("/"));
  }
}

/**
 * Module exports Default UVE handler constructor.
 * @type {DefaultUveHandler}
 */
module.exports = DefaultUveHandler;
