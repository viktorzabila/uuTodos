const RouteRegister = require("../endpoint/route-register.js");
const MethodNotAllowed = require("../error/method-not-allowed.js");
const NotAcceptable = require("../error/not-acceptable.js");
const UnsupportedMediaType = require("../error/unsupported-media-type.js");
const NotFound = require("../error/not-found.js");
const UseCaseProperties = require("../endpoint/use-case-properties.js");
const UseCaseContext = require("../endpoint/use-case-context.js");

const MIDDLEWARE_ORDER = 0;
const ACCEPT_ANY = "*/*";
const ACCEPT_BINARY = "application/octet-stream";

class RouteValidator {
  constructor() {
    this.doNotLog = true;
    this.order = MIDDLEWARE_ORDER;
  }

  pre(req, res, next) {
    // get metadata
    let uri = res.locals.uri;
    let useCase = uri.getUseCase();
    let reqMethod = req.method.toUpperCase();
    let useCaseObject = RouteRegister.get(useCase, uri.getProduct(), reqMethod);

    if (!useCaseObject) {
      // validate request ROUTE
      let resourceExists = RouteRegister.exists(useCase, uri.getProduct());
      if (!resourceExists) {
        return next(new NotFound(`Resource with path ${req.url} does not exist.`));
      }
      // validate request METHOD
      let useCaseObjectWithGetMethod = RouteRegister.get(useCase, uri.getProduct(), "GET");
      if (reqMethod === "HEAD" && useCaseObjectWithGetMethod) {
        useCaseObject = useCaseObjectWithGetMethod;
      } else {
        return next(new MethodNotAllowed(`Resource is not accessible via ${reqMethod} method.`));
      }
    }

    // validate ACCEPT header
    let accept = req.get("Accept");
    if (accept && !(accept.includes(ACCEPT_ANY) || accept.includes(ACCEPT_BINARY))) {
      if (!req.accepts(useCaseObject.produces)) {
        return next(
          new NotAcceptable(`Unable to provide response matching any of requested media-types: ${req.get("Accept")}`)
        );
      }
    }
    // validate CONTENT-TYPE
    if (req.get("Content-Type") && this._isNotEmpty(req.body) && !req.is(useCaseObject.consumes)) {
      return next(
        new UnsupportedMediaType(`Unable to process request using declared media-type: ${req.get("Content-Type")}`)
      );
    }

    let ucProperties = new UseCaseProperties(useCaseObject.useCase, useCaseObject);
    UseCaseContext.setUseCaseProperties(ucProperties);
    res.locals.ucProperties = ucProperties;

    // all passed
    return next();
  }

  _isNotEmpty(obj) {
    for (let x in obj) return true;
    return false;
  }
}

module.exports = RouteValidator;
