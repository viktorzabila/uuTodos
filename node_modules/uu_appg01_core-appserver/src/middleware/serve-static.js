"use strict";

const ExpressServeStatic = require("serve-static");
const { Config, OptsReader } = require("uu_appg01_core-utils");
const Path = require("path");
const Fs = require("fs");
const NotFound = require("../error/not-found.js");

const MIDDLEWARE_ORDER = -100;

const ASSET_CLASSIFIER = "(/?(?:static|assets|public)(/|$))";

const VERSION_REGEXP = new RegExp("^(\\/?\\d+\\.\\d+\\.\\d+[^\\/]*\\/)");

// Default value of Cache-Control max-age for static resources (defaults to one year).
const DEFAULT_STATIC_MAX_AGE = 365 * 24 * 60 * 60;

/**
 * Serves static files with the help of Express serve-static middleware.
 */
class ServeStatic {
  constructor() {
    this.order = MIDDLEWARE_ORDER;
    this._opts = new OptsReader(Config);
    this._publicPath = Config.get("public_path") || Path.join(Config.get("server_root"), "public");
    this._classifier = new RegExp("^" + (Config.get("publicClassifier") || ASSET_CLASSIFIER));
    this._index = Config.get("indexFile") || "index.html";
    this._useStaticCache = !Config.isProfileActive("test", "development");
    this._staticMaxAge = this._opts.getNumber("uu_app_server_static_resources_max_age", -1);
  }

  /**
   * Express serve-static itself does not support ignoring
   * parts of route while resolving path to the requested
   * file. Serve-static is therefore wrapped in a middleware
   * function that handles matching requests for static files,
   * manipulating route/path and version prefixes.
   * @param req
   * @param res
   * @param next
   */
  pre(req, res, next) {
    let useCase = res.locals.uri.getUseCase();
    let isStaticRequest;
    if (useCase) {
      isStaticRequest = useCase.match(this._classifier);
    }
    if (!isStaticRequest) {
      return next();
    }
    let resource = useCase.replace(isStaticRequest[1], "");
    resource = resource || this._index;
    let versionFound = resource.match(VERSION_REGEXP);
    let resourceExists = this._fileExists(resource);
    if (!(resourceExists || !versionFound)) {
      resource = resource.replace(versionFound[1], "");
    }
    let originalUrl = req.url;
    req.url = resource;

    const maxAge = this._getCacheMaxAge(versionFound);
    let serve = ExpressServeStatic(this._publicPath, { index: this._index, fallthrough: false, maxAge });
    serve(req, res, err => {
      req.url = originalUrl;
      if (err) {
        return next(new NotFound(`Resource with path "${req.url}" does not exist.`, err));
      } else {
        return next();
      }
    });
  }

  // TODO preferably refactor this to asynchronous check
  /**
   * Synchronously checks if file exists at the given path.
   * @param resourcePath
   * @private
   */
  _fileExists(resourcePath) {
    return Fs.existsSync(Path.join(this._publicPath, resourcePath));
  }

  _getCacheMaxAge(versionFound) {
    let maxAge = null;
    if (versionFound && (this._useStaticCache || this._staticMaxAge > -1)) {
      maxAge = this._staticMaxAge > -1 ? this._staticMaxAge : DEFAULT_STATIC_MAX_AGE;
      maxAge = maxAge * 1000; // convert sec to ms
    }
    return maxAge;
  }
}

/**
 * Module exports ServeStatic constructor.
 * @type {ServeStatic}
 */
module.exports = ServeStatic;
