"use strict";

const {Config, OptsReader} = require("uu_appg01_core-utils");
const {LoggerFactory} = require("uu_appg01_core-logging");
const InvalidNode = require("../error/invalid-node.js");

const ENV_NODE_NAME = "UU_CLOUD_NODE_NAME";
const CFG_MAX_REDIRECTS = "uu_app_server_target_node_max_redirects";
const DEFAULT_MAX_REDIRECTS = 10;
const MIDDLEWARE_ORDER = -450;

/**
 * Handles addressing of particular node.
 */
class TargetNodeFilter {

  constructor() {
    this.order = MIDDLEWARE_ORDER;
    this._nodeName = process.env[ENV_NODE_NAME];
    this._logger = LoggerFactory.get("UuApp.AppServer.NodeFilter");
    let opts = new OptsReader(Config);
    this._maxRedirects = opts.getNumber(CFG_MAX_REDIRECTS, DEFAULT_MAX_REDIRECTS);
  }

  async pre(req, res, next) {
    let targetNodeName = req.headers["x-target-node-name"];
    if (!targetNodeName || !this._nodeName || targetNodeName == this._nodeName) {
      return next();
    } else {
      let url = req.url || "";
      let newUrl;
      let cacheBuster;
      if (cacheBuster= url.match("(&|\\?)_=[^&_]+(_([^&]+))?")) {
        let redirectCounter = Number(cacheBuster[3] || 0);
        if (isNaN(redirectCounter)) {
          redirectCounter = 0;
        }
        if (redirectCounter >= this._maxRedirects) {
          return next(new InvalidNode(`Requested node with name [${targetNodeName}] was not reached within limit of ${redirectCounter} attempts.`));
        }
        newUrl = url.replace(cacheBuster[0], `${cacheBuster[1]}_=${Date.now()}_${++redirectCounter}`);
      } else if (url.indexOf('?') > -1) {
        newUrl = `${url}&_=${Date.now()}_1`;
      } else {
        newUrl = `${url}?_=${Date.now()}_1`
      }
      this._logger.warn(`Node name [${this._nodeName}] does not match requested [${targetNodeName}]. Redirecting.`);
      res.set("Connection","close");
      return res.redirect(307, newUrl);
    }
  }

}

/**
 * Module exports TargetNodeFilter constructor.
 * @type {TargetNodeFilter}
 */
module.exports = TargetNodeFilter;
