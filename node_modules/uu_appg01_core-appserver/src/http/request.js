"use strict";

const { Json } = require("uu_appg01_core-utils");

/**
 * Request object.
 */
class Request {
  constructor(req) {
    this._url = req.url;
    this._method = req.method;
    this._headers = { ...req.headers };
    // TODO cookies
    this._parameters = { ...req.query };
    // TODO attributes
    this._body = { ...req.body };
    this._source = req;
  }

  /**
   * Returns request URL.
   * @returns {string}
   */
  getUrl() {
    return this._url;
  }

  /**
   * Returns request method.
   * @returns {string}
   */
  getMethod() {
    return this._method;
  }

  /**
   * Returns request headers.
   * @returns {Object}
   */
  getHeaders() {
    return this._headers;
  }

  /**
   * Returns parsed request query parameters.
   * @returns {Object}
   */
  getParameters() {
    return this._parameters;
  }

  /**
   * Returns parsed request body.
   * @returns {Object}
   */
  getBody() {
    return this._body;
  }

  /**
   * Returns original Express request.
   * @returns {http.IncomingMessage}
   */
  unwrap() {
    return this._source;
  }

  /**
   * Returns value of request's Content-Type header.
   * @returns {string}
   */
  getContentType() {
    return this._headers["content-type"];
  }

  /**
   * Returns value of request's Accept header.
   * @returns {string}
   */
  getAccept() {
    return this._headers["accept"];
  }

  /**
   * Returns unique request ID.
   * @returns {string}
   */
  getId() {
    return this._headers["x-request-id"];
  }

  /**
   * Checks if request uses POST method.
   * @returns {boolean}
   */
  isPost() {
    return /^post$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses GET method.
   * @returns {boolean}
   */
  isGet() {
    return /^get$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses PUT method.
   * @returns {boolean}
   */
  isPut() {
    return /^put$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses DELETE method.
   * @returns {boolean}
   */
  isDelete() {
    return /^delete$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses OPTIONS method.
   * @returns {boolean}
   */
  isOptions() {
    return /^options$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses HEAD method.
   * @returns {boolean}
   */
  isHead() {
    return /^head$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses TRACE method.
   * @returns {boolean}
   */
  isTrace() {
    return /^trace$/i.test(this.getMethod());
  }

  /**
   * Checks if request uses CONNECT method.
   * @returns {boolean}
   */
  isConnect() {
    return /^connect$/i.test(this.getMethod());
  }

  /**
   * Checks if the resource is cached.
   * @param {Object} opts Cache options.
   * @param {string} opts.etag Value of resource entity tag.
   * @param {string|Date} opts.lastModified Date of last modification.
   * @return {boolean} True if resource is cached.
   */
  isResourceCached(opts = {}) {
    let lmtsHeader = this.getHeaders()["if-modified-since"];
    let etagHeader = this.getHeaders()["if-none-match"];

    const isEtagMatch = () => {
      return !!(opts.etag && etagHeader.split(",").some(tag => tag.trim().replace(/^(W\/)?"|"$/g, "") == opts.etag));
    };

    const isLmtsMatch = () => {
      return !!(opts.lastModified && new Date(opts.lastModified) <= new Date(lmtsHeader));
    };

    if (lmtsHeader && etagHeader) {
      return isEtagMatch() && isLmtsMatch();
    } else if (etagHeader) {
      return isEtagMatch();
    } else if (lmtsHeader) {
      return isLmtsMatch();
    }

    return false;
  }

  /**
   * Returns string representation of request.
   * @returns {string}
   */
  toString() {
    return Json.stringify({
      Method: this.getMethod(),
      URL: this.getUrl(),
      Headers: this.getHeaders(),
      Parameters: this.getParameters(),
      Body: this.getBody()
    });
  }
}

module.exports = Request;
