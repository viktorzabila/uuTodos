"use strict";

const { Config } = require("uu_appg01_core-utils");
const { LoggerFactory, Logger, LogLevel, StdoutOutputter } = require("uu_appg01_core-logging");
const AccessLogFormatter = require("./access-log-formatter.js");

const LOGGER_NAME = "UuApp.AppServer.Monitoring.AccessLog";

/**
 * Access log component internally used by access log middleware for providing informations about
 * processed request/response. Logger is transparently managed via LoggerFactory and therefore
 * supports external configuration via following configuration parameters:
 *
 * * <b>uuapp.appserver.monitoring.accesslog.log_level</b><br>
 *   Defines log level. Level can be defined either via name, or its numeric representation. Defaults to +INFO+.
 *
 * * <b>uuapp.appserver.monitoring.accesslog.log_message_format</b><br>
 *   Allows to define custom message format. See {UuApp::AppServer::Monitoring::AccessLogFormatter#message_format} for details.
 */
class AccessLog {
  /**
   * Overrides default message format.
   * @param messageFormat Format string.
   */
  static setMessageFormat(messageFormat) {
    Logger._getLogger().setMessageFormat(messageFormat);
  }

  /**
   * Logging severity threshold. Possible values are:
   # * OFF - Logger is disabled.
   # * INFO - Logger is enabled.
   * @param level Log level.
   */
  static setLevel(level) {
    Logger._getLogger().setLevel(level);
  }

  /**
   * Checks if access log is enabled (log level is set to anything other than "OFF").
   * @returns {boolean} True if log is enabled, else false.
   */
  static isEnabled() {
    return Logger._getLogger().getLevel() < LogLevel.OFF;
  }

  /**
   * Transforms given parameters to log message and prints it.
   * @param tokens
   * @param req Request
   * @param res Response
   */
  static log(tokens, req, res) {
    let data = { tokens, req, res };
    AccessLog._getLogger().log(data);
  }

  static _getLogger() {
    if (!this._logger) {
      let formatter = new AccessLogFormatter();
      let outputter = new StdoutOutputter(formatter);
      let logger = new Logger(LOGGER_NAME, outputter);
      if (!Config.get(`${LOGGER_NAME.toLowerCase()}.log_level`, false)) {
        Config.set(`${LOGGER_NAME.toLowerCase()}.log_level`, "INFO");
      }
      LoggerFactory.configure(logger, false);
      this._logger = logger;
    }
    return this._logger;
  }
}

module.exports = AccessLog;
