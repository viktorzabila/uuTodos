"use strict";

const { MessageFormatter } = require("uu_appg01_core-logging");
const { TokenSanitizer } = require("uu_appg01_core-authentication");

const DEFAULT_MESSAGE_FORMAT = '%h %l %u %t "%r" %s %B';

/**
 * Default log message formatter used by access log.
 */
class AccessLogFormatter extends MessageFormatter {

  constructor() {
    super(DEFAULT_MESSAGE_FORMAT, null, null);
  }

  /**
   * Sets format of access log message. Following tags are supported:
   * * <b>%%</b> - Escaped percent tag
   * * <b>%a</b> - Client IP address
   * * <b>%A</b> - Local IP address
   * * <b>%B</b> - Bytes sent, excluding HTTP headers
   * * <b>%D</b> - Time taken to process the request, in millis
   * * <b>%h</b> - Remote host name (or IP address if enableLookups for the connector is false)
   * * <b>%H</b> - Request protocol
   * * <b>%I</b> - Current request thread ID
   * * <b>%m</b> - Request method (GET, POST, etc.)
   * * <b>%p</b> - Local port
   * * <b>%q</b> - Query string
   * * <b>%r</b> - First line of the request (method, request URI and protocol)
   * * <b>%s</b> - HTTP status code of the response
   * * <b>%t</b> - Date and time
   * * <b>%T</b> - Time taken to process the request, in seconds
   * * <b>%u</b> - Authenticated user
   * * <b>%U</b> - Requested URL path (without query string)
   * * <b>%{ FLG }B</b> - bytes sent (FLG==response) or bytes received (FLG==request), excluding HTTP headers
   * * <b>%{ KEY }C</b> - write value of incoming cookie with name KEY
   * * <b>%{ KEY }i</b> - write value of incoming header with name KEY
   * * <b>%{ KEY }o</b> - write value of outgoing header with name KEY
   * @param messageFormat Message format.
   */
  setMessageFormat(messageFormat) {
    if (messageFormat) {
      this._messageFormat = messageFormat;
      let formatterSrc = `(function (datetime, name, severity, message, error) {
        return ${this._transformFormat(messageFormat, this._processMessageFormatTag)};
      }).bind(this);`;
      this._messageFormatter = eval(formatterSrc);
    }
  }

  _processMessageFormatTag(tag, opts) {
    let result;
    switch (tag) {
      case "a":
        result = 'message.tokens["remote-addr"](message.req, message.res)';
        break;
      case "A":
        result = "message.req.connection.localAddress";
        break;
      case "B":
        switch (opts) {
          case null:
          case undefined:
          case "response":
            result = 'message.tokens.res(message.req, message.res, "content-length") || 0';
            break;
          case "request":
            // TODO Size of request in case of chunked transfer encoding
            result = 'message.req.headers["content-length"] || 0';
            break;
        }
        break;
      case "C":
        if (opts) {
          result = `message.req.cookies["${opts}"] || "-"`;
        }
        break;
      case "D":
        result = 'Math.round(message.tokens["response-time"](message.req, message.res) || 0)';
        break;
      case "h":
        result = 'message.tokens["remote-addr"](message.req, message.res)';
        break;
      case "H":
        result = '"HTTP/" + message.tokens["http-version"](message.req, message.res)';
        break;
      case "i":
        if (opts) {
          if (opts.toLowerCase() === "authorization") {
            result = `TokenSanitizer.processHeader(message.req.headers["${opts.toLowerCase()}"]) || "-"`;
          } else {
            result = `message.req.headers["${opts.toLowerCase()}"] || "-"`;
          }
        }
        break;
      case "I":
        // TODO Thread ID
        result = '"-"';
        break;
      case "l":
        result = '"-"';
        break;
      case "m":
        result = 'message.tokens["method"](message.req, message.res)';
        break;
      case "o":
        if (opts) {
          result = `message.res.header()._headers["${opts.toLowerCase()}"] || "-"`;
        }
        break;
      case "p":
        result = "message.req.connection.localPort";
        break;
      case "q":
        result = "TokenSanitizer.processUri(message.req._parsedUrl.query) || \"\"";
        break;
      case "r":
        result = 'message.tokens["method"](message.req, message.res) + " " + TokenSanitizer.processUri(message.tokens["url"](message.req, message.res)) + " HTTP/" + message.tokens["http-version"](message.req, message.res)';
        break;
      case "s":
        result = 'message.tokens["status"](message.req, message.res)';
        break;
      case "t":
        result = "message.req._startTime.toISOString()";
        break;
      case "T":
        result = 'Math.round((message.tokens["response-time"](message.req, message.res) || 0) / 1000)';
        break;
      case "u":
        result =
          'message.res.locals.session && message.res.locals.session.getIdentity() ? message.res.locals.session.getIdentity().getUuIdentity() : "-"';
        break;
      case "U":
        result = 'message.req._parsedUrl.pathname || ""';
        break;
    }
    return result;
  }
}

module.exports = AccessLogFormatter;
