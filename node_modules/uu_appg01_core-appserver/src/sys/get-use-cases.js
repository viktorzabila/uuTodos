"use strict";

const Sys = require("./sys.js");
const RouteRegister = require("../endpoint/route-register.js");
const UseCaseError = require("../error/use-case-error.js");
const AccessDenied = require("../error/access-denied.js");
const { Validator } = require("uu_appg01_core-validation");
const ValidationHelper = require("../utils/validation-helper");
const Path = require("path");

/**
 * Error class to pass into Validator. See below for actual endpoint code.
 */
class InvalidDtoInError extends UseCaseError {
  constructor(dtoOut, paramMap = {}, cause = null) {
    super({ dtoOut, paramMap, cause, status: 400 });
    this.code = "uu-app-server/sysGetUseCases/invalidDtoIn";
    this.message = "DtoIn is not valid.";
  }
}

class UseCaseDoesNotExistError extends UseCaseError {
  constructor(dtoOut, paramMap = {}, cause = null) {
    super({ dtoOut, paramMap, cause, status: 400 });
    this.code = "uu-app-server/sysGetUseCases/useCaseDoesNotExist";
    this.message = "UseCase must be a code of an existing use case.";
  }
}

const EXCLUDED_ENDPOINTS = [
  "traceMemory",
  "threadDump",
  "stopMemoryTrace",
  "startMemoryTrace",
  "setConfiguration",
  "runGC",
  "resetStatistics",
  "getStatistics",
  "getHealth",
  "getEnvironment",
  "getUseCases",
  "getConfiguration",
  "dumpMemoryTrace"
];

const EXCLUDING_EXPRESSION = new RegExp(`sys/(${EXCLUDED_ENDPOINTS.join("|")})$`);

/**
 * Provides list of use cases.
 */
class GetUseCases {

  static call(ucEnv) {
    Sys.authorize(ucEnv);
    const dtoIn = ucEnv.getDtoIn();

    let validator = Validator.load();
    let validationResult = validator.validate("sysGetUseCasesDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      "uu-app-server/sysGetUseCases/unsupportedKey",
      InvalidDtoInError
    );

    let response = Object.assign({}, Sys.getAppInfo());
    let requestedUseCase = dtoIn.useCase;
    let found = !requestedUseCase; // try to find useCase only if entered in dtoIn

    RouteRegister.forEach((_, data) => {
      const ucData = data["GET"] || data["POST"];

      if (ucData.useCase.match(EXCLUDING_EXPRESSION)) return;
      if (requestedUseCase && requestedUseCase !== ucData.useCase) return;
      found = true;

      let prod = response[ucData.product] || (response[ucData.product] = {});
      let ucMap = prod["useCaseMap"] || (prod["useCaseMap"] = {});
      ucMap[ucData.useCase] = {
        httpMethod: ucData.httpMethod,
        type: ucData.type,
        consumes: ucData.consumes,
        produces: ucData.produces
      };
    });

    if (!found) {
      throw new UseCaseDoesNotExistError({ uuAppErrorMap }, { useCase: dtoIn.useCase })
    }

    response["uuAppErrorMap"] = uuAppErrorMap;
    return response;
  }
}

module.exports = GetUseCases;
