"use strict"

const Fs = require("fs");
const Path = require("path");
const Ejs = require("ejs");
const Util = require("util");
const Url = require("url");
const asyncFsExists = Util.promisify(Fs.exists);
const asyncFsReadFile = Util.promisify(Fs.readFile);
const { Config, LruCache } = require("uu_appg01_core-utils");
const UseCaseContext = require("../endpoint/use-case-context.js");

const UVE_CACHE_CONFIG = {maxSize: 32};
const CDN_CONFIG = "cdnBaseUri";
const DEFAULT_CDN = "https://cdn.plus4u.net";
const UU5_ENVIRONMENT_PATH = "uu5-environment.js";
const EMPTY_UU5_ENVIRONMENT = "var UU5 = window.UU5 || {};\nUU5.Environment = {};";
const UU5_ENVIRONMENT_PATTERN = new RegExp("<%=[ ]*uu5Environment[ ]*%>", "g");
const CDN_BASE_URI_PATTERN = new RegExp("<%=[ ]*cdnBaseUri[ ]*%>", "g");
const APP_BASE_PATH_PATTERN = new RegExp("<%=[ ]*appBasePath[ ]*%>", "g");

class UveLoader {

  constructor() {
    this._uveCache = new LruCache(UVE_CACHE_CONFIG);
    this._publicPath = null;
    this._cdnBaseUri = null;
    this._uu5Environment = null;
  }

  async load(uve, parameters = null) {
    let uveTemplate = this._uveCache.get(uve);
    if (!uveTemplate) {
      let type;
      let data;
      if (uve.endsWith(".html")) {
        if (uve.endsWith("_v2.html")) {
          type = "v2";
          data = await asyncFsReadFile(Path.join(this._getPublicPath(), uve));
        } else {
          let altUve = uve.replace(".html", "_v2.html");
          let altUvePath = Path.join(this._getPublicPath(), altUve);
          if (await asyncFsExists(altUvePath)) {
            type = "v2";
            data = await asyncFsReadFile(altUvePath);
          } else {
            type = "v1";
            data = await asyncFsReadFile(Path.join(this._getPublicPath(), uve));
          }
        }
      } else {
        type = uve.endsWith(".ejs") ? "ejs" : "v1";
        data = await asyncFsReadFile(Path.join(this._getPublicPath(), uve));
      }
      uveTemplate = {type, data};
      this._uveCache.set(uve, uveTemplate);
    }
    let loadedUve;
    if (uveTemplate.type === "v2") {
      let uu5Environment = await this._getUu5Environment();
      let cdnBaseUri = this._getCdnBaseUri();
      let appBasePath;
      let baseUriAlias = UseCaseContext.getBaseUriAlias();
      if (baseUriAlias) {
        let uri = Url.parse(baseUriAlias);
        appBasePath = `${uri.pathname}${uri.pathname.endsWith("/") ? "" : "/"}`;
      } else {
        let uri = UseCaseContext.getUri();
        appBasePath = `/${uri.getProduct()}/${uri.getWorkspace()}/`;
      }
      loadedUve = uveTemplate.data.toString();
      loadedUve = loadedUve.replace(UU5_ENVIRONMENT_PATTERN, uu5Environment);
      loadedUve = loadedUve.replace(CDN_BASE_URI_PATTERN, cdnBaseUri);
      loadedUve = loadedUve.replace(APP_BASE_PATH_PATTERN, appBasePath);
    } else if (uveTemplate.type === "ejs") {
      loadedUve = Ejs.compile(uveTemplate.data)(params || {});
    } else {
      loadedUve = uveTemplate.data;
    }
    return loadedUve;
  }

  _getPublicPath() {
    if (!this._publicPath) {
      this._publicPath = Config.get("public_path");
      if (!this._publicPath) {
        let root = Config.get("server_root") || process.cwd();
        this._publicPath = Path.join(root, "public");
      }
    }
    return this._publicPath;
  }

  _getCdnBaseUri() {
    if (!this._cdnBaseUri) {
      this._cdnBaseUri = Config.getString(CDN_CONFIG) || DEFAULT_CDN;
      if (!this._cdnBaseUri.endsWith("/")) {
        this._cdnBaseUri += "/";
      }
    }
    return this._cdnBaseUri;
  }

  async _getUu5Environment() {
    let uu5EnvironmentPath = Path.join(this._getPublicPath(), UU5_ENVIRONMENT_PATH);
    if (await asyncFsExists(uu5EnvironmentPath)) {
      this._uu5Environment = await asyncFsReadFile(uu5EnvironmentPath);
    } else {
      this._uu5Environment = EMPTY_UU5_ENVIRONMENT;
    }
    return this._uu5Environment;
  }

}

module.exports = new UveLoader();
