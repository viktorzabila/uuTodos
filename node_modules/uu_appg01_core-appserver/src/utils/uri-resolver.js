"use string"

const { Config } = require("uu_appg01_core-utils");

const DEFAULT_PORTS = {
  http: 80,
  https: 443
};

class UriResolver {

  static getUri(req) {
    let scheme = this._getScheme(req);
    let host = this._getHost(req);
    let port = this._getPort(req);
    port = port === DEFAULT_PORTS[scheme] ? "" : `:${port}`;
    return `${scheme}://${host}${port}${req.url}`;
  }

  static _getScheme(req) {
    let hdr;
    if ((hdr = req.get("X-Forwarded-Proto"))) {
      return hdr.split(",")[0].trim();
    } else if ((hdr = req.get("X-Forwarded-Scheme"))) {
      return hdr.trim();
    } else {
      return req.protocol;
    }
  }

  static _getHost(req) {
    return this._getHostWithPort(req).replace(/:\d+$/, "");
  }

  static _getHostWithPort(req) {
    let hdr;
    if ((hdr = req.get("X-Forwarded-Host"))) {
      let host = hdr.split(/,\s?/);
      return host[host.length - 1].trim();
    } else {
      return req.get("Host") || this._getInternalHost() + ":" + this._getInternalPort();
    }
  }

  static _getPort(req) {
    let p;
    if ((p = this._getHostWithPort(req).split(":")[1])) {
      return parseInt(p);
    } else if ((p = req.get("X-Forwarded-Port"))) {
      return parseInt(p.split(",")[0]);
    } else if (req.get("X-Forwarded-Host")) {
      return DEFAULT_PORTS[this._getScheme(req)];
    } else if (req.get("X-Forwarded-Proto")) {
      let scheme = req
      .get("X-Forwarded-Proto")
      .split(",")[0]
      .trim();
      return DEFAULT_PORTS[scheme];
    } else {
      return this._getInternalPort();
    }
  }

  static _getInternalHost() {
    if (!this._host) {
      this._host = Config.get("server_host");
    }
    return this._host;
  }

  static _getInternalPort() {
    if (!this._port) {
      this._port = Config.get("server_port");
    }
    return this._port;
  }

}

module.exports = UriResolver;
