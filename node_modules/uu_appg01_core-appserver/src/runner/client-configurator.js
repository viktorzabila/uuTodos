"use strict";

const { Config, Json } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const Path = require("path");
const Fs = require("fs");

class ClientConfigurator {
  /**
   * Registers custom client configuration provider.
   * @param {*} provider Object responding to "getClientConfiguration" method.
   * @private
   */
  static registerConfigurationProvider(provider) {
    ClientConfigurator._configProviders.push(provider);
    return null;
  }

  static async configureClient() {
    const logger = LoggerFactory.get("UuApp.AppServer");

    let publicPath = Config.get("public_path") || Path.join(Config.get("server_root"), "public");
    let configSource = Path.join(publicPath, "uu5-environment.json");
    if (!Fs.existsSync(configSource)) {
      return;
    }
    let clientConfig = Json.parse(Fs.readFileSync(configSource, "UTF-8"));
    logger.info(`Updating client configuration: ${Object.keys(clientConfig)}`);
    Object.keys(clientConfig).forEach(key => {
      if (Config.hasKey(key, false)) {
        clientConfig[key] = Config.get(key, false);
      } else {
        // Fallback for applications preferring snake case
        // configuration parameter notation
        let snakeCaseKey = key.replace(/\./g, "_");
        if (Config.hasKey(key, false)) {
          clientConfig[key] = Config.get(snakeCaseKey, false);
        }
      }
    });
    for (let provider of ClientConfigurator._configProviders) {
      let partialConfig = null;
      try {
        partialConfig = await provider.getClientConfiguration();
      } catch (e) {
        logger.error("Failed to read client configuration", e);
      }
      Object.keys(partialConfig || {}).forEach(key => {
        clientConfig[key] = partialConfig[key];
      });
    }
    let configContent = `var UU5 = window.UU5 || {};\nUU5.Environment = ${Json.stringify(clientConfig)};`;
    let configTarget = Path.join(publicPath, "uu5-environment.js");
    Fs.writeFileSync(configTarget, configContent, "UTF-8");
    logger.info(`Client configuration updated${logger.isDebugLoggable() ? ": " + Json.stringify(clientConfig) : ""}`);
  }
}

ClientConfigurator._configProviders = [];

module.exports = ClientConfigurator;
