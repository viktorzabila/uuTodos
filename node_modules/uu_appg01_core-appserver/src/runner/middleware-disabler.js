const path = require("path");
const { BaseError, NameConverter, Finder } = require("uu_appg01_core-utils");

class MiddlewareDisabler {
  constructor() {
    this._selected = new Set();
    this._disabled = new Set();
    this._moduleName = null;
  }

  disableMiddleware(identifier) {
    if (typeof identifier !== "string") throw new BaseError("Middleware identifier must be a string.");
    identifier.trim();

    let segments = identifier.split(":");
    if (segments.length > 2) throw new BaseError("Middleware identifier must contain 0 or 1 colon separator. .");

    this._selected.add(segments);
  }

  executeDisable() {
    this._selected.forEach(s => {
      let paths = this._findMiddleware(s);
      paths.forEach(p => {
        this._disabled.add(p);
      });
    });
  }

  isDisabled(path) {
    return this._disabled.has(path);
  }

  _findMiddleware(segments) {
    // use middleware name only to easily disable core-appserver middleware (eg. UriParser)
    if (segments.length === 1) {
      return Finder.findInProject(path.resolve(__dirname, ".."), `src/middleware/${NameConverter(segments[0])}.js`);

      // use namespace + path for other packages (eg. uu_oidc_main:middleware/AuthenticationMiddleware)
    } else {
      let middlewarePathSegments = segments[1].split("/");

      // find path to middleware file
      let moduleName = segments[0];
      let tailRegex = new RegExp(`${moduleName}.*$`);
      let modulePath;
      try {
        modulePath = require.resolve(segments[0]).replace(tailRegex, moduleName);
      } catch (err) {
        throw new BaseError(`Invalid middleware identifier: ${moduleName}`);
      }
      let mwFile = NameConverter(middlewarePathSegments.pop()) + ".js";
      middlewarePathSegments.push(mwFile);
      let mwPath = middlewarePathSegments.join("/");

      // referencing appserver without shortcuts (consistency)
      if (!this._moduleName) {
        let pkgPath = path.resolve(__dirname, "..", "..", "package.json");
        this._moduleName = require(pkgPath).name;
      }
      if (segments[0] === this._moduleName) {
        return Finder.findInProject(path.resolve(__dirname, ".."), mwPath);
      }

      // use * to disable all autoloaded middleware, not in core-appserver (eg. uu_oidc_main:*)
      if (segments[1] === "*") return Finder.findInProject(modulePath, "{app,src}/middleware/*.js");

      // if nothing matches
      return Finder.findInProject(modulePath, `{app,src}/${mwPath}`);
    }
  }
}

module.exports = new MiddlewareDisabler();
