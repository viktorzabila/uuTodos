"use strict";

const path = require("path");
const { Config, BaseError, Loader, Finder } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");

class StartupListenersRunner {
  /**
   * Loads and starts the startup listeners.
   * @return {Promise<void>}
   */
  async run() {
    this._getConfiguration();
    this._logger.info("Loading and running startup listeners.");

    const listeners = this._load();

    for (let i = 0; i < listeners.length; i++) {
      const lsn = listeners[i];
      this._logger.debug(
        `[${lsn[0].order === Number.POSITIVE_INFINITY ? "No Order" : lsn[0].order}] => ${Loader.convertPathToNamespace(
          lsn[1]
        )}${lsn[0].constructor.name}`
      );
      await lsn[0].onStartup();
    }
  }

  /**
   * Finds startup listener files in relevant folders, loads listener objects and sorts them
   * based on their order values.
   * @return {Array} Startup listeners
   * @private
   */
  _load() {
    if (!this._root) {
      throw new BaseError("Server root is not defined. Terminating application.");
    }

    const PATH_TO_STARTUP_LISTENERS = "{src,app}/startup_listeners/*.js";

    let listeners = [];

    let listenerPaths = Finder.findInModules(this._root, PATH_TO_STARTUP_LISTENERS).concat(
      Finder.findInProject(this._root, PATH_TO_STARTUP_LISTENERS)
    );

    listenerPaths.forEach(file => {
      const listenerClass = require(path.resolve(file));
      const listenerInstance = new listenerClass();

      // mark listener with missing order with max number
      if (listenerInstance.order == null) {
        listenerInstance.order = Number.POSITIVE_INFINITY;
      }

      // listener is valid only if contains onStartup function
      if (listenerInstance.onStartup) {
        listeners.push([listenerInstance, file]);
      }
    });

    listeners.sort((a, b) => {
      if (a[0].order === Number.POSITIVE_INFINITY && b[0].order === Number.POSITIVE_INFINITY) {
        if (a[0].constructor.name < b[0].constructor.name) {
          return -1;
        } else if (a[0].constructor.name > b[0].constructor.name) {
          return 1;
        } else {
          return 0;
        }
      } else {
        return a[0].order - b[0].order;
      }
    });

    return listeners;
  }

  /**
   * Gets server root from Config. Throws BaseError if there's no root available.
   * @private
   */
  _getConfiguration() {
    this._root = Config.get("server_root");
    if (!this._root) {
      throw new BaseError("Server root is not defined.");
    }
    this._logger = LoggerFactory.get("UuApp.AppServer");
  }
}

module.exports = new StartupListenersRunner();
