"use strict";

const { UuObjectDao } = require("uu_appg01_objectstore");
const { DbConnection } = require("uu_appg01_datastore");

class SysAppDataStoreStatsMongo extends UuObjectDao {
  async createSchema() {
    await super.createIndex(
      {
        awid: 1
      },
      {
        unique: true
      });
  }

  create(sysDataStoreStats) {
    return super.insertOne(sysDataStoreStats);
  }

  getByAwid(awid) {
    return super.findOne({ awid });
  }

  list(pageInfo = {}) {
    return super.find({}, pageInfo);
  }

  listByAwids(awidList, pageInfo = {}) {
    return super.find({ awid: { $in: awidList } }, pageInfo);
  }

  listAwidsByAwidList(awidList) {
    const query = this._getAwidListQuery(awidList);

    return super.distinct("awid", query);
  }

  listRecentlyCalculatedByAwidList(awidList, limitDate) {
    const query = this._getAwidListQuery(awidList);
    query["calcEndTs"] = { $gt: limitDate };

    return super.distinct("awid", query);
  }

  listRunningOrScheduled(awidList, pageInfo = { pageSize: 10 }) {
    const query = this._getAwidListQuery(awidList);
    query["$or"] = [{ "sys.lockExpTs": { $gt: new Date() } }, { state: "scheduled" }];

    return super.find(query, pageInfo);
  }

  async updateManyByAwidList(awidList, update) {
    const query = this._getAwidListQuery(awidList);

    let db = await DbConnection.get(this.customUri);
    return db.collection(this.collectionName).updateMany(query, { $set: update });
  }

  updateByAwid(awid, sysDataStoreStats, lock) {
    return super.findOneAndUpdate({ awid }, sysDataStoreStats, "NONE", lock);
  }

  deleteByAwid(awid) {
    return super.deleteOne({ awid });
  }

  lockByAwid(awid, lock) {
    return super.lockOne({ awid }, lock);
  }

  unlockByAwid(awid, lock) {
    super.unlockOne({ awid }, lock);
  }

  _getAwidListQuery(awidList) {
    let query = {};
    if (awidList && awidList.length) {
      query.awid = { $in: awidList };
    }
    return query;
  }
}

module.exports = SysAppDataStoreStatsMongo;
