"use strict";

const { UuObjectDao } = require("uu_appg01_objectstore");

class SysAppSecretStoreMongo extends UuObjectDao {
  async createSchema() {
    await super.createIndex(
      {
        awid: 1,
        secretSet: 1,
        code: 1,
      },
      {
        unique: true,
      }
    );
  }

  async create(uuObject) {
    return await super.insertOne(uuObject);
  }

  async getByAwidAndSecretSetAndCode(awid, secretSet, code) {
    return await super.findOne({ awid, secretSet, code });
  }

  async getUniqueCodeList(awid, secretSet) {
    let filter = { awid, secretSet };
    return super.distinct("code", filter);
  }

  async update(uuObject, lock = null) {
    let filter = {
      awid: uuObject.awid,
      secretSet: uuObject.secretSet,
      code: uuObject.code,
    };
    return super.findOneAndUpdate(filter, uuObject, "NONE", lock);
  }

  async delete(uuObject) {
    let filter = {
      awid: uuObject.awid,
      secretSet: uuObject.secretSet,
      code: uuObject.code,
    };
    return await super.deleteOne(filter);
  }

  async listByNonActiveSlot(activeSlot, pageInfo = {}) {
    let filter = { masterKeySlot: { $not: { $eq: activeSlot } } };
    return super.find(filter, pageInfo);
  }

  async lockOneBySecretSetAndByCode(awid, secretSet, code, lock) {
    return await super.lockOne({ awid, secretSet, code }, lock);
  }

  async unlockOneBySecretSetAndByCode(awid, secretSet, code, lock) {
    return await super.unlockOne({ awid, secretSet, code }, lock);
  }

  async getDistinctSlot() {
    return super.distinct("masterKeySlot");
  }

  async countSlot(slot) {
    let filter = { masterKeySlot: slot };
    return super.count(filter);
  }
}

module.exports = SysAppSecretStoreMongo;
