"use strict";
const { Config } = require("uu_appg01_core-utils");
const { DbConnection, DaoFactory } = require("uu_appg01_datastore");
const { SysKeyStoreCollectionUpgradeError } = require("../api/errors/startup-errors.js");
const { LoggerFactory } = require("uu_appg01_core-logging");

const UU_APP_INSTANCE_COLLECTION = "sysUuSubAppInstance";
const SYS_APP_KEYSTORE_COLLECTION_OLD = "sysKeyStore";
const SYS_APP_SECRETSTORE_COLLECTION = "sysUuAppSecret";

class Migration31AppKeyStore {
  constructor() {
    this.logger = LoggerFactory.get("UuAppWorkspace.StartupListener.SecretStoreUpgrade");
  }

  /**
   * Startup listener which sysKeyStore migration.
   */
  async onStartup() {
    if (!DaoFactory.isDataStoreOn()) {
      this.logger.debug("uuSubAppDataStore is disabled. uuKeyStore to uuAppSecretStore upgrade wont be started.")
      return;
    }

    this.logger.debug("uuKeyStore to uuAppSecretStore migration started.")

    const connectionString = Config.get("uuSubAppDataStoreMap").primary;
    if (!connectionString) {
      this.logger.error("Primary uuSubAppDataStore not configured: uuSubAppDataStoreMap.primary. Stopping upgrade.");
      return;
    }

    let dbConnection = await DbConnection.get(connectionString);
    let collections = await dbConnection.listCollections().toArray();

    // do not upgrade if sysUuSubAppInstance collection is missing or if it doesn't contain any object
    let sysUuSubAppInstanceExist = collections.some((collection) => collection.name === UU_APP_INSTANCE_COLLECTION);
    if (!sysUuSubAppInstanceExist) {
      this.logger.debug("sysUuSubAppInstance does not exist. Stopping upgrade (it will be performed within upgrade or init uuCmd).")
      return;
    }
    let uuSubAppInstance = await dbConnection.collection(UU_APP_INSTANCE_COLLECTION).findOne({});
    if (!uuSubAppInstance) {
      this.logger.debug("sysUuSubAppInstance does not exist. Stopping upgrade (it will be performed within upgrade or init uuCmd).")
      return;
    }

    // do not upgrade if old sysKeyStore collection does not exist
    let sysKeyStoreExist = collections.some((collection) => collection.name === SYS_APP_KEYSTORE_COLLECTION_OLD);
    if (!sysKeyStoreExist) {
      this.logger.debug("sysKeyStore collection does not exist. Stopping upgrade.")
      return;
    }

    let newCollectionExists = collections.some((collection) => collection.name === SYS_APP_SECRETSTORE_COLLECTION)
    if (newCollectionExists) { // check if collection contains proper index. Otherwise it was created automatically with sys.lockHash index.
      let indexes = await dbConnection.collection(SYS_APP_SECRETSTORE_COLLECTION).indexes();
      let isUpgraded = indexes.some(i => i.name === "awid_1_secretSet_1_code_1");
      if (isUpgraded) {
        this.logger.debug("sysUuAppSecret collection already exists. Stopping upgrade.")
        return;
      }
    }
    try {
      const secretStoreCollection = dbConnection.collection(SYS_APP_SECRETSTORE_COLLECTION);
      await secretStoreCollection.createIndex({ awid: 1, secretSet: 1, code: 1 }, { unique: true });

      const cursor = dbConnection.collection(SYS_APP_KEYSTORE_COLLECTION_OLD).find({});
      let document;
      while ((document = await cursor.next())) {
        try {
          await secretStoreCollection.insertOne({
            _id: document._id,
            awid: document.awid,
            secretSet: document.keySet,
            code: document.keyCode,
            secret: document.key,
            sys: document.sys
          });
        } catch (e) {
          this.logger.error(`Failed to copy uuAppSecret. Probably already exists in new collection, skipping. awid=${document.awid}, secretSet=${document.keySet}, code=${document.keyCode}`, e)
        }
      }
    } catch (e) {
      throw new SysKeyStoreCollectionUpgradeError(e);
    }
  }
}

module.exports = Migration31AppKeyStore;
