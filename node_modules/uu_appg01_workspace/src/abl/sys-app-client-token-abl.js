"use strict";

const SysAppSecretStoreAbl = require("./sys-app-secret-store-abl.js");
const Errors = require("../api/errors/sys-app-client-token-errors");
const Crypto = require("crypto");
const NodeRsa = require("node-rsa");
const { generateKeyPair } = require('crypto');
const generateKeyPairAsync = generateKeyPair ? require("util").promisify(generateKeyPair) : null;
const PemJwk = require("pem-jwk");

const SECRET_SET = "uuAppClientToken";
const PRIVATE_KEY_CODE = "private";
const PUBLIC_KEY_CODE = "public";

class SysAppClientTokenAbl {
  async initKeys(awid) {
    let { privateKey, publicKey } = await this._generateKeyPair();
    let kid = Crypto.randomBytes(Math.ceil(32 / 2))
      .toString("hex")
      .slice(0, 32);
    await SysAppSecretStoreAbl.putSecret(awid, SECRET_SET, PRIVATE_KEY_CODE, `${kid}:${privateKey}`);
    await SysAppSecretStoreAbl.putSecret(awid, SECRET_SET, PUBLIC_KEY_CODE, `${kid}:${publicKey}`);

    let jwk = PemJwk.pem2jwk(publicKey);
    jwk.use = "sig";
    jwk.kid = kid;
    jwk.uuAppErrorMap = {};
    return jwk;
  }

  async listKeys(awid) {
    let publicKey = await SysAppSecretStoreAbl.getSecret(awid, SECRET_SET, PUBLIC_KEY_CODE);
    if (!publicKey) {
      throw new Errors.ListKeys.KeysNotInitialized({}, { awid });
    }
    let [kid, pem] = publicKey.split(/:/);
    let jwk = PemJwk.pem2jwk(pem);
    jwk.use = "sig";
    jwk.kid = kid;
    return { keys: [jwk], uuAppErrorMap: {} };
  }

  async getPrivateKey(awid) {
    let privateKey = await SysAppSecretStoreAbl.getSecret(awid, SECRET_SET, PRIVATE_KEY_CODE);
    if (!privateKey) {
      throw new Errors.GetPrivateKey.KeysNotInitialized({}, { awid });
    }
    let [kid, pem] = privateKey.split(/:/);

    return {
      kid,
      privateKey: pem
    }
  }

  async _generateKeyPair() {
    if (generateKeyPairAsync) {
      return generateKeyPairAsync('rsa', {
        modulusLength: 2048,
        publicKeyEncoding: { type: 'spki', format: 'pem' },
        privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
      });
    } else {
      let nodeRsa = new NodeRsa({ b: 2048 });
      nodeRsa.generateKeyPair();
      return {
        privateKey: nodeRsa.exportKey("private"),
        publicKey: nodeRsa.exportKey("public")
      };
    }
  }
}

module.exports = new SysAppClientTokenAbl();
