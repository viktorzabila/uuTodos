"use strict";

const {Validator} = require("uu_appg01_core-validation");
const {DaoFactory, ObjectNotFound} = require("uu_appg01_objectstore");
const {ValidationHelper} = require("uu_appg01_core-appserver");
const {BaseError} = require("uu_appg01_core-utils");

const ProfileConfig = require("../helpers/profile-config.js");
const UuOs8UriHelper = require("../helpers/uu-os8-uri-helper");
const ErrorHelper = require("../helpers/asid-error-helper");
const InstanceErrors = require("../api/errors/sys-app-instance-errors");
const WorkspaceErrors = require("../api/errors/sys-app-workspace-errors");

/**
 * represent sysProfile collection in the database
 * and store profiles
 */
class SysProfileAbl {
  constructor() {
    this.GLOBAL_GROUPS = ["urn:uu:GGALL", "urn:uu:GGPLUS4U"];
    this.RESERVED_PROFILES = ["AsidLicenseOwner", "AwidLicenseOwner", "Public", "Authenticated"];
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysProfile");
  }

  /**
   * create empty collection with indexes
   * @returns {Promise<void>}
   */
  async createSchema() {
    await this.dao.createSchema();
  }

  /**
   * store profiles to database
   * called during initWorkspace for storing profiles from profiles.json
   * @param {String} awid
   * @param {Array} profilesCodes
   * @returns {Promise<void>}
   */
  async initProfiles(awid, profilesCodes) {
    let self = this;
    if (profilesCodes) {
      for (let i = 0; i < profilesCodes.length; i += 1) {
        let profileCode = profilesCodes[i];

        let checkObject = await self.getProfileByCode(awid, profileCode);

        if (checkObject || self.RESERVED_PROFILES.includes(profileCode)) {
          continue;
        }
        let profile = {};
        profile["awid"] = awid;
        profile["profile"] = profileCode;
        profile["roleGroupUri"] = null;
        await self.dao.create(profile);
      }
    }
  }

  /**
   * Return list of all application profiles.
   *
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{}>}
   */
  async listAppProfiles(awid, dtoIn, uuAppErrorMap) {
    // HDS 1. - Performs a logical check of dtoIn.
    let validationResult = this.validator.validate("sysProfileListDtoInType", dtoIn);
    let errorClass = ErrorHelper.getErrorClass(
      awid,
      InstanceErrors.ProfileList,
      WorkspaceErrors.ProfileList
    );
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${errorClass.UC_CODE}unsupportedKeys`,
      errorClass["InvalidDtoInError"]
    ); // A1, A2

    // HDS 2. - Loads all sysProfile uuObjects (sysProfile DAO listByAppProfile)
    // from the uuAppObjectStore that correspond to set attributes.
    let dtoOut = await this.dao.listByAppProfile(awid, dtoIn.profileList, dtoIn.pageInfo);

    // HDS 3. - Returns properly filled out dtoOut.
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  /**
   * Return specific profile by profile code.
   *
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async getAppProfile(awid, dtoIn, uuAppErrorMap) {
    // HDS 1. - Performs a logical check of dtoIn.
    let validationResult = this.validator.validate("sysProfileGetDtoInType", dtoIn);
    let errorClass = ErrorHelper.getErrorClass(
      awid,
      InstanceErrors.ProfileGet,
      WorkspaceErrors.ProfileGet
    );
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${errorClass.UC_CODE}unsupportedKeys`,
      errorClass.InvalidDtoInError
    ); // A1, A2

    // HDS 2. - Loads the sysProfile uuObject from the uuAppObjectStore
    // according to dtoIn.profile and awid. (DAO method getByProfile)
    let profile = await this.getByAppProfile(awid, dtoIn.profile);

    if (!profile) {
      // A3
      throw new errorClass["SysProfileDoesNotExistError"]({uuAppErrorMap}, {profile: dtoIn.profile});
    }

    // HDS 3. - Returns properly filled out dtoOut
    profile.uuAppErrorMap = uuAppErrorMap;
    return profile;
  }

  /**
   * Update application profile defined by code.
   *
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async setAppProfile(awid, dtoIn, uuAppErrorMap) {
    // HDS 1.- Performs a logical check of dtoIn.
    let validationResult = this.validator.validate("sysProfileSetDtoInType", dtoIn);
    let errorClass = ErrorHelper.getErrorClass(
      awid,
      InstanceErrors.ProfileSet,
      WorkspaceErrors.ProfileSet
    );
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${errorClass.UC_CODE}unsupportedKeys`,
      errorClass["InvalidDtoInError"]
    ); // A1, A2

    let roleGroupUri = dtoIn.roleGroupUri;

    // HDS 2. - 2. If dtoIn.roleGroupUri value is ues:[-1]:[-1], then this value is changed to null.
    if (!this.isGlobalGroup(roleGroupUri) && UuOs8UriHelper.isNullUri(roleGroupUri)) {
      dtoIn.roleGroupUri = null;
    }

    let dtoOut;

    // HDS 3. - Verified dtoIn is saved into the uuAppObjectStore (DAO sysProfile update).
    try {
      dtoIn.awid = awid;
      dtoOut = await this.dao.update(dtoIn);
    } catch (e) {
      if (e instanceof ObjectNotFound) {
        // A3
        throw new errorClass["SysProfileDoesNotExistError"]({uuAppErrorMap}, {profile: dtoIn.profile});
      } else {
        // A4
        throw new errorClass["SysProfileDaoUpdateFailedError"]({uuAppErrorMap}, e);
      }
    }

    // HDS 4. - Returns properly filled out dtoOut
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  /**
   * Updates profiles of uuAppWorkspace according to a definition in profiles.json.
   * If there is a new version of an application created and its profiles are changed,
   * this command is used to provide this change into already initialized uuAppWorkspace.
   *
   * @param {Object} dtoIn
   */
  async updateProfiles(dtoIn) {

    // HDS 1. - Performs a logical check of dtoIn.
    let validationResult = this.validator.validate("sysUuAppWorkspaceProfileUpdateDtoInType", dtoIn);
    const uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${WorkspaceErrors.ProfileUpdate.UC_CODE}unsupportedKeys`,
      WorkspaceErrors.ProfileUpdate.InvalidDtoInError
    ); // A1, A2

    // HDS 2. - Gets all AWIDs to be updated. SysAppWorkspace DAO listByState)
    // HDS 2.1. - If there is no dtoIn.awidList, system gets every initialized uuAppWorkspace.
    // HDS 2.2. - If there is dtoIn.awidList - system checks that every uuAppWorkspace in this list is initialized.
    // Any not initialized uuAppWorkspace is removed from the list. (A3)
    const SysAppWorkspaceAbl = require("./sys-app-workspace-abl");
    const appWorkspaces = await SysAppWorkspaceAbl.listByExcludedStateListAndAwidList(
      ["registered", "closed"],
      dtoIn.awidList
    );
    if (appWorkspaces.length === 0) {
      throw new WorkspaceErrors.ProfileUpdate.NoAwidInProperState({uuAppErrorMap}, {awidList: dtoIn.awidList});
    } // A3

    // HDS 3. - Loads a list of profiles (profileList) for AWID from profiles.json.
    // (it is also necessary to check profile.json of every library)
    const loadedProfileList = ProfileConfig.getProfiles()
      .sort()
      .filter(profile => {
        return this.RESERVED_PROFILES.indexOf(profile) === -1;
      });

    // HDS 4. - System does these steps for every AWID that is ready to be updated.
    const updatedAwids = [];
    for (const uuAppWorkspace of appWorkspaces) {
      // HDS 4.1. - Loads every SysProfile of the awid. (DAO method listByAppProfile)
      const awid = uuAppWorkspace.awid;
      const awidProfileList = (await this.dao.listByAwid(awid)).itemList.map(profile => profile.profile).sort();
      // HDS 4.2. - Compares list of SysProfiles with profileList from profiles.json.
      if (JSON.stringify(loadedProfileList) !== JSON.stringify(awidProfileList)) {
        // HDS 4.3. - Creates missing SysProfiles. (DAO method create) (A5)
        // HDS 4.4. - Deletes redundant SysProfiles. (DAO method delete) (A6)
        await this._migrateAwid({awid, awidProfileList, loadedProfileList, uuAppErrorMap});
        updatedAwids.push(awid);
      }
    }

    // HDS 5. - Returns properly filled dtoOut.
    return {
      uuAppErrorMap,
      updatedAwidList: updatedAwids
    };
  }

  /**
   * Update profile uuObject
   * @param {Object} profile
   * @returns {Promise<*>}
   */
  async update(profile) {
    return await this.dao.update(profile);
  }

  async _migrateAwid({awid, awidProfileList, loadedProfileList, uuAppErrorMap}) {
    let {profilesToAdd, profilesToDelete} = this._diffProfiles(awidProfileList, loadedProfileList);

    // HDS 4.3 - Creates missing SysProfiles. (DAO method create) (A5)
    for (const profile of profilesToAdd) {
      try {
        await this.dao.create({awid, profile, roleGroupUri: null});
      } catch (e) {
        throw new WorkspaceErrors.ProfileUpdate.SysProfileDaoCreateFailedError({uuAppErrorMap}, e);
      }
    }

    //HDS 4.4 - Deletes redundant SysProfiles. (DAO method delete) (A6)
    for (const profile of profilesToDelete) {
      try {
        await this.dao.deleteByCode(awid, profile);
      } catch (e) {
        throw new WorkspaceErrors.ProfileUpdate.SysProfileDaoDeleteFailed({uuAppErrorMap}, e);
      }
    }
  }

  _diffProfiles(awidProfileList, loadedProfileList) {
    return {
      profilesToDelete: awidProfileList.filter(
        item => !loadedProfileList.includes(item) && !this.RESERVED_PROFILES.includes(item)
      ),
      profilesToAdd: loadedProfileList.filter(
        item => !awidProfileList.includes(item) && !this.RESERVED_PROFILES.includes(item)
      )
    };
  }

  /**
   * return specific profile by code
   * @param {String} awid
   * @param {Array} code
   * @returns {Promise<*>}
   */
  async getProfileByCode(awid, code) {
    return await this.dao.getByProfile(awid, code);
  }

  /**
   * Return all application profiles by code.
   *
   * @param {String} awid
   * @param {Array} profileCodeList
   * @returns {Promise<*>}
   */
  async getAppProfileList(awid, profileCodeList = null) {
    return await this.dao.listByProfileList(awid, profileCodeList);
  }

  /**
   * return all profile codes by awid
   * @param {String} awid
   * @returns {Promise<*>}
   */
  async getAppProfileListByAwid(awid) {
    let profileList = await this.dao.listByAwid(awid);
    let profileCodeList = [];
    for (let item of profileList.itemList) {
      profileCodeList.push(item.profile);
    }
    return profileCodeList;
  }

  /**
   * Returns application profile by awid and profile code.
   *
   * @param {String} awid
   * @param {String} profile
   * @returns {Promise<*>}
   */
  async getByAppProfile(awid, profile) {
    return await this.dao.getByProfile(awid, profile);
  }

  /**
   * Delete all application profiles.
   *
   * @param {String} awid
   * @returns {Promise<*>}
   */
  async deleteAllAppProfiles(awid) {
    return this.dao.deleteByAwid(awid);
  }

  /**
   * check if uri is global (["urn:uu:GGALL", "urn:uu:GGPLUS4U"])
   * @param {String} roleGroupUri
   * @returns {boolean}
   */
  isGlobalGroup(roleGroupUri) {
    return this.GLOBAL_GROUPS.includes(roleGroupUri);
  }
}

module.exports = new SysProfileAbl();
