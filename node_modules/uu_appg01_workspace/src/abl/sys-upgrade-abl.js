"use strict";

const { DaoFactory, Lock, UuObjectDao } = require("uu_appg01_objectstore");
const { DbConnection } = require("uu_appg01_datastore");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const { Validator } = require("uu_appg01_core-validation");
const { Config } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const SysAppWorkspaceAbl = require("./sys-app-workspace-abl");
const SysAppInstanceAbl = require("./sys-app-instance-abl");
const Errors = require("../api/errors/sys-upgrade-data-errors.js");
const SysProfile = require("./sys-profile-abl");
const ProfileConfig = require("../helpers/profile-config.js");

const SYS_APP_WORKSPACE_COLLECTION = "sysUuAppWorkspace";
const SYS_APP_WORKSPACE_COLLECTION_OLD = "sysAppWorkspace";
const SYS_APP_WORKSPACE_CONFIG_COLLECTION = "sysAppWorkspaceConfig";
const SYS_APP_INSTANCE_COLLECTION = "sysUuSubAppInstance";
const SYS_APP_CONFIG_COLLECTION = "sysAppConfig";
const SYS_PROFILE_COLLECTION = "sysProfile";
const SYS_PERMISSION_COLLECTION = "sysPermission";
const SYS_AUDIT_LOG_RECORD_COLLECTION = "sysAuditLogRecord";
const SYS_DATASTORE_STATS_COLLECTION = "sysUuAppDataStoreStats";
const SYS_DATASTORE_STATS_COLLECTION_OLD = "sysDataStoreStats";
const SYS_APP_SECRET_COLLECTION_OLD = "sysKeyStore";
const SYS_APP_SECRET_COLLECTION = "sysUuAppSecret";

const SYS_APP_INSTANCE_VERSION = "3.0";

const ASID_ATTR = "asid";

const SYS_APP_PROFILE_ASID_AUTHORITIES = "AsidAuthorities";
const SYS_APP_PROFILE_AUTHORITIES = "Authorities";
const SYS_APP_PROFILE_EXECUTIVES = "Executives";
const SYS_APP_PROFILE_AUDITORS = "Auditors";

const DTO_OUT_UPGRADE_RUNNING = {
  state: "Running",
  message: "Data upgrade is running in an asynchronous thread. Please wait until the upgrade is completed."
};

const DTO_OUT_UPGRADE_COMPLETED = {
  state: "Completed",
  message: "Data upgrade has been completed."
};
const DTO_OUT_UPGRADE_AND_CLEANUP_COMPLETED = {
  state: "Completed",
  message: "Data upgrade and data cleanup have already been completed."
};

const DTO_OUT_UPGRADE_STARTED = {
  state: "Started",
  message: "Data upgrade has been started in an asynchronous thread. Please wait until the upgrade is completed."
};

const DTO_OUT_CLEANUP_UPGRADE_NOT_COMPLETED = {
  state: "notUpgraded",
  message: "Cleanup can't be started because uuApp is not upgraded. Please run upgrade uuCmd before running the cleanup."
};

const DTO_OUT_CLEANUP_RUNNING = {
  state: "Running",
  message: "Cleanup or upgrade is running in an asynchronous thread. Please wait until it is completed."
};

const DTO_OUT_CLEANUP_COMPLETED = {
  state: "Completed",
  message: "Cleanup has been completed."
};

const DTO_OUT_CLEANUP_STARTED = {
  state: "Started",
  message: "Cleanup has been started in an asynchronous thread. Please wait until the cleanup is completed."
};

const LOCK_CODE = "SysAppWorkspaceUpgradeLockCode";
const UPGRADE_CLEANUP_LOCK_CODE = "SysAppWorkspaceUpgradeCleanupLockCode";
const SCHEMAS = [
  SYS_APP_INSTANCE_COLLECTION,
  SYS_APP_WORKSPACE_COLLECTION,
  SYS_PROFILE_COLLECTION,
  SYS_PERMISSION_COLLECTION
];
const OBJECT_LOCKED_ERROR = "uu-app-objectstore/objectLocked";

const WARNINGS = {
  unsupportedKeys: {
    code: `${Errors.SysUpgradeData.UC_CODE}unsupportedKeys`
  },
  sysAppConfigAlreadyUpgraded: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysAppConfigAlreadyUpgraded`,
    message: "Upgrade of sysAppConfig was already done."
  },
  sysProfileAlreadyUpgraded: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysProfileAlreadyUpgraded`,
    message: "Collection sysProfile was already upgraded."
  },
  sysPremissionAlreadyUpgraded: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysPermissionAlreadyUpgraded`,
    message: "Collection sysPermission was already upgraded."
  },
  sysAppWorkspaceAlreadyUpgraded: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysAppWorkspaceAlreadyUpgraded`,
    message: "Collection sysAppWorkspace was already upgraded."
  },
  sysAppWorkspaceAwidIndexAlreadyCreated: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysAppWorkspaceIndexAlreadyCreated`,
    message: "Index \"awid_1\" for collection sysAppWorkspace was already created."
  },
  sysAppWorkspaceConfigAlreadyUpgraded: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysAppWorkspaceConfigAlreadyUpgraded`,
    message: "Upgrade of sysAppWorkspaceConfig was already done."
  },
  sysUuAppSecretCollectionCreateIndexFailed: {
    code: `${Errors.SysUpgradeData.UC_CODE}sysUuAppSecretCollectionCreateIndexFailed`,
    message: "Failed to create index for collection sysUuAppSecret. Fix potential data inconsistency and create the index manually to ensure proper application behaviour.",
  },
  sysProfileCollectionDeleteIndexFailed: {
    code: `${Errors.SysUpgradeCleanup.UC_CODE}sysProfileCollectionDeleteIndexFailed`,
    message: `Failed to delete indexes for collection sysProfile. Fix potential data inconsistency and delete the index manually to ensure proper application behaviour.`
  },
  sysPermissionCollectionDeleteIndexFailed: {
    code: `${Errors.SysUpgradeCleanup.UC_CODE}sysPermissionCollectionDeleteIndexFailed`,
    message: `Failed to delete indexes for collection sysPermission. Fix potential data inconsistency and delete the indexes manually to ensure proper application behaviour.`
  },
  sysAuditLogRecordCollectionDeleteIndexFailed: {
    code: `${Errors.SysUpgradeCleanup.UC_CODE}sysAuditLogRecordCollectionDeleteIndexFailed`,
    message: `Failed to delete indexes for collection sysAuditLogRecord. Fix potential data inconsistency and delete the indexes manually to ensure proper application behaviour.`
  }
};

class SysUpgradeAbl {

  constructor() {
    this.validator = Validator.load();
    this.logger = LoggerFactory.get("uuapp.workspace.SyMigrationAbl");
    SCHEMAS.forEach(schema => {
      this[`${schema}Dao`] = DaoFactory.getDao(schema);
    });
  }

  /**
   * Upgrades all uuObjectstore schemas from uuAppWorkspace version 2.x to 3.0.
   *
   * @param {Object} dtoIn
   * @returns {Promise<*>}
   */
  async upgrade(dtoIn, uuIdentity) {
    // HDS 1. - Performs a logical check of dtoIn.
    // HDS 1.1. - Calls the validate method on dtoIn according to dtoInType and fulfils validationResult.
    // HDS 1.2. - Checks whether dtoIn contains keys beyond the scope of dtoInType.
    // HDS 1.3. - validationResult must not contain wrong keys that are defined in dtoInType.
    // HDS 1.4. - Keys that are missing from dtoIn and a default value is required for them (see default values table),
    //   will be provided with a respective default value.
    let validationResult = this.validator.validate("sysUpgradeDataDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult( // A1, A2
      dtoIn,
      validationResult,
      WARNINGS.unsupportedKeys.code,
      Errors.SysUpgradeData.InvalidDtoIn
    );

    // HDS 2 - Loads sysAppConfig (create temporary dao as original one no longer exist)
    let asid = Config.get(ASID_ATTR);
    let connectionString = Config.get("uuSubAppDataStoreMap").primary;
    let sysAppConfigDao = new UuObjectDao(SYS_APP_CONFIG_COLLECTION, null, null, connectionString);
    // HDS 2.1.A System checks if sysAppConfig exists
    let sysAppConfig = await sysAppConfigDao.findOne({ asid });
    if (!sysAppConfig) {
      // In case sysAppConfig does not exist, upgrade was finished
      // (else upgrade was started on uninitialized app, which does not make sense)
      return this._getDtoOut(DTO_OUT_UPGRADE_AND_CLEANUP_COMPLETED, uuAppErrorMap);
    }
    if (sysAppConfig) {
      // HDS 2.1.B System checks if sysUuSubAppInstance exists and is not in the created state
      let sysUuSubAppInstance = await this.sysUuSubAppInstanceDao.findOne({ asid });
      if (sysUuSubAppInstance && sysUuSubAppInstance.sysState && (sysUuSubAppInstance.sysState !== "created")) {
        return this._getDtoOut(DTO_OUT_UPGRADE_COMPLETED, uuAppErrorMap)
      }
    }
    // HDS 3 - Tries to lock sysAppConfig instance.
    let upgradeLock = new Lock(LOCK_CODE, 1800);
    try {
      sysAppConfig = await sysAppConfigDao.lockOne({ asid }, upgradeLock);
    } catch (e) {
      if (e.code === OBJECT_LOCKED_ERROR) {
        // A3 - Already locked, upgrade is running
        return this._getDtoOut(DTO_OUT_UPGRADE_RUNNING, uuAppErrorMap);
      } else {
        // A4 - Unexpected upgrade error
        throw new Errors.SysUpgradeData.UpgradeDataFailed({ uuAppErrorMap }, {}, e);
      }
    }

    // HDS 4 - 15 - Performs the upgrade
    let upgradePromise = new Promise(async (resolve, reject) => {
      let timeoutHandle = setTimeout(() => {
        reject("timeout");
      }, 45000);
      try {
        resolve(await this._runUpgrade(dtoIn, asid, connectionString, sysAppConfig, upgradeLock, uuIdentity, uuAppErrorMap));
      } catch (e) {
        this.logger.error("Upgrade failed.", e);
        reject(e);
      } finally {
        clearTimeout(timeoutHandle);
      }
    });
    // HDS 16
    try {
      await upgradePromise;
      return this._getDtoOut(DTO_OUT_UPGRADE_COMPLETED, uuAppErrorMap);
    } catch (e) {
      if (e === "timeout") {
        return this._getDtoOut(DTO_OUT_UPGRADE_STARTED, uuAppErrorMap);
      } else {
        throw e;
      }
    }
  }

  async upgradeCleanup(uuAppErrorMap = {}) {
    // HDS 1 (A1) System checks if SysAppConfig collection exists
    let asid = Config.get(ASID_ATTR);
    let connectionString = Config.get("uuSubAppDataStoreMap").primary;
    let sysAppConfigDao = new UuObjectDao(SYS_APP_CONFIG_COLLECTION, null, null, connectionString);
    let sysAppConfig = await sysAppConfigDao.findOne({ asid });
    if (!sysAppConfig) {
      // CleanUp of sysAppConfig collection after using uuObjectDao constructor
      let dbConnection = await DbConnection.get(connectionString);
      if (await this._collectionExists(dbConnection, SYS_APP_CONFIG_COLLECTION)) {
        await dbConnection.collection(SYS_APP_CONFIG_COLLECTION).drop();
      }
      // In case sysAppConfig does not exist, upgradeCleanup was finished
      // (else upgradeCleanup was started on uninitialized app, which does not make sense)
      return this._getDtoOut(DTO_OUT_CLEANUP_COMPLETED, uuAppErrorMap);
    }

    let sysUuSubAppInstance = await this.sysUuSubAppInstanceDao.findOne({ asid });
    if (!sysUuSubAppInstance || sysUuSubAppInstance.sysState === "created") {
      return this._getDtoOut(DTO_OUT_CLEANUP_UPGRADE_NOT_COMPLETED, uuAppErrorMap)
    }

    // HDS 2 System check if SysAppConfig is locked
    let upgradeCleanupLock = new Lock(UPGRADE_CLEANUP_LOCK_CODE, 1800);
    try {
      await sysAppConfigDao.lockOne({ asid }, upgradeCleanupLock);
    } catch (e) {
      if (e.code === OBJECT_LOCKED_ERROR) {
        // A2 - Already locked, upgradeCleanup is running
        return this._getDtoOut(DTO_OUT_CLEANUP_RUNNING, uuAppErrorMap);
      } else {
        // A3 - Unexpected upgradeCleanup error
        throw new Errors.SysUpgradeCleanup.CleanupDataFailed({ uuAppErrorMap }, {}, e);
      }
    }

    // HDS 3 - 10
    let upgradeCleanupPromise = new Promise(async (resolve, reject) => {
      let timeoutHandle = setTimeout(() => {
        reject("timeout");
      }, 45000);
      try {
        resolve(await this._runUpgradeCleanup(asid, connectionString, upgradeCleanupLock, uuAppErrorMap));
      } catch (e) {
        this.logger.error("Upgrade cleanup failed.", e);
        reject(e);
      } finally {
        clearTimeout(timeoutHandle);
      }
    });
    // HDS 11 Returns properly filled dtoOut.
    try {
      await upgradeCleanupPromise;
      return this._getDtoOut(DTO_OUT_CLEANUP_COMPLETED, uuAppErrorMap);
    } catch (e) {
      if (e === "timeout") {
        return this._getDtoOut(DTO_OUT_CLEANUP_STARTED, uuAppErrorMap);
      } else {
        throw e;
      }
    }
  }

  async _runUpgradeCleanup(asid, connectionString, upgradeCleanupLock, uuAppErrorMap) {
    try {
      let dbConnection = await DbConnection.get(connectionString);
      // HDS 3 (A4) System cleanup SysAppWorkspace collection
      await this._cleanupSysAppWorkspace(dbConnection, uuAppErrorMap);
      // HDS 4 (A5) System cleanup SysAppWorkspaceConfig
      await this._cleanupSysAppWorkspaceConfig(dbConnection, uuAppErrorMap);
      // HDS 5 (A6, A7) System cleanup sysProfile collection
      await this._cleanupSysProfile(dbConnection, uuAppErrorMap);
      // HDS 6 (A8, A9) System cleanup sysPermission collection
      await this._cleanupSysPermission(dbConnection, uuAppErrorMap);
      // HDS 7 (A10) System cleanup sysDataStoreStats collection
      await this._cleanupSysDataStoreStats(dbConnection, uuAppErrorMap);
      // HDS 8 (A11) System cleanup sysKeyStore collection
      await this._cleanupSysKeyStore(dbConnection, connectionString);
      // HDS 9 (A12) System cleanup sysAuditLogRecord collection
      await this._cleanupSysAuditLogRecord(dbConnection, connectionString);
      // HDS 10 (A13) System cleanup sysAppConfig collection
      try {
        await dbConnection.collection(SYS_APP_CONFIG_COLLECTION).drop();
      } catch (e) {
        // A14 - Delete of sysAppConfig failed
        throw new Errors.SysUpgradeCleanup.DeleteSysAppConfigCollectionFailed({ uuAppErrorMap }, {}, e);
      }
      this.logger.info("UpgradeCleanup ended successfully.");
    } catch (e) {
      // In case of error remove lock (to be able to re-launch upgradeCleanup)
      // (When upgradeCleanup successfully finishes there is no need for unlock
      // as lock is deleted along with sysAppConfig)
      await upgradeCleanupLock.unlockAll();
      throw e;
    }
  }

  async _cleanupSysAppWorkspace(dbConnection, uuAppErrorMap) {
    // HDS 3 System checks SysAppWorkspace collection exists
    if (await this._collectionExists(dbConnection, SYS_APP_WORKSPACE_COLLECTION_OLD)) {
      // HDS 3.1 System deletes SysAppWorkspace collection
      try {
        await dbConnection.collection(SYS_APP_WORKSPACE_COLLECTION_OLD).drop();
      } catch (e) {
        // A4 deleteSysAppWorkspaceCollectionFailed
        throw new Errors.SysUpgradeCleanup.DeleteSysAppWorkspaceCollectionFailed({ uuAppErrorMap }, {}, e);
      }
    }
    this.logger.info(`Cleanup of ${SYS_APP_WORKSPACE_COLLECTION_OLD} collection was successful.`);
  }

  async _cleanupSysAppWorkspaceConfig(dbConnection, uuAppErrorMap) {
    // HDS 4 System checks if SysAppWorkspaceConfig collection exists
    if (await this._collectionExists(dbConnection, SYS_APP_WORKSPACE_CONFIG_COLLECTION)) {
      // HDS 4.1 System deletes SysAppWorkspaceConfig collection
      try {
        await dbConnection.collection(SYS_APP_WORKSPACE_CONFIG_COLLECTION).drop();
      } catch (e) {
        // A5 deleteSysAppWorkspaceConfigCollectionFailed
        throw new Errors.SysUpgradeCleanup.DeleteSysAppWorkspaceConfigCollectionFailed({ uuAppErrorMap }, {}, e);
      }
    }
    this.logger.info(`Cleanup of ${SYS_APP_WORKSPACE_CONFIG_COLLECTION} collection was successful.`);
  }

  async _cleanupSysProfile(dbConnection, uuAppErrorMap) {
    let sysProfileCollection = await dbConnection.collection(SYS_PROFILE_COLLECTION);
    // HDS 5.1 System check if awid_1_code_1 index exists
    if (await sysProfileCollection.indexExists("awid_1_code_1")) {
      // HDS 5.1.1 If awid_1_code_1 exists. System drops old index awid_1_code_1
      try {
        await sysProfileCollection.dropIndex("awid_1_code_1");
      } catch (e) {
        // A6 sysProfileCollectionDeleteIndexFailed
        ValidationHelper.addWarning(uuAppErrorMap, WARNINGS.sysProfileCollectionDeleteIndexFailed.code, WARNINGS.sysProfileCollectionDeleteIndexFailed.message);
      }
    }

    // HDS 5.2 System removes attributes code and roleUri from each uuObject
    try {
      let result = await sysProfileCollection.updateMany({ $or: [{ code: { $exists: true } }, { roleUri: { $exists: true } }] }, { $unset: { code: "", roleUri: "" } });
      this.logger.debug(`Result of removing attributes "code" and roleUri in ${SYS_PROFILE_COLLECTION} collection: ${result}`);
    } catch (e) {
      // A7 sysProfileCollectionDeleteAttributesFailed
      throw new Errors.SysUpgradeCleanup.SysProfileCollectionDeleteAttributesFailed({ uuAppErrorMap }, {}, e);
    }
    this.logger.info(`Cleanup of ${SYS_PROFILE_COLLECTION} collection was successful.`);
  }

  async _cleanupSysPermission(dbConnection, uuAppErrorMap) {
    let sysPermissionCollection = await dbConnection.collection(SYS_PERMISSION_COLLECTION);
    // HDS 6.1 System drops old indexes awid_1_uuIdentity_1_profileCode_1, awid_1_profileCode_1, awid_1__id_1, awid_1_uuIdentity_1
    try {
      if (await sysPermissionCollection.indexExists("awid_1_uuIdentity_1_profileCode_1")) {
        await sysPermissionCollection.dropIndex("awid_1_uuIdentity_1_profileCode_1");
      }
      if (await sysPermissionCollection.indexExists("awid_1_profileCode_1")) {
        await sysPermissionCollection.dropIndex("awid_1_profileCode_1");
      }
      if (await sysPermissionCollection.indexExists("awid_1__id_1")) {
        await sysPermissionCollection.dropIndex("awid_1__id_1");
      }
      if (await sysPermissionCollection.indexExists("awid_1_uuIdentity_1")) {
        await sysPermissionCollection.dropIndex("awid_1_uuIdentity_1");
      }
    } catch (e) {
      // A8 sysPermissionCollectionDeleteIndexFailed
      ValidationHelper.addWarning(uuAppErrorMap, WARNINGS.sysPermissionCollectionDeleteIndexFailed.code, WARNINGS.sysPermissionCollectionDeleteIndexFailed.message);
    }

    // HDS 6.2 System removes attribute profileCode from each uuObject
    try {
      let result = await sysPermissionCollection.updateMany({ profileCode: { $exists: true } }, { $unset: { profileCode: "" } });
      this.logger.debug(`Result of removing attributes "profileCode" ${SYS_PERMISSION_COLLECTION} collection: ${result}`);
    } catch (e) {
      // A9 sysProfileCollectionDeleteAttributesFailed
      throw new Errors.SysUpgradeCleanup.SysPermissionCollectionDeleteAttributesFailed({ uuAppErrorMap }, {}, e);
    }
    this.logger.info(`Cleanup of ${SYS_PERMISSION_COLLECTION} collection was successful.`);
  }

  async _cleanupSysDataStoreStats(dbConnection, uuAppErrorMap) {
    // HDS 7 System checks if SysDataStoreStats collection exists
    if (await this._collectionExists(dbConnection, SYS_DATASTORE_STATS_COLLECTION_OLD)) {
      // HDS 7.1 System deletes SysDataStoreStats collection
      try {
        await dbConnection.collection(SYS_DATASTORE_STATS_COLLECTION_OLD).drop();
      } catch (e) {
        // A10 deleteSysDataStoreStatsCollectionFailed
        throw new Errors.SysUpgradeCleanup.DeleteSysDataStoreStatsCollectionFailed({ uuAppErrorMap }, {}, e)
      }
    }
    this.logger.info(`Cleanup of ${SYS_DATASTORE_STATS_COLLECTION_OLD} collection was successful.`);
  }

  async _cleanupSysKeyStore(dbConnection, uuAppErrorMap) {
    // HDS 8 System check if SysKeyStore collection exists
    if (await this._collectionExists(dbConnection, SYS_APP_SECRET_COLLECTION_OLD)) {
      // HDS 8.1 System delete SysKeyStore collection
      try {
        await dbConnection.collection(SYS_APP_SECRET_COLLECTION_OLD).drop();
      } catch (e) {
        // A11 deleteSysKeyStoreCollectionFailed
        throw new Errors.SysUpgradeCleanup.DeleteSysKeyStoreCollectionFailed({ uuAppErrorMap }, {}, e)
      }
    }
    this.logger.info(`Cleanup of ${SYS_APP_SECRET_COLLECTION_OLD} collection was successful.`);
  }

  async _cleanupSysAuditLogRecord(dbConnection, uuAppErrorMap) {
    let sysAuditLogRecordCollection = await dbConnection.collection(SYS_AUDIT_LOG_RECORD_COLLECTION);
    // HDS 9.1 System drops old indexes awid_1_logTime_-1_spp_1, awid_1_logTime_-1_identity_1, awid_1_logTime_-1, awid_1__id_1
    try {
      if (await sysAuditLogRecordCollection.indexExists("awid_1_logTime_-1_spp_1")) {
        await sysAuditLogRecordCollection.dropIndex("awid_1_logTime_-1_spp_1");
      }
      if (await sysAuditLogRecordCollection.indexExists("awid_1_logTime_-1_identity_1")) {
        await sysAuditLogRecordCollection.dropIndex("awid_1_logTime_-1_identity_1");
      }
      if (await sysAuditLogRecordCollection.indexExists("awid_1_logTime_-1")) {
        await sysAuditLogRecordCollection.dropIndex("awid_1_logTime_-1");
      }
      if (await sysAuditLogRecordCollection.indexExists("awid_1__id_1")) {
        await sysAuditLogRecordCollection.dropIndex("awid_1__id_1");
      }
    } catch (e) {
      // A12 sysAuditLogRecordCollectionDeleteIndexFailed
      ValidationHelper.addWarning(uuAppErrorMap, WARNINGS.sysAuditLogRecordCollectionDeleteIndexFailed.code, WARNINGS.sysAuditLogRecordCollectionDeleteIndexFailed.message);
    }
    this.logger.info(`Cleanup of ${SYS_AUDIT_LOG_RECORD_COLLECTION} collection was successful.`);
  }

  async _runUpgrade(dtoIn, asid, connectionString, sysAppConfig, upgradeLock, uuIdentity, uuAppErrorMap) {
    try {
      let dbConnection = await DbConnection.get(connectionString);
      // HDS 4 (A5, A6) - Upgrade sysUuSubAppInstance.
      let sysUuSubAppInstance = await this._upgradeSysUuSubAppInstance(asid, sysAppConfig, uuIdentity, uuAppErrorMap);
      // HDS 5 (A7, A8, A9) - Upgrade SysProfile.
      await this._upgradeSysProfile(dbConnection, uuAppErrorMap);
      // HDS 6 (A9) - Upgrade sysUuSubAppInstance application profiles.
      await this._upgradeAsidAppProfiles(asid, dbConnection, sysUuSubAppInstance, dtoIn, uuAppErrorMap);
      // HDS 7 (A10, A11) - Upgrade sysAppWorkspace.
      await this._upgradeSysAppWorkspace(dtoIn, dbConnection, uuIdentity, uuAppErrorMap);
      // HDS 8 (A12) - Upgrade sysAppWorkspace application profiles.
      await this._upgradeAwidAppProfiles(dtoIn, uuAppErrorMap);
      // HDS 9 (A13) - Upgrade sysAppWorkspaceConfig.
      await this._upgradeSysAppWorkspaceConfig(dbConnection, uuAppErrorMap);
      // HDS 10 (A14, A15) - Upgrade sysPermission.
      await this._upgradeSysPermission(dbConnection, uuAppErrorMap);
      // HDS 11 (A16) Upgrades sysDataStoreStats
      await this._upgradeSysDataStoreStats(dbConnection, uuAppErrorMap);
      // HDS 12 (A17) Upgrades sysAuditLogRecord
      await this._upgradeSysAuditLogRecord(dbConnection, uuAppErrorMap);
      // HDS 13 (A18, A19, A20, A21) Upgrades uuKeyStore to uuAppSecureStore
      await this._upgradeSysSecretStore(dbConnection, uuAppErrorMap);
      // HDS 14 - (A22) Update sysUuSubAppInstance state
      await this._updateAppInstanceState(sysUuSubAppInstance, sysAppConfig, uuAppErrorMap);
      // HDS 15 - System unlock sysAppConfig instance
      try {
        let sysAppConfigDao = new UuObjectDao(SYS_APP_CONFIG_COLLECTION, null, null, connectionString);
        await sysAppConfigDao.unlockOne({ asid }, upgradeLock);
      } catch (e) {
        // A23 - Upgrade sysAppConfig failed
        throw new Errors.SysUpgradeData.UpgradeSysAppConfigFailed({ uuAppErrorMap }, {}, e);
      }
      this.logger.info("Upgrade data ended successfully.");
    } catch (e) {
      // In case of error remove lock (to be able to re-launch upgrade)
      // (When upgrade successfully finishes there is no need for unlock
      // as lock is deleted along with sysAppConfig)
      await upgradeLock.unlockAll();
      throw e;
    }
  }

  async _upgradeAsidAppProfiles(asid, dbConnection, appInstance, dtoIn, uuAppErrorMap) {
    try {
      // To prevent problems with creating new asid profiles without attribute code, we need to remove index awid_1_code_1
      // attribute code will always be null and we will receive duplicate key error
      let sysProfileCollection = await dbConnection.collection(SYS_PROFILE_COLLECTION);
      if (await sysProfileCollection.indexExists("awid_1_code_1")) {
        await sysProfileCollection.dropIndex("awid_1_code_1");
      }
      // HDS 6.1. - Get profileCodes with ProfileConfig.getPrivilegedProfiles(asid).
      let profileCodes = ProfileConfig.getPrivilegedProfiles(asid);
      // HDS 6.2. - Create loaded profileCodes with SysProfile DAO by method initProfiles(asid, profileCodes).
      await SysProfile.initProfiles(asid, profileCodes);

      // HDS 6.3. - Get profile AsidAuthorities with SysProfile DAO by method getProfileByCode().
      let asidAuthoritiesProfile = await SysProfile.getProfileByCode(asid, SYS_APP_PROFILE_ASID_AUTHORITIES);

      // HDS 6.4. - Set AsidAuthorities.roleGroupUri = dtoIn.uuAppProfileAsidAuthorities.
      asidAuthoritiesProfile.roleGroupUri = dtoIn.uuAppProfileAsidAuthorities;

      // HDS 6.5. - Update profile AsidAuthorities with SysProfile DAO by method update().
      await SysProfile.update(asidAuthoritiesProfile);
      this.logger.info(`Upgrade of asid application profiles was successful.`);
    } catch (e) {
      // A9 - Upgrade of asid application profiles failed
      throw new Errors.SysUpgradeData.UpgradeAsidAppProfilesFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _upgradeAwidAppProfiles(dtoIn, uuAppErrorMap) {
    try {
      let pageInfo = {
        pageSize: 500,
        pageIndex: 0
      };
      // eslint-disable-next-line no-constant-condition
      while (true) {
        this.logger.info(`Upgrading awid application profiles ${JSON.stringify(pageInfo)}`);
        // HDS 8.1 - Get sysAppWorkspaceList by loading all sysAppWorkspace with SysAppWorkspace DAO by method find().
        let sysAppWorkspaceList = await this.sysUuAppWorkspaceDao.find({}, pageInfo);

        // HDS 8.2 - For each sysAppWorkspace in sysAppWorkspace:
        for (let sysAppWorkspace of sysAppWorkspaceList.itemList) {
          let awid = sysAppWorkspace.awid;
          // HDS 8.2.1 - Load profile Authorities with SysProfile DAO by method getProfileByCode().
          let authoritiesProfile = await SysProfile.getProfileByCode(awid, SYS_APP_PROFILE_AUTHORITIES);
          if (!authoritiesProfile) {
            await SysProfile.initProfiles(awid, [
              SYS_APP_PROFILE_AUTHORITIES,
              SYS_APP_PROFILE_EXECUTIVES,
              SYS_APP_PROFILE_AUDITORS,
            ]);
            authoritiesProfile = await SysProfile.getProfileByCode(awid, SYS_APP_PROFILE_AUTHORITIES);
          }
          // HDS 8.2.2 - If dtoIn.uuAppProfileAuthorities is set.
          if (dtoIn.uuAppProfileAuthorities) {
            // HDS 8.2.2.1 - Set Authorities.roleGroupUri = dtoIn.uuAppProfileAuthorities.
            authoritiesProfile.roleGroupUri = dtoIn.uuAppProfileAuthorities;
            // HDS 8.2.2.2 - Update profile Authorities with SysProfile DAO by method update().
            await SysProfile.update(authoritiesProfile);
          }
        }
        if (sysAppWorkspaceList.itemList.length < pageInfo.pageSize) {
          break;
        } else {
          pageInfo.pageIndex++;
        }
      }
      this.logger.info(`Upgrade of awid application profiles was successful.`);
    } catch (e) {
      // A12 - Upgrade awid application profiles failed.
      throw new Errors.SysUpgradeData.UpgradeAwidAppProfilesFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _upgradeSysUuSubAppInstance(asid, sysAppConfig, uuIdentity, uuAppErrorMap) {
    // HDS 4.1 - Check if sysAppConfig was not already migrated
    let sysUuSubAppInstance = await this.sysUuSubAppInstanceDao.getByAsid(asid);
    if (sysUuSubAppInstance) {
      // A5 - SysAppConfig already upgraded
      ValidationHelper.addWarning(
        uuAppErrorMap,
        WARNINGS.sysAppConfigAlreadyUpgraded.code,
        WARNINGS.sysAppConfigAlreadyUpgraded.message,
        { asid }
      );
    } else {
      try {
        await this.sysUuSubAppInstanceDao.createSchema();
        // HDS 4.2 - Prepare sysUuSubAppInstance data from sysAppConfig
        sysUuSubAppInstance = { ...sysAppConfig };
        sysUuSubAppInstance.version = SYS_APP_INSTANCE_VERSION;
        sysUuSubAppInstance.name = Config.get("name");
        sysUuSubAppInstance.description = Config.get("desc");
        sysUuSubAppInstance.baseRegistryUri = Config.get("base_registry_uri");
        sysUuSubAppInstance.sysState = "created";
        sysUuSubAppInstance.adviceNote = {
          message: sysAppConfig.runtimeMode.note || "Upgraded to AppServer 5",
          severity: "info",
          uuIdentity: uuIdentity,
          startTime: sysAppConfig.runtimeMode.from || new Date(),
          estimatedEndTime: sysAppConfig.runtimeMode.to || null
        }
        delete sysUuSubAppInstance._id;
        delete sysUuSubAppInstance.id;
        delete sysUuSubAppInstance.sys;
        delete sysUuSubAppInstance.runtimeMode;
        // HDS 4.3 - Stores sysUuSubAppInstance to database
        sysUuSubAppInstance = await this.sysUuSubAppInstanceDao.create(sysUuSubAppInstance);
        this.logger.info(`Upgrade of ${SYS_APP_CONFIG_COLLECTION} collection was successful.`);
      } catch (e) {
        // A6 - Upgrade of sysAppConfig failed
        throw new Errors.SysUpgradeData.UpgradeSysAppConfigFailed({ uuAppErrorMap }, {}, e);
      }
    }
    return sysUuSubAppInstance;
  }

  async _upgradeSysAppWorkspaceConfig(dbConnection, uuAppErrorMap) {
    try {
      // HDS 9.1 - Get sysAppWorkspaceConfigList by loading all sysAppWorkspaceConfig by method find().
      if (!(await this._collectionExists(dbConnection, SYS_APP_WORKSPACE_CONFIG_COLLECTION))) {
        ValidationHelper.addWarning(uuAppErrorMap, WARNINGS.sysAppWorkspaceConfigAlreadyUpgraded.code, WARNINGS.sysAppWorkspaceConfigAlreadyUpgraded.message);
        return;
      }
      // HDS 9.2 - For each sysAppWorkspaceConfig in sysAppWorkspaceConfigList:
      let sysUuAppWorkspaceCollection = await dbConnection.collection(SYS_APP_WORKSPACE_COLLECTION);
      let sysAppWorkspaceConfigCollection = await dbConnection.collection(SYS_APP_WORKSPACE_CONFIG_COLLECTION);
      let sysAppWorkspaceConfigCursor = await sysAppWorkspaceConfigCollection.find({});
      let sysAppWorkspaceConfig;
      while ((sysAppWorkspaceConfig = await sysAppWorkspaceConfigCursor.next())) {
        //HDS 9.2.1 - Move all non system attributes (awid, _id, sys) from sysAppWorkspaceConfig to related sysAppWorkspace.
        let criteria = { awid: sysAppWorkspaceConfig.awid };
        delete sysAppWorkspaceConfig._id;
        delete sysAppWorkspaceConfig.id;
        delete sysAppWorkspaceConfig.awid;
        delete sysAppWorkspaceConfig.sys;
        if (Object.keys(sysAppWorkspaceConfig).length) {
          await sysUuAppWorkspaceCollection.findOneAndUpdate(criteria, { $set: sysAppWorkspaceConfig }, { upsert: true });
        }
      }
      this.logger.info(`Upgrade of ${SYS_APP_WORKSPACE_CONFIG_COLLECTION} collection was successful.`);
    } catch (e) {
      // A13
      throw new Errors.SysUpgradeData.UpgradeSysAppWorkspaceConfigFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _upgradeSysAppWorkspace(dtoIn, dbConnection, uuIdentity, uuAppErrorMap) {
    let sysUuAppWorkspaceCollection = await dbConnection.collection(SYS_APP_WORKSPACE_COLLECTION);
    // HDS 7.3.3 System checks if  awid_1_sysState_1 index exists
    if (!(await sysUuAppWorkspaceCollection.indexExists("awid_1_sysState_1"))) {

      if (!(await sysUuAppWorkspaceCollection.indexExists("awid_1"))) { // create unique index so we prevent duplicates during re-run of this method
        try {
          await sysUuAppWorkspaceCollection.createIndex({ awid: 1 }, { unique: true });
        } catch (e) {
          throw new Errors.SysUpgradeData.SysUuAppWorkspaceIndexCreateFailed({ uuAppErrorMap }, e);
        }
      }

      // HDS 7.2 System gets sysAppWorkspaces
      let sysAppWorkspaceCollection = await dbConnection.collection(SYS_APP_WORKSPACE_COLLECTION_OLD);
      let sysAppWorkspaceCursor = await sysAppWorkspaceCollection.find({});
      let sysAppWorkspace;
      // HDS 7.3 For each sysUuAppWorkspace system prepares a new object based on sysAppWorkspace
      while ((sysAppWorkspace = await sysAppWorkspaceCursor.next())) {
        // HDS 7.3.1 Unset following attributes: profileList, licenseOwner, awidOwner, runtimeMode.
        let create = {
          _id: sysAppWorkspace._id,
          awid: sysAppWorkspace.awid,
          version: SYS_APP_INSTANCE_VERSION,
          awidLicenseOwnerList: [sysAppWorkspace.awidOwner],
          awidLicense: "",
          sysState: this._getSysState(sysAppWorkspace),
          adviceNote: {
            message: sysAppWorkspace.runtimeMode.note || "Upgraded to AppServer 5",
            severity: "info",
            uuIdentity: uuIdentity,
            startTime: sysAppWorkspace.runtimeMode.from || new Date(),
            estimatedEndTime: sysAppWorkspace.runtimeMode.to || null
          },
          authorizationStrategy: sysAppWorkspace.authorizationStrategy,
          artifactUri: sysAppWorkspace.artifactUri,
          sys: sysAppWorkspace.sys
        };

        // HDS 7.3.2 System creates sysUuAppWorkspace object
        try {
          await sysUuAppWorkspaceCollection.insert(create);
        } catch (e) {
          if (!(await sysUuAppWorkspaceCollection.findOne({ awid: create.awid }))) { // skip if workspace already exists in new collection
            throw e;
          }
        }
      }

      try {
        await this.sysUuAppWorkspaceDao.createSchema();
      } catch (e) {
        throw new Errors.SysUpgradeData.SysUuAppWorkspaceIndexCreateFailed({ uuAppErrorMap }, {}, {});
      }
    } else {
      ValidationHelper.addWarning(
        uuAppErrorMap,
        WARNINGS.sysAppWorkspaceAlreadyUpgraded.code,
        WARNINGS.sysAppWorkspaceAlreadyUpgraded.message
      );
    }

    // HDS 7.3.4 Clears sysAppWorkspace cache
    await SysAppWorkspaceAbl.clearCache();
    this.logger.info(`Upgrade of ${SYS_APP_WORKSPACE_COLLECTION} collection was successful.`);
  }

  async _upgradeSysProfile(dbConnection, uuAppErrorMap) {
    // HDS 5.1 System updates sysProfile collection
    let sysProfileCollection = await dbConnection.collection(SYS_PROFILE_COLLECTION);

    // HDS 5.2 If awid_profile_1 index doesn't exists system create new index
    if (!(await sysProfileCollection.indexExists("awid_1_profile_1"))) {
      let sysProfileCursor = await sysProfileCollection.find({});
      let sysProfile;
      // HDS 5.1.A System adds new attribute to sysProfile collection
      while ((sysProfile = await sysProfileCursor.next())) {
        if (sysProfile.profile) { // skip already upgraded sysProfile objects
          continue;
        }
        try {
          let filter = { awid: sysProfile.awid, code: sysProfile.code };
          let update = { $set: { profile: sysProfile.code, roleGroupUri: sysProfile.roleUri } };
          await sysProfileCollection.findOneAndUpdate(filter, update);
        } catch (e) {
          // A7 - Failed to create attributes for sysProfile collection
          throw new Errors.SysUpgradeData.SysProfileCollectionCreateAttributesFailed({ uuAppErrorMap }, {}, e);
        }
      }

      try {
        await sysProfileCollection.createIndex({ awid: 1, profile: 1 }, { unique: true });
      } catch (e) {
        // A8 - Failed to create new index for sysProfile collection
        throw new Errors.SysUpgradeData.CreateSysProfileIndexFailed({ uuAppErrorMap }, {}, e);
      }
    } else {
      // A9 - Index awid_profile_1 for sysProfile collection already created
      ValidationHelper.addWarning(
        uuAppErrorMap,
        WARNINGS.sysProfileAlreadyUpgraded.code,
        WARNINGS.sysProfileAlreadyUpgraded.message
      );
    }
    this.logger.info(`Upgrade of ${SYS_PROFILE_COLLECTION} collection was successful.`);
  }

  async _upgradeSysPermission(dbConnection, uuAppErrorMap) {
    // HDS 10. System updates sysPermission collection
    let sysPermissionCollection = await dbConnection.collection(SYS_PERMISSION_COLLECTION);
    if (!(await sysPermissionCollection.indexExists("awid_1_profile_1"))) {

      let sysPermissionCursor = await sysPermissionCollection.find({});
      let sysPermission;
      // HDS 10.1 System creates new attribute profile with value of profileCode.
      while ((sysPermission = await sysPermissionCursor.next())) {
        if (sysPermission.profile) {
          continue;
        }
        try {
          let filter = { awid: sysPermission.awid, profileCode: sysPermission.profileCode };
          let update = { $set: { profile: sysPermission.profileCode } };
          await sysPermissionCollection.updateMany(filter, update);
        } catch (e) {
          // A14 - Failed to create attribute profile for sysPermission collection
          throw new Errors.SysUpgradeData.SysPermissionCollectionCreateAttributeFailed({ uuAppErrorMap }, {}, e);
        }
      }

      // HDS 10.2 Creates new indexes awid_1_uuIdentity_1_profile_1, awid_1_profile_1
      try {
        await sysPermissionCollection.createIndex({ awid: 1, uuIdentity: 1, profile: 1 }, { unique: true });
        await sysPermissionCollection.createIndex({ awid: 1, profile: 1 });
      } catch (e) {
        // A15 - Failed to create indexes  awid_1_uuIdentity_1_profile_1, awid_1_profile_1 for sysPermission collection
        throw new Errors.SysUpgradeData.CreateSysPermissionIndexesFailed({ uuAppErrorMap }, {}, e);
      }
    } else {
      ValidationHelper.addWarning(
        uuAppErrorMap,
        WARNINGS.sysPremissionAlreadyUpgraded.code,
        WARNINGS.sysPremissionAlreadyUpgraded.message
      );
    }
    this.logger.info(`Upgrade of ${SYS_PERMISSION_COLLECTION} collection was successful.`);
  }

  async _upgradeSysDataStoreStats(dbConnection, uuAppErrorMap) {
    try {
      let sysUuAppDataStoreStatsCollection = await dbConnection.collection(SYS_DATASTORE_STATS_COLLECTION);
      await sysUuAppDataStoreStatsCollection.createIndex({ awid: 1 }, { unique: true });

      if (await this._collectionExists(dbConnection, SYS_DATASTORE_STATS_COLLECTION_OLD)) {
        // HDS 11.1 - System creates new collection sysUuAppDataStoreStats with old sysDataStoreStats collection objects.
        let sysDataStoreStatsCollection = await dbConnection.collection(SYS_DATASTORE_STATS_COLLECTION_OLD);
        let sysDataStoreStatsCursor = await sysDataStoreStatsCollection.find();
        let sysDataStoreStats;
        while ((sysDataStoreStats = await sysDataStoreStatsCursor.next())) {
          try {
            await sysUuAppDataStoreStatsCollection.insert(sysDataStoreStats)
          } catch (e) {
            if (!(await sysUuAppDataStoreStatsCollection.findOne({ awid: sysDataStoreStats.awid }))) { // skip if stat already exists in new collection
              throw e;
            }
          }
        }
      }
      this.logger.info(`Upgrade of ${SYS_DATASTORE_STATS_COLLECTION_OLD} collection was successful.`);
    } catch (e) {
      // A16 - Failed to upgrade sysDataStoreStats collection
      throw new Errors.SysUpgradeData.UpgradeSysDataStoreStatsCollectionFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _upgradeSysAuditLogRecord(dbConnection, uuAppErrorMap) {
    try {
      let sysAuditLogRecordCollection = await dbConnection.collection(SYS_AUDIT_LOG_RECORD_COLLECTION);
      // HDS 12.1 - Creates new index awid_1_logTime_1.
      if (!(await sysAuditLogRecordCollection.indexExists("awid_1_logTime_1"))) {
        await sysAuditLogRecordCollection.createIndex({ awid: 1, logTime: 1 }, { background: true });
      }
      this.logger.info(`Upgrade of ${SYS_AUDIT_LOG_RECORD_COLLECTION} collection was successful.`);
    } catch (e) {
      // A17 - Failed to create index awid_1_logTime_1 for sysAuditLogRecord collection
      throw new Errors.SysUpgradeData.SysAuditLogRecordCollectionCreateIndexFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _upgradeSysSecretStore(dbConnection, uuAppErrorMap) {
    try {
      try {
        await dbConnection.collection(SYS_APP_SECRET_COLLECTION).createIndex({ awid: 1, secretSet: 1, code: 1 }, { unique: true });
      } catch (e) {
        // A21 - Failed to create index for sysUuAppSecret collection
        ValidationHelper.addWarning(
          uuAppErrorMap,
          WARNINGS.sysUuAppSecretCollectionCreateIndexFailed.code,
          WARNINGS.sysUuAppSecretCollectionCreateIndexFailed.message
        );
      }

      if (await this._collectionExists(dbConnection, SYS_APP_SECRET_COLLECTION_OLD)) {
        // HDS 13.1 System creates new collection sysUuAppSecret with old sysKeyStore collection objects
        let sysKeyStoreCollection = await dbConnection.collection(SYS_APP_SECRET_COLLECTION_OLD);
        let sysUuAppSecretCollection = await dbConnection.collection(SYS_APP_SECRET_COLLECTION);

        let sysKeyStoreCursor = await sysKeyStoreCollection.find();
        let sysKeyStore;
        while ((sysKeyStore = await sysKeyStoreCursor.next())) {
          if (sysKeyStore.keySet === "uuAppClientTokenValidation") {
            continue;
          }
          try {
            await sysUuAppSecretCollection.insert({
              _id: sysKeyStore._id,
              awid: sysKeyStore.awid,
              secretSet: sysKeyStore.keySet,
              code: sysKeyStore.keyCode,
              secret: sysKeyStore.key,
              sys: sysKeyStore.sys
            });
          } catch (e) {
            if (await sysUuAppSecretCollection.findOne({ _id: sysKeyStore._id })) { // skip if secret already exists in new collection
              this.logger.warn(`Failed to copy uuAppSecret. It already exists in new collection, skipping. awid=${sysKeyStore.awid}, secretSet=${sysKeyStore.keySet}, code=${sysKeyStore.keyCode}`, e);
            } else {
              throw e;
            }
          }
        }
      }
      this.logger.info(`Upgrade of ${SYS_APP_SECRET_COLLECTION} collection was successful.`);
    } catch (e) {
      // Upgrade of sysUuAppSecret failed.
      throw new Errors.SysUpgradeData.UpgradeSysAppSecretStoreFailed({ uuAppErrorMap }, {}, e);
    }
  }

  async _updateAppInstanceState(sysUuSubAppInstance, sysAppConfig, uuAppErrorMap) {
    try {
      let sysState = sysAppConfig.runtimeMode.mode === "privileged" ? "restricted" : "active";
      let update = { asid: sysUuSubAppInstance.asid, $set: { sysState } };
      await this.sysUuSubAppInstanceDao.update(update);

      await SysAppInstanceAbl.clearCache();
      this.logger.info(`sysUuSubAppInstance was successfuly set to "${sysState}" state.`);
    } catch (e) {
      // A22 - Upgrade sysUuSubApInstance failed
      throw new Errors.SysUpgradeData.UpgradeSysUuSubAppInstanceFailed({ uuAppErrorMap }, {}, e);
    }
  }

  _getSysState(workspace) {
    if (workspace.runtimeMode.mode === "privileged") {
      return "restricted";
    } else {
      if (workspace.state === "initialized") {
        return "active";
      } else if (workspace.state === "initializing") {
        return "registered";
      } else {
        return "closed";
      }
    }
  }

  _getDtoOut(dtoOutTemplate, uuAppErrorMap) {
    let dtoOut = { ...dtoOutTemplate }
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  async _collectionExists(dbConnection, collectionName) {
    let collections = await dbConnection.listCollections().toArray();
    for (let collection of collections) {
      if (collection.name === collectionName) {
        return true;
      }
    }
    return false;
  }

}

module.exports = new SysUpgradeAbl();
