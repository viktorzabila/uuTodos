"use strict";
const { Validator } = require("uu_appg01_core-validation");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const { DaoFactory } = require("uu_appg01_objectstore");
const { Config } = require("uu_appg01_core-utils");

const SysDatastoreDao = require("../dao/sys-app-data-store-mongo.js");
const SysAppWorkspaceAbl = require("./sys-app-workspace-abl");
const SysAppInstanceAbl = require("./sys-app-instance-abl");
const Errors = require("../api/errors/sys-app-data-store-errors.js");

const SYS_RECREATE_INDEXES = true;

class SysAppDataStoreAbl {
  constructor() {
    this.validator = Validator.load();
  }

  async dropDataStore(dtoIn) {
    // HDS 1. - Performs a logical check of dtoIn. (A1, A2)
    let validationResult = this.validator.validate("sysDropDataStoresDtoInType", dtoIn);
    const uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.Drop.UC_CODE}unsupportedKeys`,
      Errors.Drop.InvalidDtoInError
    ); // A1, A2

    if (dtoIn.recreateIndexes === undefined) dtoIn.recreateIndexes = SYS_RECREATE_INDEXES;

    // HDS 2. Checks that the application has a uuSubAppDataStore configured
    // (application is not started with disabled persistence). (A3)
    if (!DaoFactory.isDataStoreOn()) {
      throw new Errors.Drop.DataStoreDisabled({ uuAppErrorMap });
    }

    // HDS 3. - Gets a list of uuSubAppDataStores based on attribute dtoIn.dataStoreNames
    let loadedDataStores = await this._loadDataStores(dtoIn.dataStoreNames, uuAppErrorMap); // A4
    let dtoOut = { uuAppErrorMap, droppedDataStores: [] };


    // HDS 4. - For each uuSubAppDataStore to be deleted, does the following:
    let index = 0;
    for (let dataStore of loadedDataStores) {
      let connectionString = dataStore.connectionString;
      // HDS 4.1. - Gets a list of collections for given dataStore.
      let collections = await SysDatastoreDao.getListOfCollections(connectionString);
      dtoOut.droppedDataStores.push({ name: dataStore.name, collections: [] });
      // HDS 4.2. - Calls MongoDb command db.collection.drop() for each collection.
      for (let collection of collections) {
        let collectionName = collection.name;
        await SysDatastoreDao.dropCollection(connectionString, collectionName);

        // HDS 4.3. - Writes collection name to dtoOut.
        dtoOut.droppedDataStores[index].collections.push(collectionName);

        // HDS 5. - If dtoIn.recreateIndexes is true, then recreates indexes for each dropped schema (DAO createSchema).
        if (dtoIn.recreateIndexes) {
          try {
            let collectionDao = DaoFactory.getDao(collectionName);
            if (collectionDao.createSchema) {
              await collectionDao.createSchema();
            }
          } catch (e) {
            // collection is not registered in DaoFactory
          }
        }
      }
      index += 1;
    }

    // HDS 6. - Clear all uuAppWorkspace caches.
    SysAppWorkspaceAbl.clearCache();
    SysAppInstanceAbl.clearCache();

    // HDS 7. - Returns properly filled out dtoOut.
    return dtoOut;
  }

  _loadDataStores(datastoreNames, uuAppErrorMap) {
    let invalidDataStoreNames = [];
    let loadedDataStores = [];
    let uuSubAppDataStoreMap = Config.get("uuSubAppDataStoreMap");

    // HDS 3.1. - If it is filled out then checks that entered uuSubAppDataStores are configured in uuSubApp. (A4)
    if (datastoreNames) {
      datastoreNames.forEach(name => {
        let connectionString = uuSubAppDataStoreMap[name];
        if (connectionString) {
          loadedDataStores.push({ name, connectionString });
        } else {
          invalidDataStoreNames.push(name);
        }
      });
      if (invalidDataStoreNames.length !== 0) { // A4
        throw new Errors.Drop.DataStoreNotConfigured({ uuAppErrorMap }, { invalidDataStoreNames });
      }

      // HDS 3.2. - If it is not filled out then returns a list of uuSubAppDataStores configured in uuSubApp.
    } else {
      for (let name of Object.keys(uuSubAppDataStoreMap)) {
        let connectionString = uuSubAppDataStoreMap[name];
        loadedDataStores.push({ name, connectionString });
      }
    }

    return loadedDataStores;
  }
}

module.exports = new SysAppDataStoreAbl();
