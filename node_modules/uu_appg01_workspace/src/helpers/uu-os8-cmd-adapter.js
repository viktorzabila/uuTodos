"use strict";

const AppClient = require("uu_appg01_core-appclient");
const { Session } = require("uu_appg01_core-authentication");
const { Config, OptsReader } = require("uu_appg01_core-utils");

const DEFAULT_AUTHORIZATION_TIMEOUT = 5 * 1000;

const UUOS8_CMD_PREFIX = "ues/wcp";
const ADAPTER_INTERCEPTORS = [
  AppClient.PerflogHandler,
  // TODO Use custom error handler
  AppClient.RemoteErrorHandler,
  AppClient.TransformParametersHandler
];

class UuOs8CmdAdapter {
  constructor(baseUrl, serviceName) {
    let workspaceOpts = new OptsReader({
      baseUrl: `${baseUrl}/${UUOS8_CMD_PREFIX}`,
      verifySsl: Config.get("uu_app_workspace_role_management_verify_ssl"),
      requestTimeout: Config.get("uu_app_workspace_authorization_timeout")
    });

    this._baseUrl = workspaceOpts.get("baseUrl");
    this._serviceName = serviceName;
    this._client = new AppClient.AppClient({
      verifySsl: workspaceOpts.getBoolean("verifySsl", true),
      requestTimeout: workspaceOpts.getNumber("requestTimeout", DEFAULT_AUTHORIZATION_TIMEOUT) / 1000,
      interceptors: ADAPTER_INTERCEPTORS
    });
  }

  async get(useCase, objectUri, params = null, session = null) {
    if (params instanceof Session) {
      session = params;
      params = null;
    }
    let url = `${this._baseUrl}/${this._serviceName}/${useCase}`;
    let callToken = session ? await session.getCallToken(url) : null;
    if (!params) {
      params = {};
    }
    params["uesuri"] = objectUri;
    let headers = callToken ? { Authorization: callToken } : {};
    headers["accept"] = "application/json";

    let first = true;
    Object.keys(params).forEach(paramKey => {
      if (first) {
        url += `?${paramKey}=${params[paramKey]}`;
        first = false;
      } else {
        url += `&${paramKey}=${params[paramKey]}`;
      }
    });

    return await this._client.get(url, null, { headers: headers });
  }

  async post(useCase, objectUri, params = null, session = null) {
    if (params instanceof Session) {
      session = params;
      params = null;
    }
    let url = `${this._baseUrl}/${this._serviceName}/${useCase}`;
    let callToken = session ? await session.getCallToken(url) : null;
    url += `?uesuri=${objectUri}`;
    let headers = callToken ? { Authorization: callToken } : {};
    return await this._client.post(url, params, { headers });
  }
}

module.exports = UuOs8CmdAdapter;
