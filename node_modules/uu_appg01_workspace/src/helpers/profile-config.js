const BaseConfig = require("./base-config.js");
const { Validator } = require("uu_appg01_core-validation");
const Path = require("path");
const { Config } = require("uu_appg01_core-utils");
const {
  InvalidConfigurationError,
  MissingOrEmptyAsidLicenseOwnerList,
  TooManyAsidLicenseOwnerListEntries
} = require("../api/errors/startup-errors.js");
const { mergeProfiles } = require("./profile-merger.js");

const PROFILES_CONFIG_FILE = "profiles.json";
const PROFILE_CONFIG_PRIVILEGED_LABEL = "{asid}";
const DEFAULT_ASID_SYS_STATE_LIST = ["active", "restricted"];
const DEFAULT_AWID_SYS_STATE_LIST = ["active"];

class ProfileConfig extends BaseConfig {
  constructor() {
    super();
    this.profileList = null;
    this.ucProfileList = null;
    this.privilegedUserPermissionMap = null;
    this.validator = new Validator(Path.join(__dirname, this.VALIDATION_TYPES_RELATIVE_PATH));
  }

  // noinspection JSUnusedGlobalSymbols // Used at least by uuDevKit
  /**
   * Returns merged profiles.json of the application and all libraries.
   * @param {boolean} ignoreAsidLicenseOwnerListValidation Bypass validation of asidLicenseOwnerList when loading profiles
   * @returns {Object} Merged profile.json
   */
  getMergedProfiles(ignoreAsidLicenseOwnerListValidation) {
    if (!this.profileList) {
      this.loadProfilesConfig(ignoreAsidLicenseOwnerListValidation);
    }
    return this.mergedProfiles;
  }

  /**
   * return profiles
   * @returns {null|Array}
   */
  getProfiles() {
    if (!this.profileList) {
      this.loadProfilesConfig();
    }
    return this.profileList;
  }

  /**
   * return profiles
   * @returns {null|Array}
   */
  getPrivilegedProfiles(asid) {
    if (!this.privilegedUserPermissionMap) {
      this.loadProfilesConfig();
    }
    return this.privilegedUserPermissionMap[asid].profileList;
  }

  /**
   * return use case profiles
   * @param {String} ucName
   * @returns {Array}
   */
  getUseCaseProfiles(ucName) {
    if (this.ucProfileList[ucName]) {
      return this.ucProfileList[ucName].profileList;
    } else {
      return [];
    }
  }

  getUseCase(ucName) {
    return this.ucProfileList[ucName];
  }

  getDefaultAwidSysStateList() {
    return DEFAULT_AWID_SYS_STATE_LIST;
  }

  /**
   * check if call is privileged
   * @param {string} asid
   * @returns {boolean}
   */
  isPrivilegedCall(asid) {
    if (!this.privilegedUserPermissionMap) {
      this.loadProfilesConfig();
    }
    return Object.prototype.hasOwnProperty.call(this.privilegedUserPermissionMap, asid);
  }

  /**
   * return array of privileged profiles for specific user
   * @param {Object} asid
   * @param {String} uuId
   * @returns {Array}
   */
  getPrivilegedUserProfiles(asid, uuId) {
    let privilegedProfiles = this.privilegedUserPermissionMap[asid];
    if (!privilegedProfiles) {
      return [];
    } else {
      let permissions = privilegedProfiles["permissionMap"];
      if (permissions[uuId]) {
        return permissions[uuId];
      } else {
        return [];
      }
    }
  }

  /**
   * return array of privileged profiles for specific useCase
   * @param  {Object} asid
   * @param {String} ucName
   * @returns {Array}
   */
  getPrivilegedUseCaseProfiles(asid, ucName) {
    let ucs = this.privilegedUserPermissionMap[asid]["useCaseMap"];
    if (ucs[ucName]) {
      return ucs[ucName].profileList;
    } else {
      return [];
    }
  }

  getPrivilegedUseCase(asid, ucName) {
    let ucs = this.privilegedUserPermissionMap[asid]["useCaseMap"];
    return ucs[ucName];
  }

  /**
   * load mapped structure of profiles.json
   * @param {boolean} ignoreAsidLicenseOwnerListValidation Bypass validation of asidLicenseOwnerList when loading profiles
   */
  loadProfilesConfig(ignoreAsidLicenseOwnerListValidation = false) {
    // app profiles
    let applicationConfig = this.getAppConfig(PROFILES_CONFIG_FILE);
    // workspace profiles
    let workspaceConfig = this.getAppWorkspaceConfig(PROFILES_CONFIG_FILE);
    // library profiles
    let libraryConfigs = this.getLibraryConfigs(PROFILES_CONFIG_FILE);

    let profilesConfig = [applicationConfig, workspaceConfig, ...libraryConfigs];

    // validate
    profilesConfig.forEach(config => this._validateProfilesConfig(config));

    // merge
    profilesConfig = mergeProfiles(profilesConfig);

    this._configureDefaultSysStateList(profilesConfig);

    this.mergedProfiles = Object.assign({}, profilesConfig);

    this._mapAsidLicenseOwnerList(profilesConfig, ignoreAsidLicenseOwnerListValidation);
    this.profileList = profilesConfig["*"]["profileList"];
    this.ucProfileList = profilesConfig["*"]["useCaseMap"];
  }

  _validateProfilesConfig(profilesConfig) {
    let validationResult = this.validator.validate("profilesType", profilesConfig);
    if (!validationResult.isValid()) {
      throw new InvalidConfigurationError(
        PROFILES_CONFIG_FILE,
        JSON.stringify(validationResult.getValidationErrorMap())
      );
    }
  }

  /**
   * Configures default values for both asid and awid sys state list.
   * @param profilesConfig
   * @private
   */
  _configureDefaultSysStateList(profilesConfig) {
    // privileged profiles
    const privilegedUseCaseMap = profilesConfig[PROFILE_CONFIG_PRIVILEGED_LABEL].useCaseMap;
    Object.keys(privilegedUseCaseMap).forEach(useCaseName => {
      const useCase = privilegedUseCaseMap[useCaseName];
      if (!useCase.sysStateList) {
        useCase.sysStateList = DEFAULT_ASID_SYS_STATE_LIST;
      }
    });

    const useCaseMap = profilesConfig["*"].useCaseMap;
    Object.keys(useCaseMap).forEach(useCaseName => {
      const useCase = useCaseMap[useCaseName];
      if (!useCase.sysStateList) {
        useCase.sysStateList = DEFAULT_AWID_SYS_STATE_LIST;
      }
    });
  }

  _mapAsidLicenseOwnerList(profileConfig, ignoreAsidLicenseOwnerListValidation) {
    let asid = Config.get("asid");
    let asidLicenseOwnerList = Config.getArray("asid_license_owner_list");

    if (ignoreAsidLicenseOwnerListValidation) {
      if (!asidLicenseOwnerList) {
        asidLicenseOwnerList = [];
      }
    } else {
      if (!asidLicenseOwnerList || !asidLicenseOwnerList.length) {
        throw new MissingOrEmptyAsidLicenseOwnerList();
      } else if (asidLicenseOwnerList.length > 5) {
        throw new TooManyAsidLicenseOwnerListEntries();
      }
    }

    profileConfig[asid] = profileConfig[PROFILE_CONFIG_PRIVILEGED_LABEL];
    delete profileConfig[PROFILE_CONFIG_PRIVILEGED_LABEL];
    profileConfig[asid].permissionMap = [];
    asidLicenseOwnerList.forEach(item => {
      profileConfig[asid].permissionMap[item] = ["AsidLicenseOwner"];
    });

    this.privilegedUserPermissionMap = {};
    this.privilegedUserPermissionMap[asid] = profileConfig[asid];
  }

  get PROFILES_CONFIG_FILE() {
    return PROFILES_CONFIG_FILE;
  }
}

module.exports = new ProfileConfig();
