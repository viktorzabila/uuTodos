const path = require("path");
const { Config, OptsReader, Finder } = require("uu_appg01_core-utils");

const { InvalidDeploymentConfigError, FileNotFoundError, InvalidKeyError } = require("../api/errors/startup-errors.js");

const APP_FOLDER = "app";
const DEFAULT_CONFIG_FOLDER = "config";
const VALIDATION_TYPES_RELATIVE_PATH = "../api/validation_types/config-types.js";

class BaseConfig {
  constructor() {
    this._opts = new OptsReader(Config);
  }

  /**
   * load profiles.json from configuration
   * @returns {json}
   */
  getAppConfig(filename, configFolder) {
    const root = this._opts.get("server_root", process.cwd());
    configFolder = configFolder || DEFAULT_CONFIG_FOLDER;

    let configPath = Finder.findConfigInProject(root, `{app,src,}/${configFolder}/${filename}`);
    if (!configPath) {
      configPath = path.join(root, APP_FOLDER, configFolder, filename);
    }

    return this._getConfig(configPath);
  }

  getAppWorkspaceConfig(filename, configFolder) {
    configFolder = configFolder || DEFAULT_CONFIG_FOLDER;
    let configPath = path.resolve(__dirname, "..", configFolder, filename);

    return this._getConfig(configPath);
  }

  getLibraryConfigs(filename) {
    const root = this._opts.get("server_root", process.cwd());
    let filePaths = Finder.findConfigInModules(root, `{app,src,}/config/${filename}`);

    // exclude self
    const selfRegExp = new RegExp(`^${path.resolve(__dirname, "..", "..").replace(/\\/g, "\\\\")}`);
    filePaths = filePaths.filter(p => !selfRegExp.test(p));

    return filePaths.map(p => this._getConfig(p));
  }

  _getConfig(configPath) {
    try {
      return require(configPath);
    } catch (err) {
      if (err.code === "MODULE_NOT_FOUND") {
        throw new FileNotFoundError(configPath, err);
      } else {
        throw new InvalidDeploymentConfigError(err);
      }
    }
  }

  /**
   * check in recursion if object contain specific key
   * @param {Object} hash
   * @param {String} key
   * @param {boolean} res
   * @returns {boolean}
   * @private
   */
  _keyExists(hash, key, res = false) {
    for (const k in hash) {
      if (k === key) {
        res = true;
        break;
      }

      if (typeof hash[k] === "object") {
        res = this._keyExists(hash[k], key, res);
      }
    }

    return res;
  }

  get DEFAULT_CONFIG_FOLDER() {
    return DEFAULT_CONFIG_FOLDER;
  }

  get VALIDATION_TYPES_RELATIVE_PATH() {
    return VALIDATION_TYPES_RELATIVE_PATH;
  }
}

module.exports = BaseConfig;
