class UuOs8UriHelper {
  constructor() {
    this.START_FLAG = "ues:";
  }

  /**
   * return canonical uri
   * @param {String} uesUri
   * @returns {string}
   */
  getCanonicalUri(uesUri) {
    let parsedUri = this.parseUesUri(uesUri);
    return `${this.START_FLAG}[${parsedUri[1]}]:[${parsedUri[3]}]`;
  }

  /**
   * return territory id from uri
   * @param {String} uesUri
   * @returns {*}
   */
  getTerritoryId(uesUri) {
    return this.parseUesUri(uesUri)[1];
  }

  /**
   * return territory code from uri
   * @param {String} uesUri
   * @returns {*}
   */
  getTerritoryCode(uesUri) {
    return this.parseUesUri(uesUri)[0];
  }

  isNullUri(uesUri) {
    if (uesUri === null) {
      return false;
    }
    let res = uesUri.match(/ues:\w*\[-1\]:\w*\[-1\]/);
    return res !== null;
  }

  /**
   * compare two uris
   * @param uesUri1
   * @param uesUri2
   * @returns {boolean}
   */
  equalUris(uesUri1, uesUri2) {
    if (uesUri1.constructor !== uesUri2.constructor) {
      return false;
    }
    if (!uesUri1.startsWith(this.START_FLAG) || !uesUri2.startsWith(this.START_FLAG)) {
      return false;
    }

    let parsed1 = this.parseUesUri(uesUri1);
    let parsed2 = this.parseUesUri(uesUri2);

    if (parsed1.length !== parsed2.length) {
      return false;
    }

    return (
      this._equalUriPart(parsed1[0], parsed1[1], parsed2[0], parsed2[1]) &&
      this._equalUriPart(parsed1[2], parsed1[3], parsed2[2], parsed2[3])
    );
  }

  /**
   * check if Oid is set
   * @param {String} uesUri
   * @returns {boolean}
   */
  isOidSet(uesUri) {
    return this.isNormalizedUri(uesUri) || this.isCanonicalUri(uesUri);
  }

  /**
   * check if uri is normalized
   * @param {String} uesUri
   * @returns {boolean}
   */
  isNormalizedUri(uesUri) {
    if (!uesUri.startsWith(this.START_FLAG)) {
      return false;
    }

    let attrArr = this.parseUesUri(uesUri);
    return attrArr.length === 4 && !attrArr.includes(null);
  }

  /**
   * check if uri is cannonical
   * @param {String} uesUri
   * @returns {boolean}
   */
  isCanonicalUri(uesUri) {
    if (!uesUri.startsWith(this.START_FLAG)) {
      return false;
    }
    let attrArr = this.parseUesUri(uesUri);
    return attrArr.length === 4 && attrArr[0] === null && attrArr[2] === null;
  }

  /**
   * parse ues uri
   * @param {String} uesUri
   * @returns {Array}
   */
  parseUesUri(uesUri) {
    let res = [];
    let splits = uesUri.split(":").filter(String);
    if (splits.length !== 3) {
      return res; // it has to be [ues, territory_split, artifact_split]
    }
    let territorySplit = splits[1];
    res = res.concat(this.parseSplit(territorySplit));
    let artifactSplit = splits[2];
    res = res.concat(this.parseSplit(artifactSplit));

    return res;
  }

  /**
   * parse territory and artifact
   * @param {String} split
   * @returns {Array}
   */
  parseSplit(split) {
    let leftBrace = split.indexOf("[");
    let rightBrace = split.indexOf("]");
    let res = [];

    if (leftBrace !== -1) {
      if (leftBrace > 0) {
        res.push(split.slice(0, leftBrace));
      } else {
        res.push(null);
      }
      res.push(split.slice(leftBrace + 1, rightBrace - leftBrace + leftBrace));
    } else {
      res.push(split);
      res.push(null);
    }
    return res;
  }

  /**
   * compare uri parts
   * @param {String} code1
   * @param {String} id1
   * @param {String} code2
   * @param {String} id2
   * @returns {boolean}
   * @private
   */
  _equalUriPart(code1, id1, code2, id2) {
    if (id1 != null && id2 != null) {
      return id1 === id2;
    } else if (code1 != null && code2 != null) {
      return code1 === code2;
    } else {
      return false;
    }
  }
}

module.exports = new UuOs8UriHelper();
