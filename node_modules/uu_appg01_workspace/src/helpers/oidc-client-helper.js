"use strict";
const { Config } = require("uu_appg01_core-utils");
const { ValidationHelper, UseCaseContext } = require("uu_appg01_core-appserver");
const { Uri } = require("uu_appg01_core-uri");
const { AppClient } = require("uu_appg01_core-appclient");

const PARAM_INIT_OIDC_CLIENT = "uu_app_workspace_init_oidc_client";
const INIT_OIDC_CLIENT_ENDPOINT = "oidc/initOidcClient";

class OidcClientHelper {

  static async initOidcClient(awid, uuAppErrorMap, logger) {
    // Check if OidcClient should be initialized...
    let initOidcClient = Config.getBoolean(PARAM_INIT_OIDC_CLIENT, false);
    if (initOidcClient === null || initOidcClient === undefined) {
      if (Config.isProfileActive("test", "development")) {
        // ... by default disabled in testing/localhost environment
        initOidcClient = false;
      } else {
        // ... and enabled on "production" environment (including
        // testing instances deployed to uuCloud)
        initOidcClient = true;
      }
    }
    if (!initOidcClient) {
      logger.debug(`Implicit initialization of OidcClient is disabled. Use configuration parameter ${PARAM_INIT_OIDC_CLIENT} to enable it.`);
      return;
    }

    if (!UseCaseContext.isAvailable()) {
      logger.debug("Unable to invoke implicit initialization of OidcClient, initAppWorkspace was not called within scope of request.");
      return;
    }
    let uri = UseCaseContext.getUri();
    let session = UseCaseContext.getSession();
    if (!uri || !session) {
      logger.debug("Unable to invoke implicit initialization of OidcClient, initAppWorkspace was not called within scope of request.");
      return;
    }
    let result;
    try {
      let baseUri = Uri.parse(uri).getBaseUri();
      let callToken = await session.getCallToken(baseUri, { useTokenExchange: false });
      let opts = { baseUri, headers: { authorization: callToken }, verifySsl: false };
      result = await new AppClient(opts).post(INIT_OIDC_CLIENT_ENDPOINT, { awid });
    } catch (e) {
      logger.warn("Implicit initialization of OidcClient failed.", e);
      ValidationHelper.addWarning(uuAppErrorMap, e.code, e.message, e.paramMap);
    }
    if (result && result.uuAppErrorMap) {
      Object.assign(uuAppErrorMap, result.uuAppErrorMap);
    }
  }

}

module.exports = OidcClientHelper;
