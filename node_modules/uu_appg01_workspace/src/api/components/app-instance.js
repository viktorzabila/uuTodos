"use strict";

const { Config, OptsReader } = require("uu_appg01_core-utils");
const { AuthorizationResult } = require("uu_appg01_core-authorization");

const AppInstanceAbl = require("../../abl/sys-app-instance-abl");
const SysDumpRestoreAbl = require("../../abl/sys-dump-restore-abl");
const SysUpgradeAbl = require("../../abl/sys-upgrade-abl");

class AppInstance {
  constructor() {
    const opts = new OptsReader(Config);
    this._enabled = opts.getBoolean("uu_app_workspace_asid_sys_state_verification_enabled", true);
    this._uveEnabled = opts.getBoolean("uu_app_workspace_asid_sys_state_uve_verification_enabled", true);
    this._cmdEnabled = opts.getBoolean("uu_app_workspace_asid_sys_state_cmd_verification_enabled", true);
    this.SYS_STATES = AppInstanceAbl.SYS_STATES;
  }

  /**
   * Initializes system schemas (SysAppInstance) of application server.
   *
   * @param {Object} dtoIn attributes same as sys/uuSubAppInstance/init uuCmd
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async init(dtoIn = {}) {
    return await AppInstanceAbl.init({
      asid: Config.get("asid"),
      dtoIn,
      authorizationResult: new AuthorizationResult({ authorizationEnabled: false }),
      uuIdentity: dtoIn.adviceNote ? dtoIn.adviceNote.uuIdentity : null
    });
  }

  /**
   * Sets asid to active sysState
   *
   * @param {Object} [adviceNote] note about current awid sysState
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async setActiveSysState(adviceNote = {}) {
    const asid = Config.get("asid");
    return await AppInstanceAbl.setActiveSysState(asid, { adviceNote }, adviceNote.uuIdentity);
  }

  /**
   * Sets asid to restricted sysState
   *
   * @param {Object} [adviceNote] note about current awid sysState
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async setRestrictedSysState(adviceNote = {}) {
    const asid = Config.get("asid");
    return await AppInstanceAbl.setRestrictedSysState(asid, { adviceNote }, adviceNote.uuIdentity);
  }

  /**
   * Gets properties of uuAppInstance
   *
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async get() {
    const asid = Config.get("asid");
    return await AppInstanceAbl.get(asid);
  }

  /**
   * Sets basic properties of uuAppInstance like name and description.
   *
   * @param {Object} dtoIn attributes to set according to sys/uuSubAppInstance/set uuCmd
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async set(dtoIn) {
    const asid = Config.get("asid");
    return await AppInstanceAbl.set(asid, dtoIn, dtoIn.adviceNote ? dtoIn.adviceNote.uuIdentity : null);
  }

  /**
   * Gets a value of SysAppInstance uuObject for given key.
   *
   * @param {string} key attribute of sysAppInstance uuObject to be read
   * @returns {Promise<*>} value of attribute in sysAppInstance. null if not found
   */
  async getConfigParameter(key) {
    const asid = Config.get("asid");
    return await AppInstanceAbl.getConfigParameter(asid, key);
  }

  /**
   * Sets a value of SysAppInstance uuObject for given key.
   *
   * @param {string} key attribute of sysAppInstance uuObject to be read
   * @param {*} value value of given attribute
   * @returns {Promise<Object>} uuObject sysAppInstance
   */
  async setConfigParameter(key, value) {
    const asid = Config.get("asid");
    return await AppInstanceAbl.setConfigParameter(asid, key, value);
  }

  /**
   * Performs a dump of schemas in uuAppDataStore.
   * Based on the dtoIn.awidList the whole ASID (all OSID and BSID) is dumped or just AWIDs from dtoIn.awidList.
   *
   * @param {string[]} [awidList] awid codes to be dumped, if not provided whole asid will be dumped
   * @returns {Promise<*>} dump binary data stream
   */
  async dump(awidList) {
    return await SysDumpRestoreAbl.dump({ awidList });
  }

  /**
   * Restores uuAppDataStore schemas. If awidList is given, it restores schemas only of awids from the list,
   * but only if the dump was done with awidList specified as well.
   *
   * @param {Boolean} [strictMode] If the strict mode is true and an error occurs, the exception is thrown immediately
   *     when failed to insert an object to schema. If the strict mode is false, system continues even if an error occurs
   *     and all errors are returned in dtoOut.uuAppErrorMap after the whole process. (default value is true)
   * @param {string[]} [awidList] list of awids to be restored.
   * @param {*} data uuAppDataStore dump
   * @returns {Promise<Object>} uuAppErrorMap
   */
  async restore(strictMode, awidList, data) {
    return await SysDumpRestoreAbl.restore({ strictMode, awidList, data });
  }

  /**
   * Upgrades persistent data and schemas.
   *
   * @param {string} uuAppProfileAsidAuthorities uri of uuAppProfile AsidAuthorities roleInterface
   * @param {string} [uuAppProfileAuthorities] uri of uuAppProfile Authorities roleInterface.
   *     This parameter is optional if the application has already configured profile "Authorities".
   * @returns {Promise<Object>} state and message
   */
  async upgrade(uuAppProfileAsidAuthorities, uuAppProfileAuthorities) {
    return await SysUpgradeAbl.upgrade({ uuAppProfileAsidAuthorities, uuAppProfileAuthorities });
  }

  /**
   * Checks if Asid sysState verification is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateVerificationEnabled() {
    return this._enabled;
  }

  /**
   * Checks if Asid sysState verification for Uve is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateUveVerificationEnabled() {
    return this._uveEnabled;
  }

  /**
   * Checks if Asid sysState verification for uuCommands is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateCmdVerificationEnabled() {
    return this._cmdEnabled;
  }
}

module.exports = new AppInstance();
