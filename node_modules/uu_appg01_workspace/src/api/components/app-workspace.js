"use strict";

const { Config, OptsReader } = require("uu_appg01_core-utils");
const { AuthorizationResult } = require("uu_appg01_core-authorization");

const AppWorkspaceAbl = require("../../abl/sys-app-workspace-abl");
const SysDumpRestoreAbl = require("../../abl/sys-dump-restore-abl");

class AppWorkspace {
  constructor() {
    const opts = new OptsReader(Config);
    this._enabled = opts.getBoolean("uu_app_workspace_awid_sys_state_verification_enabled", true);
    this._uveEnabled = opts.getBoolean("uu_app_workspace_awid_sys_state_uve_verification_enabled", true);
    this._cmdEnabled = opts.getBoolean("uu_app_workspace_awid_sys_state_cmd_verification_enabled", true);
    this.SYS_STATES = AppWorkspaceAbl.SYS_STATES;
  }

  /**
   * Creates uuAppWorkspace, sets its state to "created" so it is ready for initialization.
   *
   * @param dtoIn attributes same as sys/uuAppWorkspace/create uuCmd
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async create(dtoIn = {}) {
    return await AppWorkspaceAbl.create({
      dtoIn,
      authzResult: new AuthorizationResult({ authorizationEnabled: false }),
      uuIdentity: dtoIn.adviceNote ? dtoIn.adviceNote.uuIdentity : null
    });
  }

  /**
   * Sets awid to active sysState
   *
   * @param {string} awid awid
   * @param {Object} [adviceNote] note about current awid sysState
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async setActiveSysState(awid, adviceNote = {}) {
    return await AppWorkspaceAbl.setActiveSysState(awid, { adviceNote }, adviceNote.uuIdentity);
  }

  /**
   * Sets awid to restricted sysState
   *
   * @param {string} awid awid
   * @param {Object} [adviceNote] note about current awid sysState
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async setRestrictedSysState(awid, adviceNote = {}) {
    return await AppWorkspaceAbl.setRestrictedSysState(awid, { adviceNote }, adviceNote.uuIdentity);
  }

  /**
   * Sets awid to readOnly sysState
   *
   * @param {string} awid awid
   * @param {Object} [adviceNote] note about current awid sysState
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async setReadOnlySysState(awid, adviceNote = {}) {
    return await AppWorkspaceAbl.setReadOnlySysState(awid, { adviceNote }, adviceNote.uuIdentity);
  }

  /**
   * Sets awid to suspended sysState
   *
   * @param {string} awid awid
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async suspend(awid) {
    return await AppWorkspaceAbl.suspend({ awid });
  }

  /**
   * Sets uuAppWorkspace to the one of the active sysStates (active/restricted/readOnly) that was set before the suspension.
   *
   * @param {string} awid awid
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async resume(awid) {
    return await AppWorkspaceAbl.resume({ awid });
  }

  /**
   * Sets uuAppWorkspace to the closed state.
   *
   * @param {string} awid awid
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async close(awid) {
    return await AppWorkspaceAbl.close({ awid });
  }

  /**
   * Deletes the uuAppWorkspace.
   *
   * @param {string} awid awid
   * @returns {Promise}
   */
  async delete(awid) {
    return await AppWorkspaceAbl.delete({ awid });
  }

  /**
   * Provides information about an application workspace.
   *
   * @param {string} awid awid
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async get(awid) {
    return await AppWorkspaceAbl.get(awid);
  }

  /**
   * Sets basic properties of uuAppWorkspace like name and description.
   *
   * @param {string} awid awid
   * @param {Object} dtoIn attributes to set according to sys/uuAppWorkspace/set uuCmd
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async set(awid, dtoIn) {
    return await AppWorkspaceAbl.set(awid, dtoIn, dtoIn.adviceNote ? dtoIn.adviceNote.uuIdentity : null);
  }

  /**
   * List information about uuAppWorkspaces.
   *
   * @param {Object} dtoIn attributes to set according to sys/uuAppWorkspace/list uuCmd
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async list(dtoIn = {}) {
    return await AppWorkspaceAbl.list(dtoIn);
  }

  /**
   * Sets authorization strategy of the uuAppWorkspace.
   *
   * @param {uri} uri uri of the application
   * @param {Object} dtoIn dtoIn attributes to set according to sys/uuAppWorkspace/setAuthorizationStrategy uuCmd
   * @param {Object} session authentication session
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async setAuthorizationStrategy(uri, dtoIn, session) {
    return await AppWorkspaceAbl.setAuthorizationStrategy(uri, dtoIn, session);
  }

  /**
   * Connects the uuBT artifact into the uuAppWorkspace.
   *
   * @param {uri} uri uri of the application
   * @param {Object} dtoIn dtoIn attributes to set according to sys/uuAppWorkspace/connectArtifact uuCmd
   * @param {Object} session authentication session
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async connectArtifact(uri, dtoIn, session) {
    return await AppWorkspaceAbl.connectArtifact(uri, dtoIn, session);
  }

  /**
   * Gets a value of SysAppWorkspace uuObject for given key.
   *
   * @param {string} awid awid
   * @param {string} key attribute of sysAppWorkspace uuObject to be read
   * @returns {Promise<*>} value of attribute in sysAppWorkspace. null if not found
   */
  async getConfigParameter(awid, key) {
    return await AppWorkspaceAbl.getConfigParameter(awid, key);
  }

  /**
   * Sets a value of SysAppWorkspace uuObject for given key.
   *
   * @param {string} awid awid
   * @param {string} key attribute of sysAppWorkspace uuObject to be read
   * @param {*} value value of given attribute
   * @returns {Promise<Object>} uuObject sysAppWorkspace
   */
  async setConfigParameter(awid, key, value) {
    return await AppWorkspaceAbl.setConfigParameter(awid, key, value);
  }

  /**
   * Creates dump of uuAppDataStore schemas of the selected AWID.
   *
   * @param {string} awid
   * @returns {Promise<*>} dump binary data stream
   */
  async dump(awid) {
    return await SysDumpRestoreAbl.awidDump(awid);
  }

  /**
   * Restores uuAppDataStore schemas based on provided AWID dump.
   *
   * @param {Boolean} [strictMode] If the strict mode is true and an error occurs, the exception is thrown immediately
   *     when failed to insert an object to schema. If the strict mode is false, system continues even if an error occurs
   *     and all errors are returned in dtoOut.uuAppErrorMap after the whole process. (default value is true)
   * @param {string} awid to be restored
   * @param {*} data uuAppDataStore dump
   * @returns {Promise<Object>} uuAppErrorMap
   */
  async restore(strictMode, awid, data) {
    return await SysDumpRestoreAbl.awidRestore(awid, {
      strictMode,
      data
    });
  }

  /**
   * Imports data obtained from sys/dump or sys/awidDump for one awid. Changes all awid fields in database to a desired value,
   * recreates ObjectIds for all database entries and creates a schema mapping newly created ObjectIds to original ObjectIds.
   *
   * @param {string} awid to import data to
   * @param {*} data uuAppDataStore dump
   * @returns {Promise<Object>} uuAppErrorMap
   */
  async import(awid, data) {
    return await SysDumpRestoreAbl.import(awid, { data });
  }

  /**
   * List ObjectId mappings created by sys/import.
   *
   * @param {string} awid
   * @param {Object} dtoIn attributes same as sys/uuAppWorkspace/listImportMappings uuCmd
   * @returns {Promise<Object>} itemList and pageInfo
   */
  async listImportMappings(awid, dtoIn) {
    return await SysDumpRestoreAbl.listImportMappings(awid, dtoIn);
  }

  /**
   * Deletes ObjectIds relations (created in sys/import) for one awid.
   *
   * @param awid
   * @returns {Promise<Object>} uuAppErrorMap
   */
  async deleteImportMappings(awid) {
    return await SysDumpRestoreAbl.deleteImportMappings(awid);
  }

  /**
   * Provides information about a license owner of a uuAppWorkspace.
   *
   * @param awid
   * @returns {Promise<Object>} awidLicenseOwnerList
   */
  async getLicenseOwner(awid) {
    return await AppWorkspaceAbl.getLicenseOwner(awid);
  }

  /**
   * Checks if Awid sysState verification is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateVerificationEnabled() {
    return this._enabled;
  }

  /**
   * Checks if Awid sysState verification for Uve is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateUveVerificationEnabled() {
    return this._uveEnabled;
  }

  /**
   * Checks if Awid sysState verification for uuCommands is enabled.
   * @returns {Boolean} true if enabled
   */
  isSysStateCmdVerificationEnabled() {
    return this._cmdEnabled;
  }
}

module.exports = new AppWorkspace();
