"use strict";

const SysAppDataStoreAbl = require("../../abl/sys-app-data-store-abl");
const SysAppDataStoreStatsAbl = require("../../abl/sys-app-data-store-stats-abl");

class AppDataStore {

  /**
   * Deletes all data (and optionally also indexes) in all collections in all uuSubAppDatastores (OSID/BSID) in given uuSubApp.
   * Drop can be limited to specific datastores.
   *
   * @param {string[]} [dataStoreNames] Names of the uuSubAppDataStores to drop. If left empty, all uuSubAppDataStores will be dropped.
   * @param {Boolean} [recreateIndexes] If true, for each configured DAO the method createSchema will be called after drop process finishes. Defaults to true.
   * @returns {Promise<Object>} droppedDataStores
   */
  async drop(dataStoreNames, recreateIndexes) {
    return await SysAppDataStoreAbl.dropDataStore({ dataStoreNames, recreateIndexes });
  }

  /**
   * Calculates information on a data store usage for a given workspace.
   *
   * @param {string} awid awid
   * @param {Boolean} force If true, calculate even if last calculation has finished "recently"
   * @returns {Promise<Object>}
   */
  async calculateStats(awid, force) {
    return await SysAppDataStoreStatsAbl.calculate(awid, { force });
  }

  /**
   * Returns detailed information on data stores usage for a given workspace.
   *
   * @param {string} awid awid
   * @returns {Promise<Object>}
   */
  async getStats(awid) {
    return await SysAppDataStoreStatsAbl.get(awid);
  }

  /**
   * Returns detailed information on data stores usage for a given workspace.
   *
   * @param {Object} awid attributes same as sys/uuAppDataStore/stats/list uuCmd
   * @returns {Promise<Object>}
   */
  async listStats(dtoIn) {
    return await SysAppDataStoreStatsAbl.list(dtoIn);
  }

}

module.exports = new AppDataStore();
