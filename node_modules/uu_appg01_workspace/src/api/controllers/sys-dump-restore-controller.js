"use strict";

const dumpRestoreAbl = require("../../abl/sys-dump-restore-abl.js");

class SysDumpRestoreController {
  async dump(ucEnv) {
    const dtoIn = ucEnv.getDtoIn();
    const data = await dumpRestoreAbl.dump(dtoIn);
    const filename = `uuAppDataStoreDump_${new Date()
      .toISOString()
      .split("T")[0]
      .replace(/-/g, "_")}.zip`;
    return ucEnv.getResponse().setBinaryBody(data, { filename, contentType: "application/zip" });
  }

  async restore(ucEnv) {
    return await dumpRestoreAbl.restore(ucEnv.getDtoIn());
  }

  async awidDump(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const data = await dumpRestoreAbl.awidDump(awid);
    const filename = `uuAppDataStoreDump_${new Date()
      .toISOString()
      .split("T")[0]
      .replace(/-/g, "_")}.zip`;

    return ucEnv.getResponse().setBinaryBody(data, { filename, contentType: "application/zip" });
  }

  async awidRestore(ucEnv) {
    const uri = ucEnv.uri;
    const dtoIn = ucEnv.getDtoIn();
    return await dumpRestoreAbl.awidRestore(uri.getAwid(), dtoIn);
  }

  import(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    return dumpRestoreAbl.import(awid, dtoIn);
  }

  deleteImportMappings(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    return dumpRestoreAbl.deleteImportMappings(awid);
  }

  listImportMappings(ucEnv) {
    const awid = ucEnv.uri.getAwid();
    const dtoIn = ucEnv.getDtoIn();
    return dumpRestoreAbl.listImportMappings(awid, dtoIn);
  }
}

module.exports = new SysDumpRestoreController();
