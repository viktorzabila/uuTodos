const { BaseError } = require("uu_appg01_core-utils");

module.exports = {
  InvalidDeploymentConfigError: class extends BaseError {
    constructor(cause) {
      super("Deployment configuration is not valid. It is not possible to read deployment configuration.", cause);
    }
  },

  InvalidKeyError: class extends BaseError {
    constructor(filename, keys, cause) {
      if (Array.isArray(keys)) keys = keys.join(",");
      let msg = filename
        ? `Deployment configuration "${filename}" is not valid. Required key "(${keys})" is not valid or missing.`
        : `Deployment configuration is not valid. Required key "(${keys})" is not valid or missing.`;
      super(msg, cause);
    }
  },

  InvalidConfigurationError: class extends BaseError {
    constructor(filename, uuAppErrorMap, cause) {
      let msg = `Deployment configuration "${filename}" is not valid: ${uuAppErrorMap}.`;
      super(msg, cause);
    }
  },

  MissingOrEmptyAsidLicenseOwnerList: class extends BaseError {
    constructor(filename, uuAppErrorMap, cause) {
      let msg = `Configuration parameter asid_license_owner_list is missing or empty.`;
      super(msg, cause);
    }
  },

  TooManyAsidLicenseOwnerListEntries: class extends BaseError {
    constructor(filename, uuAppErrorMap, cause) {
      let msg = `Configuration parameter asid_license_owner_list can contain maximum of 5 uuIds.`;
      super(msg, cause);
    }
  },

  FileNotFoundError: class extends BaseError {
    constructor(filepath, cause) {
      super(`Deployment configuration is not valid. Required file "${filepath}" cannot be found.`, cause);
    }
  },

  ProfilesMergeDuplicateKeyError: class extends BaseError {
    constructor(key, cause) {
      super(
        `Deployment configuration is not valid. ` +
          `Default value of key: ${key} is declared by multiple libraries. ` +
          `Application configuration may be used to override the conflicting key.`,
        cause
      );
    }
  },

  MasterKeyDoesNotExistError: class extends BaseError {
    constructor(activeSlot) {
      let msg = `Deployment configuration is not valid. uuAppSecretStore encryption is enabled but masterKey1 or masterKey2 do not exist in configuration. Active slot = ${activeSlot}.`;
      super(msg);
    }
  },

  InvalidMasterKeyLengthError: class extends BaseError {
    constructor(activeSlot) {
      let msg = `Deployment configuration is not valid. uuAppSecretStore Master keys must have a minimum length of 32 bytes. Active slot = ${activeSlot}.`;
      super(msg);
    }
  },

  SysKeyStoreCollectionUpgradeError: class extends BaseError {
    constructor(cause) {
      let msg = "Upgrading of collection from sysKeyStore to sysUuAppSecretStore was not successfull.";
      super(msg, cause);
    }
  },
};
