"use strict";

const { Config } = require("uu_appg01_core-utils");
const { UriBuilder } = require("uu_appg01_core-uri");
const { Perflog } = require("uu_appg01_core-perflog");
const Authz = require("uu_appg01_core-authorization");
const AppServer = require("uu_appg01_core-appserver");
const WorkspaceAuthorizationService = require("../workspace-authorization-service.js");

const SysAppWorkspaceError = require("../api/errors/sys-app-workspace-errors.js");

const MIDDLEWARE_ORDER = 50;
const PARAM_UNPROTECTED_REGEXP = "uu_app_authorization_unprotected_uri_regexp";
const PARAM_LOCALHOST_UNPROTECTED_REGEXP = "uu_app_authorization_localhost_unprotected_uri_regexp";

const DEFAULT_UNPROTECTED_REGEXP = ".^";
const DEFAULT_LOCALHOST_UNPROTECTED_REGEXP = "/sys/getHealth(\\?|$)";

const CMD = "CMD";
const VUC = "VUC";
const UVE = "UVE";
const APPLICATION_JSON = "application/json";
const TEXT_HTML = "text/html";

class AuthorizationMiddleware {
  constructor() {
    this.name = "Authorization Handler";
    this.order = MIDDLEWARE_ORDER;
    let customUnprotectedRegexp = Config.get(PARAM_UNPROTECTED_REGEXP);
    this._unprotectedRegexp = new RegExp(customUnprotectedRegexp || DEFAULT_UNPROTECTED_REGEXP);
    let localhostUnprotectedRegexp = Config.get(PARAM_LOCALHOST_UNPROTECTED_REGEXP);
    this._localhostUnprotectedRegexp = new RegExp(localhostUnprotectedRegexp || DEFAULT_LOCALHOST_UNPROTECTED_REGEXP);
  }

  async pre(req, res, next) {
    let authorizationUri = res.locals.uri;

    if (this._unprotectedRegexp.test(req.path)
      || (authorizationUri.getHostname() === "localhost" && this._localhostUnprotectedRegexp.test(authorizationUri.toString()))) {
      // Authorization disabled for this use case, do not authorize
      let emptyResult = new Authz.AuthorizationResult({authorizationEnabled: false});
      AppServer.UseCaseContext.setAuthorizationResult(emptyResult);
      res.locals.authorizationResult = emptyResult;
      return next();
    } else {
      let useCase = res.locals.ucProperties;
      let ucType = useCase.getType();
      let accept = req.headers.accept || "";
      if ((ucType == UVE || ucType == VUC) && !accept.includes(APPLICATION_JSON)) {
        // Standard invocation of UVE, do not authorize
        let emptyResult = new Authz.AuthorizationResult();
        AppServer.UseCaseContext.setAuthorizationResult(emptyResult);
        res.locals.authorizationResult = emptyResult;
        return next();
      }
      let session = res.locals.session;

      // TODO UseCase of authorization uri must contain UseCaseName which is used for profiles configuration (it may be different from request uri due rest parameters support).
      // This should be replaced with extended authorization service API.
      if (authorizationUri.getUseCase() != useCase.getName()) {
        authorizationUri = UriBuilder.parse(authorizationUri).setUseCase(useCase.getName()).toUri();
      }
      let authzResult = null;
      try {
        await Perflog.measureSection("UU_APP_WORKSPACE_AUTHORIZE", async section => {
          try {
            authzResult = await WorkspaceAuthorizationService.authorize(session, authorizationUri);
          } catch (e) {
            if (e instanceof SysAppWorkspaceError.Get.SysUuAppWorkspaceDoesNotExistError) {
              throw new AppServer.AccessDenied(null, e.message, e);
            }
            throw new AppServer.AuthorizationFailure(e.message, e);
          }
          if (!authzResult.isAuthorized()) {
            throw new AppServer.AccessDenied(authzResult, "Logged user is not authorized to run use case.");
          }
        });
      } catch (e) {
        return next(e);
      }
      AppServer.UseCaseContext.setAuthorizationResult(authzResult);
      res.locals.authorizationResult = authzResult;
      return next();
    }
  }
}

module.exports = AuthorizationMiddleware;
