"use strict";

const { Config } = require("uu_appg01_core-utils");
const { RouteRegister } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory } = require("uu_appg01_datastore");

const AppInstanceComponent = require("./../api/components/app-instance");
const AppInstanceErrors = require("../api/errors/sys-app-instance-errors");
const ErrorPageHelper = require("../helpers/error-page-helper");

const MIDDLEWARE_ORDER = 20;
const INIT_UVE = "sys/uuSubAppInstance/initUve";

class AppInstanceMiddleware {
  constructor() {
    this.logger = LoggerFactory.get("AppInstanceMiddleware");
    this.name = "App Instance Handler";
    // noinspection JSUnusedGlobalSymbols
    this.order = MIDDLEWARE_ORDER;
    this.asid = Config.get("asid");
    this.asidLicenseOwnerList = Config.get("asid_license_owner_list");
    this.isDataStoreOn = DaoFactory.isDataStoreOn();
  }

  async pre(req, res, next) {
    if (!this.isDataStoreOn) {
      return next();
    }

    const uri = res.locals.uri;
    const isUve = RouteRegister.isUve(uri.getUseCase(), uri.getProduct(), req.method.toUpperCase());
    if (isUve) {
      try {
        await AppInstanceComponent.get(this.asid);
      } catch (e) {
        if (e instanceof AppInstanceErrors.Get.SysUuSubAppInstanceDoesNotExistError) {
          if (RouteRegister.get(INIT_UVE, uri.getProduct(), req.method.toUpperCase())) {
            e.paramMap = e.paramMap || {};
            e.paramMap.asidLicenseOwnerList = this.asidLicenseOwnerList;
            return ErrorPageHelper.redirectToCustomErrorPage(next, req, res, INIT_UVE, e);
          } else {
            return await ErrorPageHelper.respondWithErrorPage({
              res,
              viewFile: "app-instance-error-page.ejs",
              params: { errorId: e.id, errorMessage: e.message },
              error: e
            });
          }
        }
      }
    }
    return next();
  }
}

module.exports = AppInstanceMiddleware;
