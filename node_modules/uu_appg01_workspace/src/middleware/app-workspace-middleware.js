"use strict";

const { Config } = require("uu_appg01_core-utils");
const { Uri, UriBuilder } = require("uu_appg01_core-uri");
const { RouteRegister } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory } = require("uu_appg01_datastore");

const AppWorkspaceComponent = require("../api/components/app-workspace");
const AppWorkspaceErrors = require("../api/errors/sys-app-workspace-errors.js");
const ErrorPageHelper = require("../helpers/error-page-helper");

const MIDDLEWARE_ORDER = 25;
const RELATIVE_URI_REGEXP = new RegExp(/^\/[^/]/);
const INIT_UVE = "sys/uuAppWorkspace/initUve";
const CREATE_UVE = "sys/uuAppWorkspace/createUve";

class AppWorkspaceMiddleware {
  constructor() {
    this.logger = LoggerFactory.get("AppWorkspaceMiddleware");
    this.name = "App Workspace Handler";
    // noinspection JSUnusedGlobalSymbols
    this.order = MIDDLEWARE_ORDER;
    this.asid = Config.get("asid");
    this.isDataStoreOn = DaoFactory.isDataStoreOn();
  }

  async pre(req, res, next) {
    if (!this.isDataStoreOn || res.locals.redirectToCustomErrorUve) {
      return next();
    }

    const uri = res.locals.uri;
    let awidSysState;
    const isUve = RouteRegister.isUve(uri.getUseCase(), uri.getProduct(), req.method.toUpperCase());
    const oidcUve = uri.getUseCase() === "oidc/callback";
    if (uri.getAwid() !== this.asid && isUve && !oidcUve) {
      try {
        awidSysState = (await AppWorkspaceComponent.get(uri.getAwid())).sysState;
      } catch (e) {
        if (e instanceof AppWorkspaceErrors.Get.SysUuAppWorkspaceDoesNotExistError) {
          if (RouteRegister.get(CREATE_UVE, uri.getProduct(), req.method.toUpperCase())) {
            return ErrorPageHelper.redirectToCustomErrorPage(next, req, res, CREATE_UVE, e);
          } else {
            return await ErrorPageHelper.respondWithErrorPage({
              res,
              viewFile: "app-workspace-error-page.ejs",
              params: { errorId: e.id, errorMessage: e.message },
              error: e
            });
          }
        }
        return next();
      }

      const initUveDefined = RouteRegister.get(INIT_UVE, uri.getProduct(), req.method.toUpperCase());
      if (initUveDefined) {
        const initUve = uri.getUseCase() === INIT_UVE;
        if (!initUve && awidSysState === "created") {
          return this._redirectInitAppWorkspace(req, res);
        } else if (initUve && awidSysState === "active") {
          return this._redirectDefaultUseCase(res);
        } else if (initUve) {
          const isRedirectionValid = this._validateRedirectParameter(res);
          if (!isRedirectionValid) {
            return this._redirectWithoutParameter(req, res);
          }
        }
      }
    }

    return next();
  }

  _redirectWithoutParameter(req, res) {
    const alias = res.locals.baseUriAlias;
    let uri;
    if (alias) {
      uri = new URL(res.locals.uri.getUseCase(), alias).toString();
    } else {
      uri = UriBuilder.parse(res.locals.uri)
        .clearParameters()
        .toString();
    }
    res.redirect(uri);
  }

  _redirectDefaultUseCase(res) {
    let uri = res.locals.baseUriAlias;
    if (!uri) {
      uri = UriBuilder.parse(res.locals.uri)
        .setUseCase("")
        .clearParameters()
        .toString();
    }
    res.redirect(uri);
  }

  _redirectInitAppWorkspace(req, res) {
    const uri = res.locals.uri;
    const baseUriAlias = res.locals.baseUriAlias;
    let redirectUri = baseUriAlias || uri.getBaseUri().toString();
    redirectUri += `/${INIT_UVE}`; // redirect uri might be an alias - can't use UriBuilder here.

    let useCase;
    try {
      let parsedUri = Uri.parse(req.originalUrl); // need to parse original uri because res.locals.uri might contain defaultUve
      useCase = parsedUri.getUseCase();
    } catch (e) {
      this.logger.error(
        "Unable to parse original uri: " +
          req.originalUrl +
          " Redirect after workspace initialization will be done to root page."
      );
    }

    // do not put redirect parameter if no use case (default behavior)
    if (useCase) {
      let redirect;
      if (baseUriAlias) {
        // use relative url
        redirect = new URL(baseUriAlias).pathname + "/" + useCase;
      } else {
        redirect = req.originalUrl;
      }
      redirectUri += `?originalUrl=${encodeURIComponent(redirect)}`;
    }
    res.redirect(redirectUri);
  }

  _validateRedirectParameter(res) {
    const originalUrl = res.locals.uri.getParameters().originalUrl;
    if (originalUrl) {
      return RELATIVE_URI_REGEXP.test(originalUrl);
    } else {
      return true;
    }
  }
}

module.exports = AppWorkspaceMiddleware;
