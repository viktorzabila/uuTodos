"use strict";

const { Config } = require("uu_appg01_core-utils");
const { Uri, UriBuilder } = require("uu_appg01_core-uri");
const { RouteRegister } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory } = require("uu_appg01_datastore");

const AppInstanceComponent = require("../api/components/app-instance");
const AppWorkspaceComponent = require("../api/components/app-workspace");
const AsidSysStateErrors = require("../api/errors/sys-asid-sys-state-errors");
const AwidSysStateErrors = require("../api/errors/sys-awid-sys-state-errors");
const AppInstanceErrors = require("../api/errors/sys-app-instance-errors.js");
const ProfileConfig = require("../helpers/profile-config");
const ErrorPageHelper = require("../helpers/error-page-helper");

const MIDDLEWARE_ORDER = 30;

const DEFAULT_APP_INSTANCE_SYS_STATE = "created";
const ACTIVE_SYS_STATE = "active";
const AWID_ERROR_UVE = "sys/uuAppWorkspace/sysStateErrorUve";
const ASID_ERROR_UVE = "sys/uuSubAppInstance/sysStateErrorUve";
const UU_APP_ERROR_MAP_KEY = "uuAppErrorMap";

const logger = LoggerFactory.get("ActiveSysStateMiddleware");

const PARAM_LOCALHOST_UNPROTECTED_REGEXP = "uu_app_workspace_sys_state_localhost_unprotected_uri_regexp";
const DEFAULT_LOCALHOST_UNPROTECTED_REGEXP = "/sys/getHealth(\\?|$)";

class SysStateMiddleware {
  constructor() {
    this.name = "ActiveSysStateMiddleware";
    // noinspection JSUnusedGlobalSymbols
    this.order = MIDDLEWARE_ORDER;
    this.isDataStoreOn = DaoFactory.isDataStoreOn();
    this.asid = Config.get("asid");
    let localhostUnprotectedRegexp = Config.get(PARAM_LOCALHOST_UNPROTECTED_REGEXP);
    this._localhostUnprotectedRegexp = new RegExp(localhostUnprotectedRegexp || DEFAULT_LOCALHOST_UNPROTECTED_REGEXP);
  }

  async pre(req, res, next) {
    const uri = res.locals.uri;
    if (!this.isDataStoreOn || res.locals.redirectToCustomErrorUve
      || (uri.getHostname() === "localhost" && this._localhostUnprotectedRegexp.test(uri.toString()))) {
      return next(); //running without persistence
    }

    // Asid and Awid sysStates disabled
    if (
      !AppInstanceComponent.isSysStateVerificationEnabled() &&
      !AppWorkspaceComponent.isSysStateVerificationEnabled()
    ) {
      return this._callNext(next, res);
    }

    // HDS 1. - Retrieves the current Asid sysState using uuAppInstance component method get().
    let appInstance;
    try {
      appInstance = await AppInstanceComponent.get(this.asid);
    } catch (e) {
      if (e instanceof AppInstanceErrors.Get.SysUuSubAppInstanceDoesNotExistError) {
        appInstance = { sysState: DEFAULT_APP_INSTANCE_SYS_STATE };
      } else {
        return next(e);
      }
    }
    let invalidAwidSysState = false;
    let appWorkspace;

    // HDS 2. - Checks the type of called Use-Case by comparing asid/awid part of uuUri with and asid (loaded from the app deploy configuration)
    if (uri.getAwid() === this.asid) {
      // HDS 2.1. - The called Use-Case is privileged
      // HDS 2.1.1 - Based on profiles.json configuration (.{asid}.useCaseMap.<useCase>.sysStateList) checks that the Use-Case can be called in the current Asid sysState. (A1)
      const asidUseCase = ProfileConfig.getPrivilegedUseCase(this.asid, uri.getUseCase());
      if (!asidUseCase || asidUseCase.sysStateList.includes(appInstance.sysState)) {
        return this._callNext(next, res);
      }
    } else if (appInstance.sysState === ACTIVE_SYS_STATE || !AppInstanceComponent.isSysStateVerificationEnabled()) {
      // HDS 2.2. - The called Use-Case is standard
      // HDS 2.2.1. - Checks that the current Asid sysState is set to active. (A1)

      // HDS 2.2.2 - Retrieves the current Awid sysState using uuAppWorkspace component method get().
      try {
        appWorkspace = await AppWorkspaceComponent.get(uri.getAwid());
      } catch (e) {
        return this._callNext(next, res);
      }

      // HDS 2.2.3. - Based on profiles.json configuration (.{*}.useCaseMap.<useCase>.sysStateList) checks that the Use-Case can be called in the current Awid sysState. (A2)
      const awidUseCase = ProfileConfig.getUseCase(uri.getUseCase()) || {
        sysStateList: ProfileConfig.getDefaultAwidSysStateList()
      };
      if (awidUseCase.sysStateList.includes(appWorkspace.sysState)) {
        return this._callNext(next, res);
      } else {
        invalidAwidSysState = true;
      }
    }

    if (
      (invalidAwidSysState && !AppWorkspaceComponent.isSysStateVerificationEnabled()) ||
      (!invalidAwidSysState && !AppInstanceComponent.isSysStateVerificationEnabled())
    ) {
      return this._callNext(next, res);
    }

    let error;
    if (invalidAwidSysState) {
      const paramMap = {
        awid: uri.getAwid(),
        useCase: uri.getUseCase(),
        currentSysState: appWorkspace.sysState
      };
      if (appWorkspace.adviceNote) {
        paramMap.adviceNote = appWorkspace.adviceNote;
      }
      error = new AwidSysStateErrors.ForbiddenAwidSysStateError(null, paramMap);
    } else {
      const paramMap = {
        asid: this.asid,
        useCase: uri.getUseCase(),
        currentSysState: appInstance.sysState
      };
      if (appInstance.adviceNote) {
        paramMap.adviceNote = appInstance.adviceNote;
      }
      error = new AsidSysStateErrors.ForbiddenAsidSysStateError(null, paramMap);
    }

    // UVE -> redirect to error page if defined
    const reqMethod = req.method.toUpperCase();
    if (RouteRegister.isUve(uri.getUseCase(), uri.getProduct(), reqMethod)) {
      if (
        (invalidAwidSysState && !AppWorkspaceComponent.isSysStateUveVerificationEnabled()) ||
        (!invalidAwidSysState && !AppInstanceComponent.isSysStateUveVerificationEnabled())
      ) {
        return this._callNext(next, res);
      }

      logger.warn(`Uve (${uri.getUseCase()}) can not be run in the current sysState.`, error);

      const errorUc = invalidAwidSysState ? AWID_ERROR_UVE : ASID_ERROR_UVE;
      if (RouteRegister.get(errorUc, uri.getProduct(), reqMethod)) {
        return ErrorPageHelper.redirectToCustomErrorPage(next, req, res, errorUc, error);
      } else {
        // default error page
        return await this._redirectToDefaultErrorPage(res, error);
      }
    }

    if (
      (invalidAwidSysState && !AppWorkspaceComponent.isSysStateCmdVerificationEnabled()) ||
      (!invalidAwidSysState && !AppInstanceComponent.isSysStateCmdVerificationEnabled())
    ) {
      return this._callNext(next, res);
    }

    logger.warn(`uuCommand (${uri.getUseCase()}) can not be run in the current sysState.`, error);

    // CMD -> throw error
    next(error);
  }

  _callNext(next, res) {
    const uri = Uri.parse(res.locals._uu_app_uve_handler_orig_url || res.locals.uri);
    let uuAppErrorMap = uri.getParameters()[UU_APP_ERROR_MAP_KEY];

    if (
      uuAppErrorMap &&
      (uuAppErrorMap.includes(AsidSysStateErrors.ForbiddenAsidSysStateError.ERROR_CODE) ||
        uuAppErrorMap.includes(AwidSysStateErrors.ForbiddenAwidSysStateError.ERROR_CODE))
    ) {
      // remove sysState error from the errorMap
      try {
        uuAppErrorMap = JSON.parse(uuAppErrorMap);
      } catch (e) {
        return next();
      }
      const newUriBuilder = UriBuilder.parse(uri).deleteParameter(UU_APP_ERROR_MAP_KEY);
      if (Object.entries(uuAppErrorMap).length > 1) {
        delete uuAppErrorMap[AsidSysStateErrors.ForbiddenAsidSysStateError.ERROR_CODE];
        delete uuAppErrorMap[AwidSysStateErrors.ForbiddenAwidSysStateError.ERROR_CODE];

        newUriBuilder.setParameter(UU_APP_ERROR_MAP_KEY, JSON.stringify(uuAppErrorMap));
      }
      return res.redirect(newUriBuilder.toString());
    } else {
      return next();
    }
  }

  async _redirectToDefaultErrorPage(res, error) {
    const params = {
      type: error.code.includes(AwidSysStateErrors.ForbiddenAwidSysStateError.ERROR_CODE) ? "awid" : "asid",
      errorId: error.id,
      ...error.paramMap
    };
    if (!params.adviceNote) params.adviceNote = {};
    params.formattedEstimatedEndTime = this._formatDate(params.adviceNote.estimatedEndTime);

    await ErrorPageHelper.respondWithErrorPage({ res, params, viewFile: "sys-state-error-page.ejs", error });
  }

  _formatDate(date) {
    if (!date) {
      return null;
    }

    date = new Date(date);
    const mnth = date.getMonth() + 1;
    const day = date.getDate();
    const hrs = date.getHours();
    const mins = date.getMinutes();
    return `${day < 9 ? "0" + day : day}. ${mnth < 9 ? "0" + mnth : mnth}. ${date.getFullYear()} ${
      hrs <= 9 ? "0" + hrs : hrs
    }:${mins <= 9 ? "0" + mins : mins}`;
  }
}

module.exports = SysStateMiddleware;
