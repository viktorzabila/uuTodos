"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _StringSetOf extends Matcher {

  constructor(...params) {
    super("stringSetOf", ...params);
  }

  processParams(...params) {
    if (params.length < 1 || params.length > 2) {
      throw new MatcherError("StringSetOf: wrong number of parameters, expected 1..2");
    }
    this.values = params[0];
    if (!Array.isArray(this.values)) {
      throw new MatcherError("StringSetOf: invalid parameter0, expected Array");
    }
    this.values.forEach(value => {
      if (typeof value !== "string") {
        throw new MatcherError("StringSetOf: invalid parameter0, expected Array of Strings");
      }
    });
    if (params.length === 2) {
      this.separator = params[1];
      if (typeof this.separator !== "string") {
        throw new MatcherError("StringSetOf: invalid parameter1, expected String");
      }
    } else {
      this.separator = " ";
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if ((typeof value === "string" || value instanceof String) === false) {
      // error it is not string
      result.addInvalidTypeError("stringSetOf.e001", "The value must be string.");
    } else {
      let elements = value.split(this.separator);
      if (this._hasDuplicates(elements)) {
        // error dupliacations
        result.addInvalidValueError("stringSetOf.e002", "The values must be unique.");
      }
      let correct = true;
      for (let element of elements) {
        if (!this.values.includes(element)) {
          correct = false;
          break;
        }
      }
      if (!correct) {
        // eror values must be one of ..
        result.addInvalidValueError("stringSetOf.e003", `The values must be one of [${this.values}].`);
      }
    }

    return result;
  }

  _hasDuplicates(array) {
    return new Set(array).size !== array.length;
  }

}

function StringSetOf(...params) {
  let matcher = new _StringSetOf(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = StringSetOf;
