"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _Float extends Matcher {

  constructor(...params) {
    super("float", ...params);
  }

  processParams(...params) {
    if (params.length === 3) {
      this.min = params[0];
      this.max = params[1];
      this.decimalPlaces = params[2];
      if (this.min != null && (typeof this.min !== "number")) {
        throw new MatcherError("Float: invalid parameter0, expected Number");
      }
      if (this.max != null && (typeof this.max !== "number")) {
        throw new MatcherError("Float: invalid parameter1, expected Number");
      }
      if (this.decimalPlaces != null && (typeof this.decimalPlaces !== "number" || this.decimalPlaces < 0)) {
        throw new MatcherError("Float: invalid parameter3, expected Number greater than or equal to 0");
      }
    } else if (params.length === 2) {
      this.min = 0;
      this.max = params[0];
      this.decimalPlaces = params[1];
      if (this.max != null && (typeof this.max !== "number" || this.max < 0)) {
        throw new MatcherError("Float: invalid parameter0, expected Number greater than or equal to 0");
      }
      if (this.decimalPlaces != null && (typeof this.decimalPlaces !== "number" || this.decimalPlaces < 0)) {
        throw new MatcherError("Float: invalid parameter1, expected Number greater than or equal to 0");
      }
    } else if (params.length === 1) {
      this.decimalPlaces = params[0];
      if (this.decimalPlaces != null && (typeof this.decimalPlaces !== "number" || this.decimalPlaces < 0)) {
        throw new MatcherError("Float: invalid parameter0, expected Number greater than or equal to 0");
      }
    } else if (params.length > 3) {
      throw new Error("Float matcher: wrong number of parameters, expected 0..3");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if ((typeof value === "number" || value instanceof Number) && value <= Number.MAX_VALUE && value >= -Number.MAX_VALUE) {
      if (this.min != null && value < this.min) {
        result.addInvalidValueError("float.e002", `The value must be at least ${this.min}.`);
      }
      if (this.max != null && value > this.max) {
        result.addInvalidValueError("float.e003", `The value must not be higher than ${this.max}.`);
      }
      if (this.decimalPlaces != null) {
        if (this.decimalPlaces < this._decimalPlaces(value)) {
          result.addInvalidValueError("float.e004", `The value must not have more than ${this.decimalPlaces} decimal places.`);
        }
      }
    } else {
      result.addInvalidTypeError("float.e001", "The value must be decimal.");
    }

    return result;
  }

  _decimalPlaces(num) {
    var match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
      return 0;
    }
    return Math.max(
      0,
      // Number of digits right of decimal point.
      (match[1] ? match[1].length : 0) -
        // Adjust for scientific notation.
        (match[2] ? +match[2] : 0)
    );
  }

}

function Float(...params) {
  let matcher = new _Float(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Float;
