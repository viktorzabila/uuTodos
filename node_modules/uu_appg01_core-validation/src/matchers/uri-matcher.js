"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

// Expressions for matching UES URI format
// Reserved characters: $ # = & ? : @ [ ] { }
const UESURI_RESERVED = "[^\\$#=&\\?:@\\[\\]\\{\\}]";
//Reserved characters including space
const UESURI_RESERVEDWITHSPACE = "[^\\$#=&\\?:@\\[\\]\\{\\} ]";
// Reserved characters escaped by backslash
const UESURI_ESCAPED = "([\\\\][\\$#=&\\?:@\\[\\]\\{\\}])";
// URI scheme - alphanum, must begin with letter, may contain dash or underscore
const UESURI_SCHEME = "[a-zA-Z]([a-zA-Z0-9\\-_])*";
// Entity code: any character (reserved must be escaped), must not contain space, must contain at least one character
const UESURI_CODE = `((${UESURI_RESERVEDWITHSPACE})|(${UESURI_ESCAPED}))+`;
// Entity ID: alphanum including dash or underscore, must contain at least one character
const UESURI_ID = "\\[[a-zA-Z0-9\\-_]+\\]";
// Expression: any character (reserved must be escaped), must not contain space, must contain at least one character
const UESURI_EXPR = `(\\$|#)\\{((${UESURI_RESERVEDWITHSPACE})|(${UESURI_ESCAPED}))+\\}`;
// URI part: only code, only ID, code with ID, or expression
const UESURI_PART = `(${UESURI_CODE}|${UESURI_ID}|${UESURI_CODE}${UESURI_ID}|${UESURI_EXPR})`;
// Use case - same as URI part
const UESURI_USECASE = `(${UESURI_CODE}|${UESURI_ID}|${UESURI_CODE}${UESURI_ID}|${UESURI_EXPR})`;
// Use case action - alphanum including underscore
const UESURI_ACTION = "([a-zA-Z0-9_])+";
// URI parameter: begins with '&', uses pattern 'name=value', name and value can use any character (reserved must be escaped)
const UESURI_PARAMETER = `&((${UESURI_RESERVED})|(${UESURI_ESCAPED}))+=((${UESURI_RESERVED})|(${UESURI_ESCAPED}))+`;
// URI fragment: begins with '#', can use any character (reserved must be escaped)
const UESURI_FRAGMENT = `#((${UESURI_RESERVED})|(${UESURI_ESCAPED}))+`;
// Full regular expression for UES URI evaluation
const UESURI_REGEXP = new RegExp(`^${UESURI_SCHEME}:((${UESURI_PART}@${UESURI_PART})|(${UESURI_PART}))(:${UESURI_PART}){1,2}(:)?(\\?(${UESURI_USECASE})?(:${UESURI_ACTION})?(${UESURI_PARAMETER})*)?(${UESURI_FRAGMENT})?$`);

// Expressions for matching RFC 3986 URI format
const URI_SUB_DELIMS = "[!\\$&'\\(\\)\\*\\+\\,;=]";
const URI_UNRESERVED = "[a-zA-Z0-9\\-\\._~]";
const URI_PCT_ENCODED = "(?:%[a-fA-F0-9]{2})";
const URI_SCHEME = "([a-zA-Z]+[a-zA-Z0-9\\+\\-\\.]*)";
const URI_USERINFO = `((?:${URI_UNRESERVED}|${URI_PCT_ENCODED}|${URI_SUB_DELIMS}|:)+)`;
const URI_IPV4 = "(?:[0-9]{1,3}(?:\\.[0-9]{1,3}(?:\\.[0-9]{1,3}(?:\\.[0-9]{1,3})?)?)?)";
const URI_IPV6 = "(?:\\[[a-fA-F0-9]{1,4}(?::(?:[a-fA-F0-9]{1,4})?){1,7}\\])";
const URI_REGNAME = `(?:(?:${URI_UNRESERVED}|${URI_SUB_DELIMS}|${URI_PCT_ENCODED})+)`;
const URI_HOST = `(${URI_IPV4}|${URI_IPV6}|${URI_REGNAME})`;
const URI_PORT = "(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[0-5][0-9]{4}|[1-9][0-9]{0,3})";
const URI_AUTHORITY = `(?:(?:${URI_USERINFO}@)?${URI_HOST}(?::${URI_PORT})?)`;
const URI_PATH_SEGMENT = `(?:(?:${URI_UNRESERVED}|${URI_SUB_DELIMS}|${URI_PCT_ENCODED}|:|@)+)`;
const URI_ABS_PATH = `(\\/${URI_PATH_SEGMENT}?(?:\\/${URI_PATH_SEGMENT}?)*)`;
const URI_REL_PATH = `((?:(?:\\/${URI_PATH_SEGMENT})|${URI_PATH_SEGMENT})(?:\\/${URI_PATH_SEGMENT}?)*)`;
const URI_QUERY = `(\\?(?:${URI_UNRESERVED}|${URI_SUB_DELIMS}|${URI_PCT_ENCODED}|\\?|\\/)*)`;
const URI_FRAGMENT = `(#(?:${URI_UNRESERVED}|${URI_SUB_DELIMS}|${URI_PCT_ENCODED}|\\?|\\/)*)`;
const ABSOLUTE_URI_REGEXP = new RegExp(`^(?:${URI_SCHEME}:(?:(?:\\/\\/${URI_AUTHORITY}?${URI_ABS_PATH}?)|${URI_REL_PATH})?${URI_QUERY}?${URI_FRAGMENT}?)$`);
const RELATIVE_URI_REGEXP = new RegExp(`^(?:(?:(?:\\/\\/${URI_AUTHORITY}?${URI_ABS_PATH}?)|${URI_REL_PATH}|\\/)?${URI_QUERY}?${URI_FRAGMENT}?)$`);

class _Uri extends Matcher {

  constructor(...params) {
    super("uri", ...params);
  }

  processParams(...params) {
    if (params.length > 1) {
      throw new MatcherError("Uri: wrong number of parameters, expected 0..1");
    }
    if (params.length === 1) {
      this.absolute = params[0];
      if (typeof this.absolute !== "boolean") {
        throw new MatcherError("Uri: invalid parameter0, expected Boolean");
      }
    } else {
      this.absolute = false;
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if ((typeof value === "string") || (value instanceof String)) {
      let isUri = false;
      if (value.startsWith("ues:")) {
        isUri = value.match(UESURI_REGEXP);
      } else if (this.absolute) {
        isUri = value.match(ABSOLUTE_URI_REGEXP);
      } else {
        isUri = value.match(RELATIVE_URI_REGEXP) || value.match(ABSOLUTE_URI_REGEXP);
      }
      if (!isUri) {
        result.addInvalidValueError("uri.e001", "The value must be uri.");
      }
      if (value.length > 1000) {
        result.addInvalidValueError("uri.e002", "The value must not exceed 1000 characters.");
      }
    } else {
      result.addInvalidTypeError("uri.e001", "The value must be uri.");
    }

    return result;
  }

}

function UriMatcher(...params) {
  let matcher = new _Uri(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = UriMatcher;
