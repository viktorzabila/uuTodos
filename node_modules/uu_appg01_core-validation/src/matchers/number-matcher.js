"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _Number extends Matcher {

  constructor(...params) {
    super("number", ...params);
  }

  processParams(...params) {
    if (params.length === 2) {
      this.min = params[0];
      this.max = params[1];
      if (this.min != null && (typeof this.min !== "number")) {
        throw new MatcherError("Number: invalid parameter0, expected Number");
      }
      if (this.max != null && (typeof this.max !== "number")) {
        throw new MatcherError("Number: invalid parameter1, expected Number");
      }
    } else if (params.length === 1) {
      this.min = 0;
      this.max = params[0];
      if (this.max != null && (typeof this.max !== "number" || this.max < 0)) {
        throw new MatcherError("Number: invalid parameter0, expected Number greater than or equal to 0");
      }
    } else if (params.length > 2) {
      throw new MatcherError("Number: wrong number of parameters, expected 0..2");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if ((typeof value === "number" || value instanceof Number) && value <= Number.MAX_VALUE && value >= -Number.MAX_VALUE) {
      if (this.min != null && value < this.min) {
        result.addInvalidValueError("number.e002", `The value must be at least ${this.min}.`);
      }
      if (this.max != null && value > this.max) {
        result.addInvalidValueError("number.e003", `The value must not be higher than ${this.max}.`);
      }
    } else {
      result.addInvalidTypeError("number.e001", "The value must be number.");
    }

    return result;
  }

}

function NumberMatcher(...params) {
  let matcher = new _Number(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = NumberMatcher;
