"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");
const d3 = require("d3-time-format");

const DEFAULT_FORMAT = "%H:%M";

class _Time extends Matcher {

  constructor(...params) {
    super("time", ...params);
  }

  processParams(...params) {
    if (params.length > 3) {
      throw new MatcherError("Time: wrong number of parameters, expected 0..3");
    }
    let [format, from, to] = params;
    if (format && !this._isString(format)) {
      throw new MatcherError("Time: invalid parameter0, expected String");
    }
    let parsed;
    format = format || DEFAULT_FORMAT;
    let timeParse = d3.timeParse(format);
    this.timeParse = timeParse;
    this.format = format;
    if (from) {
      if (!this._isString(from)) {
        throw new MatcherError("Time: invalid parameter1, expected String");
      }
      parsed = timeParse(from);
      if (!parsed) {
        throw new MatcherError(`Time: parameter1 does not match "${format}"`);
      }
      this.from = from;
      this.fromParsed = parsed;
    }
    if (to) {
      if (!this._isString(to)) {
        throw new MatcherError("Time: invalid parameter2, expected String");
      }
      parsed = timeParse(to);
      if (!parsed) {
        throw new MatcherError(`Time: parameter2 does not match "${format}"`);
      }
      this.to = to;
      this.toParsed = parsed;
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    let parsed = this.timeParse(value);
    if (this._isString(value) && parsed) {
      if (this.fromParsed && parsed < this.fromParsed) {
        result.addInvalidValueError("time.e002", `The value must not be before ${this.from}.`);
      }
      if (this.toParsed && parsed >= this.toParsed) {
        result.addInvalidValueError("time.e003", `The value must not be ${this.to} and later.`);
      }
    } else {
      result.addInvalidTypeError("time.e001", `The value must be time in ${this.format} time format .`);
    }

    return result;
  }

  _isString(value) {
    return typeof value === "string" || !value instanceof String;
  }

}

function Time(...params) {
  let matcher = new _Time(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Time;
