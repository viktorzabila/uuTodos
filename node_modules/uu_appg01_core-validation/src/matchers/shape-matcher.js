"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");
const Sizeof = require("object-sizeof");

const VALID_KEY_REGEXP = /^[^\.]+$/;

class _Shape extends Matcher {

  constructor(...params) {
    super("shape", ...params);
  }

  processParams(...params) {
    if (params.length === 0) {
      return; // empty shape validation
    }
    if (params.length < 1 || params.length > 3) {
      throw new MatcherError("Shape: wrong number of parameters, expected 1..3");
    }
    this.shapeModel = params[0];
    if (this.shapeModel == undefined || typeof this.shapeModel !== "object") {
      throw new MatcherError("Shape: invalid parameter0, expected Object");
    }
    if (params.length === 3) {
      this.noStrict = params[1];
      this.maxSize = params[2];
      if (typeof this.noStrict !== "boolean") {
        throw new MatcherError("Shape: invalid parameter1, expected Boolean");
      }
      if (this.maxSize != null && (typeof this.maxSize !== "number" || this.maxSize < 0)) {
        throw new MatcherError("Shape: invalid parameter2, expected Number greater than or equal to 0");
      }
    } else if (params.length === 2) {
      if (typeof params[1] === "number") {
        this.noStrict = false;
        this.maxSize = params[1];
        if (this.maxSize != null && (typeof this.maxSize !== "number" || this.maxSize < 0)) {
          throw new MatcherError("Shape: invalid parameter1, expected Number greater than or equal to 0");
        }
      } else {
        this.noStrict = params[1];
        if (typeof this.noStrict !== "boolean") {
          throw new MatcherError("Shape: invalid parameter1, expected Boolean");
        }
      }
    } else {
      this.noStrict = false;
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    // Check via "Object.prototype.toString.call(value) !== '[object Object]'" must be used,
    // as "value.constructor !== Object" is not reliably working in sandbox (uuScriptEngine)
    if (typeof value !== "object" || (Object.prototype.toString.call(value) !== "[object Object]" && Object.prototype.toString.call(value) !== "[object Map]")) {
      result.addInvalidTypeError("shape.e001", "The value must be shape.");
    } else {
      ctx = { ...ctx };
      if (this.shapeModel) {
        ctx["parentValue"] = value;
        for (let key of Object.keys(this.shapeModel)) {
          let matcherOrValidator = this.shapeModel[key];
          let val = value[key];
          let matchers;
          if (matcherOrValidator instanceof Validator) {
            matchers = matcherOrValidator.matchers;
          } else {
            matchers = [matcherOrValidator];
          }
          matchers.forEach(matcher => {
            let childResult = matcher.match(val, ctx);
            result.addChildResult(key, childResult);
          });
        }
        if (!result.valid) {
          result.addInvalidValueError("shape.e002", "The content of shape must be valid.");
        }
        Object.keys(value).forEach(key => {
          if (!key.match(VALID_KEY_REGEXP)) {
            let invalidKey = new ValidationResult();
            invalidKey.addInvalidKeyError("shape.e004", "The key must not contain dot.");
            result.addChildResult(key, invalidKey);
          }
          if (!this.noStrict && !(key in this.shapeModel)) {
            result.addUnsupportedKey(key);
          }
        });
      }
      if (this.maxSize != null && Sizeof(value) > this.maxSize) {
        result.addInvalidValueError("shape.e003", `The size of the shape must not exceed ${this.maxSize} B.`);
      }
    }

    return result;
  }

}

function Shape(...params) {
  let matcher = new _Shape(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Shape;
