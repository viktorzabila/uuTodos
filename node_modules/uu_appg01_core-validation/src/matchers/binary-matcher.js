"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");

const BASE64_REGEXP = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/;

class _Binary extends Matcher {

  constructor() {
    super("binary");
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if (value && typeof value.pipe === "function" && value.readable) {
      //correct
    } else {
      if (typeof value === "string" || value instanceof String ) {
        if (!value.match(BASE64_REGEXP)){
          result.addInvalidValueError("binary.e001", "The value must be binary.");
        }
      } else {
        result.addInvalidTypeError("binary.e001", "The value must be binary.");
      }
    }

    return result;
  }
}

function Binary() {
  let matcher = new _Binary();
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Binary;
