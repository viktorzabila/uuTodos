const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _String extends Matcher {

  constructor(...params) {
    super("string", ...params);
  }

  processParams(...params) {
    if (params.length === 1) {
      let param = params[0];
      if (param instanceof RegExp) {
        this.regexp = param;
      } else if (typeof param === "string") {
        this.regexp = new RegExp(param);
      } else if (typeof param === "number") {
        this.maxLength = param;
        if (this.maxLength != null && (typeof this.maxLength !== "number" || this.maxLength < 0)) {
          throw new MatcherError("String: invalid parameter0, expected Number greater than or equal to 0");
        }
      } else {
        throw new MatcherError("String: invalid parameter0, expected Number or RegExp");
      }
    } else if (params.length === 2) {
      this.minLength = params[0];
      this.maxLength = params[1];
      if (this.minLength != null && (typeof this.minLength !== "number" || this.minLength < 0)) {
        throw new MatcherError("String: Invalid parameter0, expected Number greater than or equal to 0");
      }
      if (this.maxLength != null && (typeof this.maxLength !== "number" || this.maxLength < 0)) {
        throw new MatcherError("String: Invalid parameter1, expected Number greater than or equal to 0");
      }
    } else if (params.length > 2) {
      throw new MatcherError("String: wrong number of parameters, expected 0..2");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if (typeof value === "string" || value instanceof String) {
      if (this.regexp) {
        if (!value.match(this.regexp)) {
          result.addInvalidValueError("string.e004", `The value must match the regular expression (${this.regexp}).`);
        }
      } else {
        if (this.maxLength != null && value.length > this.maxLength) {
          result.addInvalidValueError("string.e003",`The value must not be longer than ${this.maxLength} characters.`);
        }
        if (this.minLength != null && value.length < this.minLength) {
          result.addInvalidValueError("string.e002", `The value must not be shorter than ${this.minLength} characters.`);
        }
      }
    } else {
      result.addInvalidTypeError("string.e001", "The value must be string.");
    }

    return result;
  }

}

function StringMatcher(...params) {
  let matcher = new _String(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = StringMatcher;
