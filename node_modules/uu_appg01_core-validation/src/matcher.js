"use strict";

const Validator = require("./validator.js");

/**
 * Parent class for all matchers
 */
class Matcher {

  constructor(name, ...params) {
    this.name = name;
    this.processParams(...params);
    if (params && params.length > 0) {
      this.qualifiedName = `${this.name}(`;
      params.forEach(param => {
        this.qualifiedName += `${this._getItemName(param)},`;
      });
      this.qualifiedName = this.qualifiedName.replace(/,$/, ")");
    } else {
      this.qualifiedName = `${this.name}()`;
    }
  }

  /**
   * Returns matcher name.
   * @return {String}
   */
  getName() {
    return this.name;
  }

  /**
   * Returns matcher name including arguments.
   * @return {String}
   */
  getQualifiedName() {
    return this.qualifiedName;
  }

  /**
   * Processes matcher parameters. Method must be implemented by all matchers
   * accepting additional parameters.
   * @param args
   */
  processParams(...params) {
    if (params && params.length > 0) {
      throw new Error("Wrong number of parameters, expected 0");
    }
  }

  /**
   * This method contains whole validation process
   * @param {Object} value
   * @param {Object} ctx
   */
  match(value, ctx) {
    throw new Error("Method not implemented");
  }

  _getItemName(item) {
    let name;
    if (item == null) {
      name = "null";
    } else if (item instanceof Validator) {
      name = "";
      item.matchers.forEach(matcher => {
        name += `${matcher.getQualifiedName()}.`;
      });
      name = name.replace(/\.$/, "");
    } else if (item instanceof Matcher) {
      name = item.getQualifiedName();
    } else if (item instanceof RegExp) {
      name = item.toString();
    } else if (Array.isArray(item)) {
      name = "[";
      item.forEach(it => {
        name += `${this._getItemName(it)},`
      });
      name = name.replace(/,$/, "]");
    } else if (typeof item === "object") {
      name = "{";
      Object.keys(item).forEach(key => {
        name += `${key}:${this._getItemName(item[key])},`;
      });
      name = name.replace(/,$/, "}");
    } else if (typeof item === "string") {
      name = `"${item}"`;
    } else {
      name = `${item}`;
    }
    return name;
  }

}

module.exports = Matcher;
