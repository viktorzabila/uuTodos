const { Config, OptsReader, BaseError, Finder } = require("uu_appg01_core-utils");
const { Validator } = require("uu_appg01_core-validation");
const path = require("path");
const fs = require("fs");

const CONFIG_FOLDER = "config";
const PERSISTENCE_CONFIG_FILE = "persistence.json";
const REALIZATIONS_CONFIG_FILE = "schema_realizations.json";

const OBJECT_STORE = "uuAppObjectStore";
const DEFAULT_PRIMARY_STORE = "primary";
const DEFAULT_REALIZATION = "MongoDB";

class PersistenceConfig {
  constructor() {
    this.validator = new Validator(path.join(__dirname, "..", "validation_types", "persistence-types.js"));
  }

  /**
   * Returns schema for given schema name from the cache.
   * @param schema Name of schema
   */
  getSchema(schema) {
    this._loadConfigIfNotExist();
    return this._schemas.get(schema);
  }

  /**
   * Returns maximal number of awids from loaded persistence configuration.
   */
  get maxNoa() {
    this._loadConfigIfNotExist();
    return this._maxNoa;
  }

  get primaryDataStore() {
    this._loadConfigIfNotExist();
    return this._primaryDs;
  }

  get schemas() {
    this._loadConfigIfNotExist();
    return this._schemas;
  }

  get dataStores() {
    this._loadConfigIfNotExist();
    return this._dataStores;
  }

  /**
   * Check whether persistence is used in the application.
   */
  get isDataStoreOn() {
    this._loadConfigIfNotExist();
    return this._isDataStoreOn;
  }

  set buildConnectionString(value) {
    this._buildConnectionString = value;
  }

  /**
   * Clear persistence configuration cache and reload configuration.
   */
  reloadConfig() {
    this._schemas ? this._schemas.clear() : (this._schemas = new Map());
    this._dataStores ? this._dataStores.clear() : (this._dataStores = new Map());
    this._maxNoa = null;
    this._isDataStoreOn = true;
    this._buildConnectionString == null ? true : this._buildConnectionString;
    this._opts = new OptsReader(Config);
    this._loadPersistenceConfig();
  }

  _loadPersistenceConfig() {
    // load connection strings from configuration
    this._connectionStringMap = this._opts.get("uuSubAppDataStoreMap", null);

    let serverRoot = this._opts.get("server_root", __dirname);

    // load persistence configuration of application
    let appConfigPaths = this._getAppConfigPath(serverRoot);
    let appRealizationsPaths = this._getAppRealizationsPath(serverRoot);

    let persistenceConfig = this._loadPersistenceJson(appConfigPaths, true);
    this._isDataStoreOn = !(persistenceConfig.uuSubAppDataStore === null);

    if (this._isDataStoreOn) {
      // process configuration of application
      this._maxNoa = persistenceConfig.maxNoa;
      this._primaryDs = persistenceConfig.primary || DEFAULT_PRIMARY_STORE;
      this._checkPrimaryDs(persistenceConfig);

      this._processStores(persistenceConfig);
      this._processSchemaRealizations(persistenceConfig, appRealizationsPaths);

      // process configuration of libraries
      this._processLibraryPersistenceConfig(serverRoot, (configPath, realizationPath) => {
        let config = this._loadPersistenceJson(configPath);
        if (config) {
          this._processStores(config);
        }
        this._processSchemaRealizations(persistenceConfig, realizationPath);
      });
    }
  }

  _getAppConfigPath(serverRoot) {
    let configPath = this._opts.get("persistence_config");
    if (configPath) {
      return configPath;
    }

    let appConfigPath = Finder.findConfigInProject(
      serverRoot,
      `{src,app,}/${CONFIG_FOLDER}/${PERSISTENCE_CONFIG_FILE}`
    );
    if (!appConfigPath) {
      appConfigPath = path.join(serverRoot, "app", CONFIG_FOLDER, PERSISTENCE_CONFIG_FILE);
    }

    return appConfigPath;
  }

  _getAppRealizationsPath(serverRoot) {
    return Finder.findConfigInProject(serverRoot, `{src,app,}/${CONFIG_FOLDER}/${REALIZATIONS_CONFIG_FILE}`);
  }

  _processStores(persistenceConfig) {
    if (!persistenceConfig.uuSubAppDataStore) {
      return;
    }

    for (let [dataStoreKey, dataStore] of Object.entries(persistenceConfig.uuSubAppDataStore)) {
      if (!this._dataStores.get(dataStoreKey)) {
        this._dataStores.set(dataStoreKey, {
          type: dataStore.type,
          realization: dataStore.realization,
          connectionString: this._getConnectionString(dataStoreKey),
        });
      }

      for (let [schemaKey, schema] of Object.entries(dataStore.schemaMap)) {
        // Schema definition can be overridden by application's one (which is loaded first)
        if (this._schemas.get(schemaKey)) {
          continue;
        }

        let { realization, maxNoi, maxSoi, maxSob, ...extraAttrs } = schema;
        let schemaEntry = {
          realization,
          maxNoi,
          maxSoi,
          maxSob,
          extraAttrs,
          dataStore: dataStoreKey,
          connectionString: this._getConnectionString(dataStoreKey),
        };
        this._schemas.set(schemaKey, schemaEntry);
      }
    }
  }

  _processLibraryPersistenceConfig(serverRoot, process) {
    let folders = Finder.findConfigInModules(serverRoot, `{src,app,}/${CONFIG_FOLDER}/`);

    folders.forEach((folder) => {
      let configFilePath = path.join(folder, PERSISTENCE_CONFIG_FILE);
      let realizationFilePath = path.join(folder, REALIZATIONS_CONFIG_FILE);
      process(configFilePath, realizationFilePath);
    });
  }

  _processSchemaRealizations(persistenceConfig, realizationsFilePath) {
    let realizationConfig = this._loadSchemaRealization(realizationsFilePath);
    if (!realizationConfig) {
      return;
    }

    let realization = this._getPrimaryRealization(persistenceConfig);
    for (let [schemaKey, schema] of Object.entries(realizationConfig)) {
      if (this._schemas.get(schemaKey)) {
        continue;
      }

      let { realizationMap, maxNoi, maxSoi, maxSob, ...extraAttrs } = schema;
      let schemaEntry = {
        realization: realizationMap[realization],
        maxNoi,
        maxSoi,
        maxSob,
        extraAttrs,
        dataStore: this._primaryDs,
        connectionString: this._getConnectionString(this._primaryDs),
      };
      this._schemas.set(schemaKey, schemaEntry);
    }
  }

  _getPrimaryRealization(persistenceConfig) {
    if (!persistenceConfig.uuSubAppDataStore) {
      return DEFAULT_REALIZATION;
    }
    return persistenceConfig.uuSubAppDataStore[this._primaryDs].realization || DEFAULT_REALIZATION;
  }

  _checkPrimaryDs(persistenceConfig) {
    let store = persistenceConfig.uuSubAppDataStore[this._primaryDs];
    if (!store) {
      throw new BaseError(`DAO initialization failed: Primary data store "${this._primaryDs}" is not defined.`);
    }
    if (!store.type || store.type !== OBJECT_STORE) {
      throw new BaseError(
        `DAO initialization failed: Primary data store ("${this._primaryDs}") type must be uuAppObjectStore.`
      );
    }
  }

  /**
   * get connection string from configuration base on uuSubAppDataStore key.
   * @param dataStoreKey
   * @return {*}
   * @private
   */
  _getConnectionString(dataStoreKey) {
    if (this._buildConnectionString == false) {
      return;
    }
    if (!this._connectionStringMap || !this._connectionStringMap[dataStoreKey]) {
      throw new BaseError(
        `DAO initialization failed: Expected configuration attribute uuSubAppDataStoreMap.${dataStoreKey}, which should contain connection string, not found`
      );
    }
    return this._connectionStringMap[dataStoreKey];
  }

  /**
   * Load persistence json file.
   * @param configPath
   * @return {*} Parsed persistence config
   * @private
   */
  _loadPersistenceJson(configPath, mustExist = false) {
    if (!configPath || !fs.existsSync(configPath)) {
      if (mustExist) {
        throw new BaseError("DAO initialization failed: persistence.json not found. Path: " + configPath);
      } else {
        return null;
      }
    }

    let persistence = require(configPath);
    let validationResult = this.validator.validate("persistenceMapType", persistence);
    if (!validationResult.isValid()) {
      throw new BaseError(
        "Persistence.json is not valid:\n" + JSON.stringify(validationResult.getValidationErrorMap(), null, 2)
      );
    }
    return persistence;
  }

  _loadSchemaRealization(configPath) {
    if (!configPath || !fs.existsSync(configPath)) {
      return null;
    }
    return require(configPath);
  }

  /**
   * Function calls loading process if config is not yet initialized.
   * @private
   */
  _loadConfigIfNotExist() {
    if (!this._schemas) {
      this.reloadConfig();
    }
  }
}

module.exports = new PersistenceConfig();
