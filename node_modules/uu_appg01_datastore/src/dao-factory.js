const { Config, Loader, BaseError } = require("uu_appg01_core-utils");
const Path = require("path");
const PersistenceConfig = require("./libs/persistence-config.js");

class DaoFactory {
  constructor() {
    this._daos = new Map();
  }

  /**
   * get Dao instance
   * @param {string} name - name of the schema
   * @param {string} configPath - custom path to the config folder. Default is used if not set.
   * @return {object} - return target dao or throw error
   * */
  getDao(name, configPath) {
    let dao = this._daos.get(name);
    if (dao) {
      return dao;
    }

    // DataStore is turned off
    if (PersistenceConfig.isDataStoreOn == false) {
      return this._createDaoProxy();
    }

    let schemaConfig = PersistenceConfig.getSchema(name);

    if (!schemaConfig) {
      throw new BaseError(`DAO initialization failed: There is no realization for schema ${name}`);
    }

    // Build path to root of library or application.
    let modulePath;
    if (!configPath || schemaConfig.realization.includes(":")) {
      modulePath = Config.get("server_root");
    } else {
      modulePath = Path.join(configPath, "..");
    }

    let DaoDB;
    try {
      DaoDB = Loader.loadRealization(modulePath, schemaConfig.realization, false);
    } catch (e) {
      throw new BaseError("DAO initialization failed: Unable to load realization. ", e);
    }

    dao = new DaoDB(name, schemaConfig.maxNoi, schemaConfig.maxSoi, schemaConfig.connectionString, schemaConfig.maxSob);
    dao._extraAttrs = schemaConfig.extraAttrs;
    this._daos.set(name, dao);
    return dao;
  }

  /**
   * Terminates all connections to DB.
   * @return {Promise<void>}
   */
  async closeAllDB() {
    let promises = Array.from(this._daos.values()).map(async (dao) => {
      await dao.closeDB();
    });
    await Promise.all(promises);
    this._daos.clear();
  }

  /**
   * Returns max noa from configuration.
   * @return {number}
   */
  getMaxNoa() {
    return PersistenceConfig.maxNoa;
  }

  /**
   * return Map with all daos
   * @returns {Map}
   */
  getDaos() {
    return this._daos;
  }

  /**
   * Returns information whether persistence is used in the application.
   * @return {boolean}
   */
  isDataStoreOn() {
    return PersistenceConfig.isDataStoreOn;
  }

  _createDaoProxy() {
    return new Proxy(
      {},
      {
        get: (target, name) => {
          throw new BaseError(
            "Application has started in mode with disabled persistence. Dao function " + name + "() cannot be called."
          );
        },
      }
    );
  }
}

module.exports = new DaoFactory();
