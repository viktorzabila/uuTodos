"use strict";

const {Config, LruCache, Base64} = require("uu_appg01_core-utils");
const {AppClient, PerflogHandler, RemoteErrorHandler, TransformParametersHandler, ApplicationError} = require("uu_appg01_core-appclient");
const {LoggerFactory} = require("uu_appg01_core-logging");
const SyncCallNotPossible = require("../../internal/sync-call-not-possible.js");
const Dom = require("../ui/dom.js");

const APP_CLIENT_INTERCEPTORS = [PerflogHandler, RemoteErrorHandler, TransformParametersHandler];

const CLIENT_ID_CACHE_SIZE = 256;
const CLIENT_ID_CACHE_TTL = 60 * 60 * 1000;
const CLIENT_ID_CACHE_STORAGE_KEY = "uu_app_oidc_cache_client_id";

const CLIENT_ID_CACHE = new LruCache({maxSize: CLIENT_ID_CACHE_SIZE, maxAge: CLIENT_ID_CACHE_TTL, localStorageKey: CLIENT_ID_CACHE_STORAGE_KEY});
const LOGGER = LoggerFactory.get("uuapp.oidc.ClientCredentialsProvider");

const CONFIG_PREFIX = "uu_app_oidc_providers_";
const CLIENT_ID_SUFFIX = "_client_id";
const UNREGISTERED_ID_SUFFIX = "_unregistered_client_id";
const UNREGISTERED_CLIENT_ID_PREFIX = "uu-oidc:unregistered-client:";
// TODO Generate default client name based on fingerprint
const DEFAULT_CLIENT_NAME = Math.random().toString(16).substring(2, 10);

/**
 * Browser implementation of client credentials provider allowing of
 * dynamically loading client credentials (client_id) from backend.
 */
class ClientCredentialsProvider {

  /**
   * Returns OIDC client id for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static async getClientId(serviceName) {
    let cacheKey = Base64.encode(`${Dom.appBaseUri}:${serviceName}`);
    let clientId = CLIENT_ID_CACHE.get(cacheKey) || Config.getString(`${CONFIG_PREFIX}${serviceName}${CLIENT_ID_SUFFIX}`);
    if (!clientId) {
      let result = null;
      try {
        let dtoIn = {serviceName: serviceName};
        let opts = {interceptors: APP_CLIENT_INTERCEPTORS};
        result = await AppClient.get(`${Dom.appBaseUri}oidc/getClientId`, dtoIn, opts);
        clientId = result.data.clientId;
      } catch (e) {
        if (e instanceof ApplicationError && e.status === 404) {
          // We are probably using legacy backend without new endpoint. Provide default credentials of unregistered client.
          LOGGER.warn(`Backend does not provide "oidc/getClientId" endpoint and custom configuration of clientId is not available. Using unregistered client.`);
          clientId = Config.get(`${CONFIG_PREFIX}${serviceName}${UNREGISTERED_ID_SUFFIX}`) || `${UNREGISTERED_CLIENT_ID_PREFIX}${DEFAULT_CLIENT_NAME}`;
        } else {
          throw e;
        }
      }
      CLIENT_ID_CACHE.set(cacheKey, clientId);
    }
    // Static cache is used to allow eviction of standard cache while
    // allow calling of getClientCredentialsSync in case cache was
    // evicted between asynchronous and synchronous invocation.
    this._clientIds[cacheKey] = clientId;
    return clientId;
  }

  /**
   * Returns OIDC client id for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static getClientIdSync(serviceName) {
    let cacheKey = Base64.encode(`${Dom.appBaseUri}:${serviceName}`);
    let clientId = this._clientIds[cacheKey];
    if (!clientId) {
      throw new SyncCallNotPossible("Asynchronous method getClientId or getClientCredentials must be invoked prior to synchronous invocation");
    }
    return clientId;
  }

  /**
   * Returns OIDC client credentials for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static async getClientCredentials(serviceName) {
    let clientId = await this.getClientId(serviceName);
    return {client_id: clientId, client_secret: null};
  }

  /**
   * Returns OIDC client credentials for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static getClientCredentialsSync(serviceName) {
    let clientId = this.getClientIdSync(serviceName);
    return {client_id: clientId, client_secret: null};
  }

}

// Static "cache" for sync method
ClientCredentialsProvider._clientIds = {};

module.exports = ClientCredentialsProvider;
