"use strict";

const { AppClient } = require("uu_appg01_core-appclient");
const ClientCredentialsProvider = require("./client-credentials-provider.js");
const { AuthenticationError } = require("uu_appg01_core-authentication");
const AbstractAuthorizationFlow = require("./abstract-authorization-flow.js");
const CodeFlow = require("./code-flow.js");
const InteractionRequired = require("../interaction-required.js");

const RESTORE_SESSION_FORCED = "forced";
const WINDOW = location.href.startsWith("about:") && window.frameElement ? parent : window;
const CSRF_COOKIE = new RegExp("uu.app.csrf=([^;]+)");

/**
 * Implementation of code flow with mitigation for thirdparty cookies.
 * (uses redirect for session restore, command for refresh and calltoken)
 */
class CodeFlowV2 extends CodeFlow {

  constructor(oauthClient, serviceName, redirectUri, appBaseUri) {
    super(oauthClient, serviceName, redirectUri);
    this._oauthClient = oauthClient;
    this._serviceName = serviceName;
    this._redirectUri = redirectUri;
    this._appBaseUri = appBaseUri;
    this._client = new AppClient();
    this._doOnlyLocalSessionCheck = false;
  }

  async restoreSession(options, scope) {
    let isAuthCallback = sessionStorage.getItem("uu_app_oidc_auth_cb");
    sessionStorage.removeItem("uu_app_oidc_auth_cb");
    let result = await this._restoreSessionViaAppSession(options, scope);
    let resultValid = result && this._assertConstraints(result.claims, options, isAuthCallback);
    if (!resultValid && !isAuthCallback) {
      result = await this._resotreSessionViaIdpSession(options, scope);
    }
    if (!result) {
      // We have to load asynchronous data, else interactive login will fail.
      await this._oauthClient.getMetadata();
      await ClientCredentialsProvider.getClientId(this._serviceName);
      this._throwInteractionRequired();
    }
    return result;
  }

  async checkSession(query) {
    let result;
    if (this._doOnlyLocalSessionCheck) {
      return this._isSessionValid() ? "unchanged" : "changed";
    } else {
      result = await super.checkSession(query);
      if (result === "unknown") {
        this._logger.warn("Switching global session check to application session check due to blocked thirdparty cookies.");
        this._doOnlyLocalSessionCheck = true;
        result = "unchanged";
      }
    }
    return result;
  }

  async refreshSession(options, scope = null) {
    if (!this._isSessionValid()) {
      this._throwInteractionRequired();
    }
    let authResponseTime = Date.now();
    let claims;
    try {
      claims  = (await this._client.post(this._appBaseUri + "oidc/extendSession")).data;
    } catch (e) {
      if (e.status && e.status === 401) {
        this._throwInteractionRequired(e);
      } else {
        throw e;
      }
    }
    this._assertConstraints(claims, options, true);
    let globalSessionExpiresAt = authResponseTime + 1000 * claims.session_info.session_expires_in;
    let globalSessionState = claims.session_info.session_state;
    let clientId = claims.session_info.client_id;
    delete claims.session_info;
    delete claims.uuAppErrorMap;
    return {claims, globalSessionExpiresAt, globalSessionState, clientId};
  }

  async getCallToken(options, scope = null) {
    let grantResult = (await this._client.post(this._appBaseUri + "oidc/grantCallToken", {scope})).data;
    let expireAt = Date.now() + grantResult.expires_in * 1000;
    return {idToken: grantResult.id_token, accessToken: grantResult.access_token, expireAt};
  }

  async _restoreSessionViaAppSession(options, scope) {
    this._logger.debug("Trying to restore session based on existing application session.");
    if (!this._isSessionValid()) {
      this._logger.debug("Application session not found.");
      return null;
    }
    let authResponseTime = Date.now();
    let claims;
    try {
      claims = (await this._client.get(this._appBaseUri + "oidc/introspect", {_: Date.now()})).data;
    } catch (e) {
      this._logger.debug("Restoring of session based on existing application session failed.", e);
      return null;
    }

    if (!claims || !claims.session_info) {
      this._logger.debug("Application session not found.");
      return null;
    }

    let globalSessionExpiresAt = authResponseTime + 1000 * claims.session_info.session_expires_in;
    let globalSessionState = claims.session_info.session_state;
    let clientId = claims.session_info.client_id;
    delete claims.session_info;
    delete claims.uuAppErrorMap;
    let acrValues = options.acrValues || this._defaultAcrValues;
    let maxAge = options.maxAge || this._defaultMaxAge;

    return {
      claims,
      idToken: null,
      accessToken: null,
      authenticationContext: null,
      globalSessionExpiresAt,
      globalSessionState,
      clientId,
      scope,
      acrValues,
      maxAge
    };
  }

  async _resotreSessionViaIdpSession(options, scope) {
    this._logger.debug("Restoring session by redirection to configured identity provider.");
    // We have to load metadata, else redirect will not work
    // due to requirement of metadata being available locally
    await this._oauthClient.getMetadata();
    options = {...options, usePopup: false, prompt: "none", noIframe: true};
    if (AbstractAuthorizationFlow.getRestoreSessionOnLoad() === RESTORE_SESSION_FORCED) {
      delete options.prompt;
    }
    // Store current referrer to provide it after redirect
    sessionStorage.setItem("uu_app_oidc_auth_referrer", document.referrer);
    return this.authenticate(options, scope);
  }

  async _assertConstraints(claims, options, throwError) {
    let acrValues = options.acrValues || this._defaultAcrValues;
    if (acrValues && !acrValues.includes(claims.acr)) {
      if (throwError) {
        this._throwInteractionRequired();
      } else {
        return false;
      }
    }
    let maxAge = options.maxAge || this._defaultMaxAge;
    if (maxAge && ((claims.auth_time + maxAge) * 1000) < Date.now()) {
      if (throwError) {
        this._throwInteractionRequired();
      } else {
        return false;
      }
    }
  }

  _isSessionValid() {
    let csrfToken = (CSRF_COOKIE.exec(WINDOW.document.cookie) || [])[1];
    if (!csrfToken) {
      return false;
    }
    let tokenParts = csrfToken.split(".");
    if (tokenParts.length === 3) {
      // Token with expiration (newer version of backend)
      return Number(tokenParts[0]) * 1000 > Date.now() ? true : false;
    } else {
      // Token without expiration (older version of backend)
      return true;
    }
  }

  _throwInteractionRequired(cause = null) {
    let error = new InteractionRequired("Authentication Request cannot be completed without displaying a user interface for End-User interaction.", cause);
    error.code = "interaction_required";
    throw error;
  }

}

module.exports = CodeFlowV2;
