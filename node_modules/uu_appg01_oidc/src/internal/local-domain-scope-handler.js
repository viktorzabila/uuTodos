"use strict";

const {Config} = require("uu_appg01_core-utils");

const LOCAL_DOMAIN_SCOPE_REPLACE_ENABLED = "uu_app_oidc_local_domain_scope_replace_enabled";
const LOCAL_DOMAIN_LIST = "uu_app_oidc_local_domain_list";
const DEFAULT_LOCAL_DOMAIN_LIST = "localhost,127.0.0.1";
const LOCAL_DOMAIN_SCOPE = "uu_app_oidc_local_domain_call_token_scope";
const DEFAULT_LOCAL_DOMAIN_SCOPE = "https:// http://";

const CALL_SCOPE = new RegExp("^https?://.*");

/**
 * Component for transforming scope so that localhost URIs are replaced
 * by broad scope allowing applications to do any token exchange without
 * requiring registered oidc client.
 */
class LocalDomainScopeHandler {

  constructor() {
    this._localDomainReplaceEnabled = Config.getBoolean(LOCAL_DOMAIN_SCOPE_REPLACE_ENABLED);
    if (this._localDomainReplaceEnabled == null) {
      this._localDomainReplaceEnabled = Config.isProfileActive("development", "test");
    }
    if (this._localDomainReplaceEnabled) {
      this._localDomainList = (Config.getString(LOCAL_DOMAIN_LIST) || DEFAULT_LOCAL_DOMAIN_LIST).split(",").map(domain => new RegExp(`^https?://${domain.trim()}(:\\d{1,5})?($|/)`));
      this._localDomainScope = Config.getString(LOCAL_DOMAIN_SCOPE) || DEFAULT_LOCAL_DOMAIN_SCOPE;
    }
  }

  transformScope(scope) {
    if (!this._localDomainReplaceEnabled) {
      return scope;
    }
    let specialScopes = [];
    let externalCallScopes = [];
    let scopeParts = scope.split(" ");
    for (let scopePart of scopeParts) {
      if (scopePart.match(CALL_SCOPE)) {
        if (!this._localDomainList.find(domain => scopePart.match(domain))) {
          externalCallScopes.push(scopePart);
        }
      } else {
        specialScopes.push(scopePart);
      }
    }
    if (externalCallScopes.length > 0) {
      // In case there is any external scope, we cannot use generic scope
      return scope;
    } else {
      // Provide scope with all localhost scopes replaced by generic scope
      return `${specialScopes.join(" ")} ${this._localDomainScope}`
    }
  }

}

module.exports = new LocalDomainScopeHandler();
