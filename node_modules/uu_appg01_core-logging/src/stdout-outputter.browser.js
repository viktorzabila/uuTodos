"use strict";

const LogLevel = require("./log-level.js");
const MessageFormatter = require("./message-formatter.js");

class BrowserStdoutOutputter {

  constructor(formatter = null) {
    this._formatter = formatter || new MessageFormatter();
  }

  setFormatter(formatter) {
    this._formatter = formatter;
    return this;
  }

  getFormatter() {
    return this._formatter;
  }

  setSeverityLabels(severityLabels) {
    this._formatter.setSeverityLabels(severityLabels);
    return this;
  }

  getSeverityLabels() {
    return this._formatter.getSeverityLabels();
  }

  setMessageFormat(messageFormat) {
    this._formatter.setMessageFormat(messageFormat);
    return this;
  }

  getMessageFormat() {
    return this._formatter.getMessageFormat();
  }

  setErrorFormat(errorFormat) {
    this._formatter.setErrorFormat(errorFormat);
    return this;
  }

  getErrorFormat() {
    return this._formatter.getErrorFormat();
  }

  setCauseFormat(causeFormat) {
    this._formatter.setCauseFormat(causeFormat);
    return this;
  }

  getCauseFormat() {
    return this._formatter.getCauseFormat();
  }

  async write(datetime, name, level, message, error) {
    // use native browser functionality to display error info
    // error is not formatted by formatter, but passed to console directly
    const formattedMessage = this._formatter.formatMessage(datetime, name, level, message);
    const output = [formattedMessage];
    if (error != null && typeof error === "object") {
      output.push(error, "\n", { ...error });
    } else if (error != null) {
      output.push(error);
    }

    switch (level) {
      case LogLevel.FATAL:
      case LogLevel.ERROR:
        console.error(...output);
        break;
      case LogLevel.WARN:
        console.warn(...output);
        break;
      case LogLevel.INFO:
      case LogLevel.UNKNOWN:
        console.info(...output);
        break;
      case LogLevel.DEBUG:
        console.debug(...output);
        break;
      default:
        console.log(...output);
    }
  }

}

module.exports = BrowserStdoutOutputter;
