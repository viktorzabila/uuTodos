import React, { useRef } from "react";
import UU5 from "uu5g04";
import "uu5g04-bricks";

const columns = [
  { key: "id", content: "id" },
  { key: "content", content: "content", editable: true },
  { key: "fontSize", content: "fontSize" },
  { key: "colorSchema", content: "colorSchema", editable: true }
];

function getData(count) {
  let data = [];
  for (let i = 0; i < count; i++) {
    data.push({
      id: "data-" + i,
      content: i,
      fontSize: Math.random() * 4 + 1 + "em",
      colorSchema: UU5.Environment.colorSchema[Math.floor(i * 100) % UU5.Environment.colorSchema.length]
    });
  }
  return data;
}

export const DataGenerator = {
  initTiles(count) {
    let data = getData(count);

    return {
      data,
      columns,
      Client: new Client(data)
    };
  }
};

class Client {
  constructor(mockData) {
    this.mockData = mockData;
  }

  get(uri, data) {
    const CALL_DELAY = 1000;
    let { pageInfo, filterMap, sorterList } = data;
    let { pageIndex, pageSize } = pageInfo;
    console.log(
      "Calls.loadTiles(...) - data:",
      data,
      " - tiles",
      pageIndex * pageSize,
      "..",
      (pageIndex + 1) * pageSize - 1
    );
    // let start = Date.now();
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // if (Date.now() - start > CALL_DELAY + 500) console.warn("setTimeout was supposed to be fired after " + CALL_DELAY + "ms but browser executed it after " + (Date.now() - start) + "ms.");

        // simulate server-side filtering & sorting
        let filtered = this.mockData;
        if (filterMap && filterMap.awesome)
          filtered = filtered.filter(it => filterMap.awesome.split(",").some(v => v === it.class1.cs.toLowerCase()));
        else filtered = filtered.slice(0);
        if (sorterList && sorterList.length)
          filtered.sort((a, b) => {
            let result = 0;
            for (let { descending, key } of sorterList) {
              let order = descending ? -1 : 1;
              let item1 = a[key];
              let item2 = b[key];
              result = order * (item1.cs || item1 || "").localeCompare(item2.cs || item2 || "");
              if (result) break;
            }
            return result;
          });
        let itemList = filtered.slice(pageIndex * pageSize, pageIndex * pageSize + pageSize);

        let pageInfoOut = { pageIndex, pageSize, total: filtered.length };
        let dtoOut = { itemList, pageInfo: pageInfoOut, uuAppErrorMap: {} };
        let response = { data: dtoOut, status: 200 };
        resolve(response);
      }, CALL_DELAY);
    });
  }
}

export const FontSizeTile = UU5.Common.VisualComponent.create({
  _resizeAndMeasure() {
    let { data, handleMeasure } = this.props;
    data.fontSize = Math.random() * 4 + 1 + "em";
    this.setState({}, () => handleMeasure());
  },
  render() {
    let { data, selected } = this.props;
    let { content, fontSize, ...restData } = data;
    let className = UU5.Common.Css.css`&:hover .switch { display: block !important; }`;
    return (
      <UU5.Bricks.Well background {...restData} style={{ fontSize }} className={className}>
        {content}
        {this.props.onSelect ? (
          <UU5.Bricks.ButtonSwitch
            className="switch"
            switchedOn={selected}
            content={<UU5.Bricks.Icon icon="mdi-check" />}
            onProps={{ colorSchema: "yellow" }}
            offProps={{ colorSchema: "custom", bgStyle: "transparent" }}
            style={{ position: "absolute", top: 0, right: 80, display: selected ? "block" : "none" }}
            props={{
              onClick: () => this.props.onSelect(this.props.id, !selected)
            }}
          />
        ) : null}
        <UU5.Bricks.Button
          onClick={this._resizeAndMeasure}
          content="Resize"
          size="m"
          style={{ position: "absolute", top: 0, right: 0 }}
        />
      </UU5.Bricks.Well>
    );
  }
});

export const RenderCount = function() {
  let ref = useRef(0);
  ref.current++;
  return <div style={{ background: "rgba(0,0,0,0.2)" }}>Render count: {ref.current}</div>;
};
