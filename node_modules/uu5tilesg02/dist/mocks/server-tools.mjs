import { Client as UuAppClient } from "uu_appg01";

const Client = {
  get(uri, data) {
    return new Promise((resolve, reject) => {
      UuAppClient.get(uri, { pageSize: 20, code: "basicExampleData" }).then(response => {
        db.setSync(response.data.itemList);
        resolve(response);
      }, reject);
    });
  },

  post(uri, data) {
    return new Promise((resolve, reject) => {
      let list = db.getSync();
      let item;
      switch (uri.match(/[^/]+$/)[0]) {
        case "create":
          data = { ...data, id: UU5.Common.Tools.generateUUID() };
          list.push(data);
          item = data;
          break;
        case "update":
          let i = list.findIndex(item => item.id === data.id);
          item = list[i] = { ...list[i], ...data };
          break;
        case "delete":
          let j = list.findIndex(item => item.id === data.id);
          item = null;
          list.splice(j, 1);
          break;
      }

      db.set(list).then(() => resolve({ data: JSON.parse(JSON.stringify(item)) }), reject);
    });
  }
};

let error = false;
let localStorage = {};

class LocalStorage {
  static LIMIT = 1000;

  constructor(key, defaultData = []) {
    this.key = key;
    this.defaultData = defaultData;
  }

  getSync() {
    let json = localStorage[this.key];
    return json ? JSON.parse(json) : JSON.parse(JSON.stringify(this.defaultData));
  }

  async get() {
    return await new Promise((resolve, reject) => {
      setTimeout(() => {
        if (!error) {
          resolve(this.getSync());
        } else {
          reject({ status: 500, message: "Test Error" });
        }
      }, this.constructor.LIMIT);
    });
  }

  setSync(data = this.defaultData) {
    let json = JSON.stringify(data);
    localStorage[this.key] = json;
    return JSON.parse(json);
  }

  async set(data = this.defaultData) {
    return await new Promise((resolve, reject) => {
      setTimeout(() => {
        if (!error) {
          resolve(this.setSync(data));
        } else {
          reject({ status: 500, message: "TestError", data: { error: true } });
        }
      }, this.constructor.LIMIT);
    });
  }
}

const db = new LocalStorage("uu5g05-listdatamanager.0", []);
const BINARY_URL =
  "https://uuapp.plus4u.net/uu-bookkit-maing01/5c73a1fdb9a14b4aaff232962752c9b6/getBinaryData";

const streamToString = (stream, encoding = "utf-8") => {
  return window.TextDecoder
    ? new window.TextDecoder(encoding).decode(stream)
    : decodeURIComponent(escape([...stream].map(char => String.fromCharCode(char)).join("")));
};

export const Calls = {
  async loadJson(dtoInData) {
    console.log(dtoInData);
    let response = await Client.get(BINARY_URL, dtoInData);
    let data = response.data instanceof Uint8Array ? JSON.parse(streamToString(response.data)) : response.data;
    return data;
  }
};

export default Calls;
