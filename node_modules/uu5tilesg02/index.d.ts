export = Uu5Tiles;
declare namespace Uu5Tiles {
    interface ControllerProvider$Props {
        data?: any[];
        filters?: any[];
        sorters?: any[];
        initialActiveFilters?: any[];
        initialActiveSorters?: any[];
        selectable?: boolean;
        initialDisplaySelected?: boolean;
        initialSelectedData?: any[];
        onChangeFilters?(...args: any): any;
        onChangeSorters?(...args: any): any;
        itemKey?(...args: any): any;
    }
    function ControllerProvider(props: ControllerProvider$Props): any;
    interface Controller$Props {
        data?: any[];
        filters?: any[];
        sorters?: any[];
        initialActiveFilters?: any[];
        initialActiveSorters?: any[];
        selectable?: boolean;
        initialDisplaySelected?: boolean;
        initialSelectedData?: any[];
        onChangeFilters?(...args: any): any;
        onChangeSorters?(...args: any): any;
        itemKey?(...args: any): any;
    }
    function Controller(props: Controller$Props): any;
    interface ColumnsProvider$initialColumns {
        alwaysVisible?: boolean;
        type?: "select" | "drag";
    }
    interface ColumnsProvider$Props {
        initialColumns?: (ColumnsProvider$initialColumns | "select" | "drag")[];
        searchable?: boolean;
    }
    function ColumnsProvider(props: ColumnsProvider$Props): any;
    interface ViewProvider$Props {
        initialViewList?: any[];
        enableInitialViewChange?: boolean;
        onCreate?(...args: any): any;
        onDelete?(...args: any): any;
        onChangeList?(...args: any): any;
    }
    function ViewProvider(props: ViewProvider$Props): any;
    interface ColumnsManager$Props {
        onChange(...args: any): any;
        columns: any[];
    }
    function ColumnsManager(props: ColumnsManager$Props): any;
    interface DataController$Props {
        onLoad?(...args: any): any;
        pageSize?: number;
    }
    function DataController(props: DataController$Props): any;
    interface Grid$style {
    }
    interface Grid$emptyStateLabel {
    }
    interface Grid$noMatchStateLabel {
    }
    interface Grid$Props {
        data?: any[];
        width?: number;
        height?: number;
        maxHeight?: number;
        tileHeight?: number | "auto" | "row";
        tileMinWidth?: number;
        tileMaxWidth?: number;
        tileSpacing?: number;
        rowSpacing?: number;
        draggable?: boolean;
        style?: Grid$style;
        estimatedRowHeight?: number;
        initialScrollTop?: number;
        passIsScrolling?: boolean;
        itemKey?(...args: any): any;
        onScroll?(...args: any): any;
        onLoad?(...args: any): any;
        overscanRowCount?: number;
        virtualization?: boolean;
        emptyStateLabel?: string | Grid$emptyStateLabel;
        noMatchStateLabel?: string | Grid$noMatchStateLabel;
        tileFallback?: any;
    }
    function Grid(props: Grid$Props): any;
    interface List$columns {
        type?: "select";
    }
    interface List$style {
    }
    interface List$emptyStateLabel {
    }
    interface List$noMatchStateLabel {
    }
    interface List$Props {
        data?: any[];
        width?: number;
        height?: number;
        maxHeight?: number;
        columns?: (List$columns | "select")[];
        tile?(...args: any): any;
        rowHeight?: number | "auto";
        tileHeight?: number | "auto";
        rowAlignment?: "baseline" | "top" | "center" | "bottom" | "stretch";
        rowPadding?: number | string;
        getRowClassName?(...args: any): any;
        getTileClassName?(...args: any): any;
        tileRowSpacing?: number;
        tileListPadding?: string | number;
        style?: List$style;
        estimatedRowHeight?: number;
        estimatedTileHeight?: number;
        initialScrollTop?: number;
        passIsScrolling?: boolean;
        onScroll?(...args: any): any;
        onLoad?(...args: any): any;
        alternateRowBackground?: boolean;
        passAllTileProps?: boolean;
        passAllCellProps?: boolean;
        viewType?: "tile" | "table";
        overscanRowCount?: number;
        headerClassName?: string;
        footerClassName?: string;
        stickyHeader?: boolean;
        stickyHeaderOffset?: number;
        listClassName?: string;
        virtualization?: boolean;
        enableCellSelection?: "none" | "single" | "multiple";
        cellSelectionUnit?: "cell" | "row";
        onCellSelectionChange?(...args: any): any;
        onRowClick?(...args: any): any;
        onTileClick?(...args: any): any;
        emptyStateLabel?: string | List$emptyStateLabel;
        noMatchStateLabel?: string | List$noMatchStateLabel;
    }
    function List(props: List$Props): any;
    namespace List {
        function getColors(colorSchema: any, bgStyle: any): any;
    }
    interface StyledList$columns {
        type?: "select";
    }
    interface StyledList$style {
    }
    interface StyledList$emptyStateLabel {
    }
    interface StyledList$noMatchStateLabel {
    }
    interface StyledList$Props {
        data?: any[];
        width?: number;
        height?: number;
        maxHeight?: number;
        columns?: (StyledList$columns | "select")[];
        tile?(...args: any): any;
        rowHeight?: number | "auto";
        tileHeight?: number | "auto";
        rowAlignment?: "baseline" | "top" | "center" | "bottom" | "stretch";
        rowPadding?: number | string;
        getRowClassName?(...args: any): any;
        getTileClassName?(...args: any): any;
        tileRowSpacing?: number;
        tileListPadding?: string | number;
        style?: StyledList$style;
        estimatedRowHeight?: number;
        estimatedTileHeight?: number;
        initialScrollTop?: number;
        passIsScrolling?: boolean;
        onScroll?(...args: any): any;
        onLoad?(...args: any): any;
        alternateRowBackground?: boolean;
        passAllTileProps?: boolean;
        passAllCellProps?: boolean;
        viewType?: "tile" | "table";
        overscanRowCount?: number;
        headerClassName?: string;
        footerClassName?: string;
        stickyHeader?: boolean;
        stickyHeaderOffset?: number;
        listClassName?: string;
        virtualization?: boolean;
        enableCellSelection?: "none" | "single" | "multiple";
        cellSelectionUnit?: "cell" | "row";
        onCellSelectionChange?(...args: any): any;
        onRowClick?(...args: any): any;
        onTileClick?(...args: any): any;
        emptyStateLabel?: string | StyledList$emptyStateLabel;
        noMatchStateLabel?: string | StyledList$noMatchStateLabel;
    }
    function StyledList(props: StyledList$Props): any;
    namespace StyledList {
        function getColors(colorSchema: any, bgStyle: any): any;
    }
    function DndGrid(props: any): any;
    function DndList(props: any): any;
    function StyledDndList(props: any): any;
    interface Bar$title {
    }
    interface Bar$Props {
        title?: Bar$title | string;
        left?: any | ((...args: any)=>any);
        center?: any | ((...args: any)=>any);
        right?: any | ((...args: any)=>any);
        borderRadius?: string | number;
        elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
        colorSchema?: string;
        bgStyle?: any;
        screenSize?: "xs" | "s" | "m" | "l" | "xl";
        layout?: string;
        expanded?: boolean;
        disabled?: boolean;
        iconExpanded?: any;
        iconCollapsed?: any;
        horizontalPadding?: boolean;
    }
    function Bar(props: Bar$Props): any;
    interface ActionBar$maxActiveActions {
        xl?: number;
        l?: number;
        m?: number;
        s?: number;
        xs?: number;
    }
    interface ActionBar$Props {
        searchable?: boolean;
        searchPlaceholder?: string;
        searchEvents?: ("onBlur" | "onEnter" | "onIconClick" | "onChange")[];
        onItemSearch?(...args: any): any;
        actions?: ((...args: any)=>any) | any[];
        maxActiveActions?: ActionBar$maxActiveActions;
        title?: any;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
        horizontalPadding?: boolean;
    }
    function ActionBar(props: ActionBar$Props): any;
    interface BulkActionBar$maxActiveActions {
        xl?: number;
        l?: number;
        m?: number;
        s?: number;
        xs?: number;
    }
    interface BulkActionBar$Props {
        title?: any;
        actions?: ((...args: any)=>any) | any[];
        maxActiveActions?: BulkActionBar$maxActiveActions;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
        horizontalPadding?: boolean;
    }
    function BulkActionBar(props: BulkActionBar$Props): any;
    interface FilterBar$maxActiveActions {
        xl?: number;
        l?: number;
        m?: number;
        s?: number;
        xs?: number;
    }
    interface FilterBar$Props {
        title?: any;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
        required?: boolean;
        readOnly?: boolean;
        actions?: ((...args: any)=>any) | any[];
        maxActiveActions?: FilterBar$maxActiveActions;
    }
    function FilterBar(props: FilterBar$Props): any;
    interface SorterBar$maxActiveActions {
        xl?: number;
        l?: number;
        m?: number;
        s?: number;
        xs?: number;
    }
    interface SorterBar$Props {
        title?: any;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
        initialDisplayed?: boolean;
        actions?: ((...args: any)=>any) | any[];
        maxActiveActions?: SorterBar$maxActiveActions;
    }
    function SorterBar(props: SorterBar$Props): any;
    interface InfoBar$Props {
        sortable?: boolean;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
        horizontalPadding?: boolean;
    }
    function InfoBar(props: InfoBar$Props): any;
    interface ViewBar$Props {
        title?: any;
        borderRadius?: any;
        elevation?: any;
        bgStyle?: any;
    }
    function ViewBar(props: ViewBar$Props): any;
    interface IconButton$Props {
        icon?: string;
        bgStyle?: any;
        colorSchema?: any;
    }
    function IconButton(props: IconButton$Props): any;
    interface AddButton$Props {
        icon?: string;
        bgStyle?: any;
        colorSchema?: any;
    }
    function AddButton(props: AddButton$Props): any;
    interface ItemButton$Props {
        label?: any;
        value?: any;
        icon?: string;
        borderRadius?: any;
        colorSchema?: any;
        onClick?(...args: any): any;
        onIconClick?(...args: any): any;
        getValueLabel?(...args: any): any;
    }
    function ItemButton(props: ItemButton$Props): any;
    interface BarContainer$Props {
        initialExpanded?: boolean;
    }
    function BarContainer(props: BarContainer$Props): any;
    interface BarContainerButton$Props {
        bgStyle?: any;
        iconExpanded?: string;
        iconCollapsed?: string;
    }
    function BarContainerButton(props: BarContainerButton$Props): any;
    interface SearchButton$Props {
        onItemSearch?(...args: any): any;
        colorSchema?: string;
    }
    function SearchButton(props: SearchButton$Props): any;
    interface FilterableHeaderCell$label {
    }
    interface FilterableHeaderCell$Props {
        label?: string | FilterableHeaderCell$label | ((...args: any)=>any);
        type?: "string" | "number";
        filterKey: string;
        filterOnChange?: boolean;
        textAlignment?: "left" | "center" | "right";
        sorterKey?: string;
        columnIndex?: number;
    }
    function FilterableHeaderCell(props: FilterableHeaderCell$Props): any;
    interface FilterableHeaderCellButton$Props {
        iconExpanded?: string;
        iconCollapsed?: string;
    }
    function FilterableHeaderCellButton(props: FilterableHeaderCellButton$Props): any;
    function withHeaderFilter(Component: any): any;
    function useCombinedRefs(...refs: any): any;
    interface useInitialView$0 {
        initialActiveViewKey?: any;
        onLoad?: any;
    }
    function useInitialView(_: useInitialView$0): any;
    function useColumns(): any;
    function useController(): any;
    function useView(): any;
    function useBarContainer(): any;
    const Lsi: {
        common: {
            emptyState: {
                en: "Nothing to display";
                cs: "Nic k zobrazení";
            };
            noMatchState: {
                en: "No matches for selected filters";
                cs: "Nic k zobrazení pro zvolené filtry";
            };
        };
        actionBar: {
            title: {
                en: "Actions";
                cs: "Akce";
            };
            searchInactive: {
                en: "Inactive ...";
                cs: "Neaktivní ...";
            };
            searchPlaceholder: {
                en: "Search text ...";
                cs: "Hledat text ...";
            };
            searchFilterLabel: {
                en: "Search";
                cs: "Hledat";
            };
        };
        bulkActionBar: {
            showSelection: {
                en: "Show Selection";
                cs: "Zobrazit výběr";
            };
            showAll: {
                en: "Show all";
                cs: "Zobrazit vše";
            };
            resetSelection: {
                en: "Unselect all";
                cs: "Zrušit výběr";
            };
            title: {
                en: "Bulk Actions";
                cs: "Hromadné akce";
            };
            counter: {
                en: "${count} selected";
                cs: "Vybráno ${count}";
            };
        };
        filterBar: {
            title: {
                en: "Filters";
                cs: "Filtry";
            };
            addFilter: {
                en: "Add Filter";
                cs: "Přidat filtr";
            };
            resetFilters: {
                en: "Reset Filters";
                cs: "Resetovat filtry";
            };
        };
        sorterBar: {
            title: {
                en: "Sorting";
                cs: "Řazení";
            };
            addSorter: {
                en: "Add Sorting";
                cs: "Přidat řazení";
            };
            resetSorters: {
                en: "Reset Sorters";
                cs: "Resetovat řazení";
            };
            ascOrder: {
                en: "Ascending";
                cs: "Vzestupně";
            };
            descOrder: {
                en: "Descending";
                cs: "Sestupně";
            };
        };
        viewBar: {
            title: {
                en: "Saved Views";
                cs: "Uložené pohledy";
            };
            saveView: {
                en: "Save View";
                cs: "Uložit pohled";
            };
            manageViews: {
                en: "Manage Views";
                cs: "Spravovat pohledy";
            };
            selectPlaceholder: {
                en: "Select a view";
                cs: "Vyberte pohled";
            };
        };
        filterBarForm: {
            keyLabel: {
                en: "Select a filter type";
                cs: "Vyberte typ filtru";
            };
            valueLabel: {
                en: "Value";
                cs: "Hodnota";
            };
            addButton: {
                en: "Add";
                cs: "Přidat";
            };
            addButtonXS: {
                en: "Add filter";
                cs: "Přidat filtr";
            };
            changeButton: {
                en: "Change";
                cs: "Změnit";
            };
            changeButtonXS: {
                en: "Change filter";
                cs: "Změnit filtr";
            };
        };
        sorterBarForm: {
            keyLabel: {
                en: "Select a sorter type";
                cs: "Vyberte typ řazení";
            };
            valueLabel: {
                en: "Value";
                cs: "Hodnota";
            };
            addButton: {
                en: "Add";
                cs: "Přidat";
            };
            addButtonXS: {
                en: "Remove sorter";
                cs: "Odebrat řazení";
            };
            changeButton: {
                en: "Change";
                cs: "Změnit";
            };
            changeButtonXS: {
                en: "Change sorter";
                cs: "Změnit řazení";
            };
        };
        infoBar: {
            unsorted: {
                en: "Unsorted";
                cs: "Neseřazeno";
            };
            advancedSort: {
                en: "Advanced Sort";
                cs: "Pokročilé řazení";
            };
            ascOrder: {
                en: "Ascending";
                cs: "vzestupně";
            };
            descOrder: {
                en: "Descending";
                cs: "sestupně";
            };
            counter: {
                en: "Showing ${count} of ${total}";
                cs: "Zobrazeno ${count} z ${total}";
            };
            select: {
                en: "Select All";
                cs: "Označ vše";
            };
            deselect: {
                en: "Cancel Selection";
                cs: "Zrušit označení";
            };
            selectionDropdown: {
                en: "Selection";
                cs: "Označení";
            };
        };
        listController: {
        };
        simpleFilterPanel: {
            filterTypeLabel: {
                en: "Select filter type";
                cs: "Vyber typ filtru";
            };
            filterTypePlaceholder: {
                en: "Select filter";
                cs: "Vyber filtr";
            };
            filterValueLabel: {
                en: "And its value";
                cs: "A jeho hodnotu";
            };
            filterValuePlaceholder: {
                en: "Filter value";
                cs: "Hodnota filtru";
            };
            addButton: {
                en: "Add";
                cs: "Přidat";
            };
        };
        tile: {
        };
        searchButton: {
            filterLabel: {
                cs: "Hledání";
                en: "Search";
            };
            inputPlaceholder: {
                cs: "Hledat";
                en: "Search";
            };
        };
        search: {
            filterLabel: {
                cs: "Hledání";
                en: "Search";
            };
        };
        listModal: {
            searchPlaceholder: {
                cs: "Rychlé hledání";
                en: "Quick search";
            };
            confirm: {
                cs: "Potvrdit";
                en: "Confirm";
            };
            cancel: {
                cs: "Zrušit";
                en: "Cancel";
            };
        };
        columnsManagerModal: {
            modalHeader: {
                cs: "Správa sloupců";
                en: "Manage columns";
            };
            modalInfo: {
                cs: "Řádky představují jednotlivé sloupce ve spravovaném Listu. Je možné přetahovat je a tím měnit jejich pořadí. Checkboxy umožňují nastavovat jejich viditelnost.";
                en: "Rows represent individual columns of the managed List. Their order can by changed by using drag&drop. Checkboxes toggle their visibility.";
            };
            selectAll: {
                cs: "Označit vše";
                en: "Select All";
            };
            deselectAll: {
                cs: "Odoznačit vše";
                en: "Deselect All";
            };
            sortingIconTooltip: {
                cs: "Tento sloupec je použit k řazení dat";
                en: "This column is used for data sorting";
            };
            error: {
                cs: "Alespoň jeden ze sloupců musí být zobrazen (zaškrtnutý checkbox).";
                en: "Atleast one of the columns has to be displayed (checked checkbox).";
            };
        };
        viewManagerModal: {
            modalHeader: {
                cs: "Správa pohledů";
                en: "Manage views";
            };
            modalInfo: {
                cs: "Řádky představují jednotlivé uložené pohledy. Je možné přetahovat je a tím měnit jejich pořadí.";
            };
            initialActiveView: {
                cs: "Výchozí pohled";
                en: "Initial view";
            };
            deleteTooltip: {
                cs: "Odstranit";
                en: "Remove";
            };
            cancelDelete: {
                cs: "Zrušit odstranění";
                en: "Do not remove";
            };
        };
        saveViewModal: {
            modalHeader: {
                cs: "Uložit nový pohled";
                en: "Save New View";
            };
            saveButton: {
                cs: "Uložit pohled";
                en: "Save View";
            };
            cancelButton: {
                cs: "Zrušit";
                en: "Cancel";
            };
        };
        dataProvider: {
            duplicateOnLoadWarning: {
                en: string;
            };
            duplicateFiltersSortersWarning: {
                en: string;
            };
        };
    };
}