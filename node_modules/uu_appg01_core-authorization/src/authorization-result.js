"use strict";

/**
 * Result of the authorization process checking whether a user represented by a session is authorized
 * to access resource at selected uri.
 */
class AuthorizationResult {
  /**
   * Creates new instance of authorization result.
   * @param {Object} data Authorization data
   * @param {String} data.uuIdentity Identity for which was authorization performed
   * @param {String} data.getUseCase UseCase for which was authorization performed
   *
   * @param {boolean} data.isAuthorized Flag if user is authorized to access selected use case
   * @param {String} data.authorizationStrategy Authorization Strategy used for authorization
   * @param {Array} data.profileList List of all profiles
   * @param {Array} data.authorizedProfileList List of profiles that are authorized for current session and use case
   * @param {Array} data.authorizedProfiles List of profiles that are authorized for current session and use case (@deprecated use 'profileList')
   * @param {Array} data.uuIdentityProfileList List of all profiles for identity represented by current session
   * @param {Array} data.identityProfiles List of all profiles for identity represented by current session (@deprecated use 'uuIdentityProfileList')
   * @param {Array} data.useCaseProfileList List of profiles associated with use case
   *
   * @param {boolean} data.isObjectAuthorized Flag if user is authorized by object to access selected use case
   * @param {String} data.objectAuthorizationStrategy Authorization Strategy used for authorization of object
   * @param {Array} data.authorizedObjectProfileList list of object profiles associated with the use case for which is the uuIdentity authorized
   * @param {Array} data.uuIdentityObjectProfileList List of all object profiles for identity
   * @param {Array} data.useCaseObjectProfileList List of object profiles associated with use case
   *
   * @param {boolean} data.authorizationEnabled Flag if authorization is enabled for selected use case
   */
  constructor(data = {}) {
    this._uuIdentity = data.uuIdentity;
    this._useCase = data.useCase;

    this._isAuthorized = data.isAuthorized;
    this._authorizationStrategy = data.authorizationStrategy || null;
    this._authorizedProfiles = data.authorizedProfileList || data.authorizedProfiles || [];
    this._identityProfiles = data.uuIdentityProfileList || data.identityProfiles || [];
    this._useCaseProfileList = data.useCaseProfileList || [];
    this._profileList = data.profileList || [];
    if (this._isAuthorized == null) {
      this._isAuthorized = this._authorizedProfiles.length > 0;
    }

    this._isObjectAuthorized = data.isObjectAuthorized;
    this._objectAuthorizationStrategy = data.objectAuthorizationStrategy || null;
    this._authorizedObjectProfileList = data.authorizedObjectProfileList || [];
    this._uuIdentityObjectProfileList = data.uuIdentityObjectProfileList  || [];
    this._useCaseObjectProfileList = data.useCaseObjectProfileList || [];
    if (this._isObjectAuthorized == null) {
      this._isObjectAuthorized = this._authorizedObjectProfileList.length > 0;
    }

    this._authorizationEnabled = data.authorizationEnabled;
    if (this._authorizationEnabled == null) {
      this._authorizationEnabled = true;
    }
  }

  /**
   * Returns information if the current user is authorized to access selected use case.
   * @returns {boolean} true = authorized, false = not authorized for current use case
   */
  isAuthorized() {
    return !!this._isAuthorized;
  }

  /**
   * Returns uuIdentity for which was authorization performed.
   * @returns {String|*} UuIdentity for which was authorization performed
   */
  getUuIdentity() {
    return this._uuIdentity;
  }

  /**
   * Returns use case for which was authorization performed.
   * @returns {String} Use case for which was authorization performed
   */
  getUseCase() {
    return this._useCase;
  }

  /**
   * Returns authorization strategy used for authorization.
   * @returns {String} authorization strategy used for authorization.
   */
  getAuthorizationStrategy() {
    return this._authorizationStrategy;
  }

  /**
   * Returns a list of all profiles.
   * @returns {Array} List of all profiles
   */
  getProfileList() {
    return this._profileList;
  }

  /**
   * Returns a list of all profiles accessible with the current session and use case.
   * @returns {Array} List of profiles that are authorized for current session and current use case
   */
  getAuthorizedProfileList() {
    return this._authorizedProfiles;
  }

  /**
   * Returns a list of all profiles accessible with the current session and use case.
   * @deprecated use 'getAuthorizedProfileList'
   * @returns {Array} List of profiles that are authorized for current session and current use case
   */
  getAuthorizedProfiles() {
    return this._authorizedProfiles;
  }

  /**
   * Returns a list of all profiles available for authenticated identity.
   * @returns {Array} List of all profiles available for authenticated identity
   */
  getUuIdentityProfileList() {
    return this._identityProfiles;
  }

  /**
   * Returns a list of all profiles available for authenticated identity.
   * @deprecated use 'getUuIdentityProfileList'
   * @returns {Array} List of all profiles available for authenticated identity
   */
  getIdentityProfiles() {
    return this._identityProfiles;
  }

  /**
   * Returns a list of profiles associated with called use case.
   * @returns {Array} List of profiles associated with called use case.
   */
  getUseCaseProfileList() {
    return this._useCaseProfileList;
  }

  /**
   * Returns information if the uuIdentity is authorized by object to access selected use case
   * @returns {boolean} true = authorized, false = not authorized by object for selected use case
   */
  isObjectAuthorized() {
    return !!this._isObjectAuthorized;
  }

  /**
   * Returns authorization strategy used for authorization of object.
   * @returns {String} Authorization strategy used for authorization of object.
   */
  getObjectAuthorizationStrategy() {
    return this._objectAuthorizationStrategy;
  }

  /**
   * Returns a list of object profiles associated with the use case for which is the uuIdentity authorized.
   * @returns {Array} list of object profiles associated with the use case for which is the uuIdentity authorized
   */
  getAuthorizedObjectProfileList() {
    return this._authorizedObjectProfileList;
  }

  /**
   * Returns a list of all object profiles available for uuIdentity.
   * @returns {Array} List of all object profiles available for uuIdentity
   */
  getUuIdentityObjectProfileList() {
    return this._uuIdentityObjectProfileList;
  }

  /**
   * Returns a list of object profiles associated with use case.
   * @returns {Array} List of object profiles associated with use case.
   */
  getUseCaseObjectProfileList() {
    return this._useCaseObjectProfileList;
  }

  /**
   * Returns information if the authorization is enabled for selected use case.
   * @returns {boolean} true = authorization enabled, false = authorization disabled for current use case
   */
  isAuthorizationEnabled() {
    return this._authorizationEnabled;
  }
}

module.exports = AuthorizationResult;
