"use strict";

const { BaseError, Config } = require("uu_appg01_core-utils");

const DEFAULT_PROVIDER_PARAM = "uu_app_default_authz_provider";

const realizations = {};

/**
 * Service providing authorization checks.
 */
class AuthorizationService {
  /**
   * @returns {string} Name of configuration parameter for accessing default realization of authorization service.
   */
  static get DEFAULT_PROVIDER_PARAM() {
    return DEFAULT_PROVIDER_PARAM;
  }

  /**
   * Checks whether identity represented by the session is authorized to access resources at given uri. In case identity
   * is not authorized, error is not directly raised, but unauthorized authorization context is returned as result.
   * Logic which is performing authorization is then responsible to raise AccessDenied error in case there is no
   * alternative flow to handle unauthorized access.
   * @param {Session} session Instance of session representing authenticated user
   * @param {URI} uri Address of the use case
   * @returns {Promise<AuthorizationResult>} Authorization result
   */
  static async authorize(session, uri) {
    let realization = AuthorizationService.get();
    return await realization.authorize(session, uri);
  }

  /**
   * Checks whether identity represented by the session is authorized to use case using provided object authorization strategy.
   * In case identity is not authorized, error is not directly raised, but unauthorized authorization context is returned as result.
   * Logic which is performing authorization is then responsible to raise AccessDenied error in case there is no
   * alternative flow to handle unauthorized access.
   * @param {Session} session Instance of session representing authenticated user
   * @param {Object} useCase Use case definition
   * @param {String} useCase.name Use case name
   * @param {String} useCase.objectProfileList List of object (uuAppType) profiles defined for the use case.
   *                                           This parameter is not required for artifact strategy, because in that case uuAppType profiles are part of metamodel.
   * @param {Object} authorizationData authorization data contains required data for performing the authorization
   * @param {String} authorizationData.authorizationStrategy Name of authorization strategy. By default 4 strategies are supported:artifact, boundArtifact, roleGroupInterface, uuIdentityList
   *                                                         Each strategy required different parameters as described below.
   * @param {String} authorizationData.artifactId Id of the artifact used by artifact strategy
   * @param {String} authorizationData.artifactCode Code of the artifact used by artifact strategy
   * @param {String} authorizationData.uuTerritoryBaseUri Base uri of uuBusinessTerritory or uuMyTerritory used by boundArtifact strategy.
   * @param {String} authorizationData.boundArtifactId Id of the artifact used by bound artifact strategy
   * @param {String} authorizationData.boundArtifactCode Code of the artifact used by bound artifact strategy
   * @param {String} authorizationData.boundArtifactProfileMap Maps profiles of bound artifact to profiles of the object
   * @param {String} authorizationData.roleGroupUriMap Maps object profiles to a particular role or group uris. Used for RoleGroupInterface strategy.
   * @param {String} authorizationData.permissionMap Maps object profiles to a particular uuIdentities. Used for uuIdentityList strategy.
   * @returns {Promise<AuthorizationResult>} Authorization result
   */
  static async authorizeObject(session, useCase, authorizationData) {
    let realization = AuthorizationService.get();
    return await realization.authorizeObject(session, useCase, authorizationData);
  }

  /**
   * Returns particular realization of authorization service.
   * @param realizationName Name of required authorization service realization
   * @returns {*} Object responding to "authorize" method
   * @throws {BaseError} In case realization with given name does not exist
   */
  static get(realizationName = null) {
    let name = realizationName || Config.get(DEFAULT_PROVIDER_PARAM);
    let realization = realizations[name];
    if (realization) {
      return realization;
    } else {
      throw new BaseError(`There is no authorization provider with name "${name}".`);
    }
  }

  /**
   * Registers custom realization of authorization service.
   * @param realizationName Custom authorization service realization name
   * @param realization Object responding to "authorize" method
   * @private
   */
  static _register(realizationName, realization) {
    realizations[realizationName] = realization;
  }
}

module.exports = AuthorizationService;
