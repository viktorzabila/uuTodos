const ResponseCounter = require("../components/response-counter.js");

class AppStatusCounter {
  constructor() {
    this.counter = this._initialize();
  }

  get get() {
    return this.counter;
  }

  restart() {
    this.counter.period.endTime = new Date().toISOString();
    let counter = this.get;
    // initialize a new counter
    this._initialize();
    // returns the data of the old counter
    return counter;
  }

  calcTotalCalls(statusCode, respTime) {
    let res = this._getTotalCalls();
    !res ? this._setTotalCalls(ResponseCounter.record(statusCode, respTime)) : this._setTotalCalls(ResponseCounter.record(statusCode, respTime, res))
  }

  calcAwidMapByAwid(awid, statusCode, respTime) {
    let res = this._getAwidMapByAwid(awid);
    !res ? this._setAwidMapByAwid(awid, ResponseCounter.record(statusCode, respTime)) : this._setAwidMapByAwid(awid, ResponseCounter.record(statusCode, respTime, res));
  }

  calcUuCmdMapByUc(ucName, statusCode, respTime) {
    let res = this._getUuCmdMapByUc(ucName);
    !res ? this._setUuCmdMapByUc(ucName, ResponseCounter.record(statusCode, respTime)) : this._setUuCmdMapByUc(ucName, ResponseCounter.record(statusCode, respTime, res));
  }

  incrUuAppErrorCodeMapByErrorCode(errorCode) {
    this._getUuAppErrorCodeMapByErrorCode(errorCode) ? this._setUuAppErrorCodeMapByErrorCode(errorCode, this._getUuAppErrorCodeMapByErrorCode(errorCode) + 1)
      : this._setUuAppErrorCodeMapByErrorCode(errorCode, 1)
  }

  incrHttpStatusCodeMapByStatusCode(statusCode) {
    this._getHttpStatusCodeMapByStatusCode(statusCode) ? this._setHttpStatusCodeMapByStatusCode(statusCode, this._getHttpStatusCodeMapByStatusCode(statusCode) + 1)
      : this._setHttpStatusCodeMapByStatusCode(statusCode, 1)
  }

  incrUuIdentityMapByUuId(uuId) {
    this._getUuIdentityMapById(uuId) ? this._setUuIdentityMapById(uuId, this._getUuIdentityMapById(uuId) + 1) : this._setUuIdentityMapById(uuId, 1);
  }

  incrUuSystemIdentityMapByAwid(awid) {
    this._getUuSystemIdentityMapByAwid(awid) ? this._setUuSystemIdentityMapByAwid(awid, this._getUuSystemIdentityMapByAwid(awid) + 1) : this._setUuSystemIdentityMapByAwid(awid, 1);
  }

  _setUuCmdMapByUc(ucName, value) {
    this.counter.uuCmdData.uuCmdMap[ucName] = value;
  }

  _getUuCmdMapByUc(ucName) {
    return this.counter.uuCmdData.uuCmdMap[ucName];
  }

  _setAwidMapByAwid(awid, value) {
    this.counter.uuCmdData.awidMap[awid] = value;
  }

  _getAwidMapByAwid(awid) {
    return this.counter.uuCmdData.awidMap[awid];
  }

  _setTotalCalls(value) {
    this.counter.uuCmdData.totalCalls = value;
  }

  _getTotalCalls() {
    return this.counter.uuCmdData.totalCalls
  }

  _setUuAppErrorCodeMapByErrorCode(errorCode, value) {
    this.counter.uuCmdData.uuAppErrorCodeMap[errorCode] = value;
  }

  _getUuAppErrorCodeMapByErrorCode(errorCode) {
    return this.counter.uuCmdData.uuAppErrorCodeMap[errorCode];
  }

  _setHttpStatusCodeMapByStatusCode(statusCode, value) {
    this.counter.uuCmdData.httpStatusCodeMap[statusCode] = value;
  }

  _getHttpStatusCodeMapByStatusCode(statusCode) {
    return this.counter.uuCmdData.httpStatusCodeMap[statusCode];
  }

  _setUuIdentityMapById(uuId, value) {
    this.counter.uuIdentityData.uuIdentityMap[uuId] = value;
  }

  _getUuIdentityMapById(uuId) {
    return this.counter.uuIdentityData.uuIdentityMap[uuId];
  }

  _setUuSystemIdentityMapByAwid(awid, value) {
    this.counter.uuIdentityData.uuSystemIdentityMap[awid] = value;
  }

  _getUuSystemIdentityMapByAwid(awid) {
    return this.counter.uuIdentityData.uuSystemIdentityMap[awid];
  }

  _initialize() {
    return this.counter = {
      period: { startTime: new Date().toISOString(), endTime: null },
      uuCmdData: {
        totalCalls: {},
        awidMap: {},
        uuCmdMap: {},
        uuAppErrorCodeMap: {},
        httpStatusCodeMap: {}
      },
      uuIdentityData: {
        uuIdentityMap: {},
        uuSystemIdentityMap: {}
      }
    };
  }
}

module.exports = new AppStatusCounter();
