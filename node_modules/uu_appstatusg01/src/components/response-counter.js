class ResponseCounter {
  constructor() {
  }

  /**
   * Records a new values to response counter
   * @param statusCode
   * @param respTime
   * @param respCounter
   * @return {*&{avgRespTime: number, minRespTime: number, count: number, error5xxCount: number, error4xxCount: number, maxRespTime: number, status1xxCount: number, status2xxCount: number, status3xxCount: number}}
   */
  record(statusCode, respTime, respCounter) {
    let resp;
    (!respCounter || Object.keys(respCounter).length === 0) ? resp = this._initialize() : resp = respCounter;
    resp = { ...resp, ...this._calcCodeStatus(statusCode, resp), ...this._calcRespTime(respTime, resp) }
    return resp;
  }

  /**
   * Calculates status code statistics
   * @param statusCode
   * @param resp
   * @return {*}
   * @private
   */
  _calcCodeStatus(statusCode, resp) {
    resp.count += 1;
    if (statusCode) {
      if (statusCode < 200) {
        resp.status1xxCount += 1;
      } else if (statusCode < 300) {
        resp.status2xxCount += 1;
      } else if (statusCode < 400) {
        resp.status3xxCount += 1;
      } else if (statusCode < 500) {
        resp.error4xxCount += 1
      } else {
        resp.error5xxCount += 1
      }
    }
    return resp;
  }

  /**
   * Calculates response time statistics
   * @param respTime Time in milliseconds.
   * @param resp Object with response statistics.
   * @return {Object}  Object with calculated response time statistics.
   * @private
   */
  _calcRespTime(respTime = 0, resp = {}) {
    respTime = Math.trunc(respTime);
    if (respTime < resp.minRespTime || resp.minRespTime === 0) resp.minRespTime = respTime;
    if (respTime > resp.maxRespTime) resp.maxRespTime = respTime;
    if (resp.avgRespTime === 0) {
      resp.avgRespTime = respTime
    } else {
      resp.avgRespTime = Math.trunc((resp.avgRespTime + respTime) / 2);
    }
    return resp;
  }

  /**
   * Initializes a new response counter
   * @return {{avgRespTime: number, minRespTime: number, count: number, error5xxCount: number, error4xxCount: number, maxRespTime: number, status1xxCount: number, status2xxCount: number, status3xxCount: number}}
   * @private
   */
  _initialize() {
    return {
      count: 0,
      status1xxCount: 0,
      status2xxCount: 0,
      status3xxCount: 0,
      error4xxCount: 0,
      error5xxCount: 0,
      minRespTime: 0,
      avgRespTime: 0,
      maxRespTime: 0
    }
  }
}

module.exports = new ResponseCounter();
