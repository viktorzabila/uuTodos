"use strict";

const { Sys } = require("uu_appg01_core-appserver");

const { UriBuilder } = require("uu_appg01_core-uri");
const { AppClient } = require("uu_appg01_server-client");
const { Config } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { AuthenticationService } = require("uu_appg01_core-authentication");
const AppStatusCounter = require("../src/components/app-status-counter.js");

const APP_STATUS_PROGRESS_BASE_URI_CONFIG_NAME = "uu_app_status_progress_base_uri";
const APP_STATUS_PROGRESS_BUS_CODE_CONFIG_NAME = "uu_app_status_progress_bus_code";
const APP_STATUS_PROGRESS_UUEE_CONFIG_NAME = "uu_app_status_progress_uuee";
const APP_STATUS_PROGRESS_UPDATE_PERIOD_CONFIG_NAME = "uu_app_status_progress_update_period";
const APP_STATUS_PROGRESS_UPDATE_PERIOD_DEFAULT_VALUE = 60;
const APP_STATUS_PROGRESS_DATA_HISTORY_COUNT_CONFIG_NAME = "uu_app_status_progress_data_history_count";
const APP_STATUS_PROGRESS_DATA_HISTORY_COUNT_DEFAULT_VALUE = 5;

const APP_STATUS_PROGRESS_WARNING_PERIOD_CONFIG_NAME = "uu_app_status_progress_problem_warning_period";
const APP_STATUS_PROGRESS_WARNING_PERIOD_DEFAULT_VALUE = 15;
const APP_STATUS_PROGRESS_ERROR_PERIOD_CONFIG_NAME = "uu_app_status_progress_problem_error_period";
const APP_STATUS_PROGRESS_ERROR_PERIOD_DEFAULT_VALUE = 30;
const APP_STATUS_PROGRESS_EXPIRE_PERIOD_CONFIG_NAME = "uu_app_status_progress_expire_period";
const APP_STATUS_PROGRESS_EXPIRE_PERIOD_DEFAULT_VALUE = 3600;
const PROGRESS_BUS_LOAD = "progressBus/load";
const PROGRESS_BUS_CREATE = "progressBus/create";
const PROGRESS_CREATE = "progressBus/progress/create";
const PROGRESS_START = "progressBus/progress/start";
const PROGRESS_PROCEED = "progressBus/progress/proceed";
const PROGRESS_END = "progressBus/progress/end";
const PROGRESS_DELETE = "progressBus/progress/delete";
const LOCKSECRET = "442bce0ca09d14fdea0077895468bf38857649da8c7034338aed94f71e501bc3";
const PROGRESS_BUS_DOES_NOT_EXIST = "progressBusDoesNotExist";
const PROGRESS_DOES_NOT_EXIST = "progressDoesNotExist";
const PROGRESS_IS_NOT_IN_PROPER_STATE = "progressIsNotInProperState";
const APP_STATUS = "uuAppStatus";
const AUTHORIZATION_STRATEGY = "artifact";
const PROGRESS_STATES = ["waiting", "completed", "completedWithWarning", "completedWithError"];

const SPP_DEFAULT = "";

const LOGGER = LoggerFactory.get("Uu.AppStatus.Updater");
const APPINFO = Sys.getAppInfo();
const NODE_START_TIME = new Date().toISOString();

class StatusUpdater {
  constructor() {
    // 1. System sets progressUpdatePeriod
    this.progressUpdatePeriod =
      Config.get(APP_STATUS_PROGRESS_UPDATE_PERIOD_CONFIG_NAME)
        ? Config.getNumber(APP_STATUS_PROGRESS_UPDATE_PERIOD_CONFIG_NAME)
        : APP_STATUS_PROGRESS_UPDATE_PERIOD_DEFAULT_VALUE;

    // 2. System sets progressWarningPeriod
    this.progressErrorPeriod =
      Config.get(APP_STATUS_PROGRESS_ERROR_PERIOD_CONFIG_NAME)
        ? Config.getNumber(APP_STATUS_PROGRESS_ERROR_PERIOD_CONFIG_NAME)
        : APP_STATUS_PROGRESS_ERROR_PERIOD_DEFAULT_VALUE;

    // 3. System sets progressErrorPeriod
    this.progressWarningPeriod =
      Config.get(APP_STATUS_PROGRESS_WARNING_PERIOD_CONFIG_NAME)
        ? Config.getNumber(APP_STATUS_PROGRESS_WARNING_PERIOD_CONFIG_NAME)
        : APP_STATUS_PROGRESS_WARNING_PERIOD_DEFAULT_VALUE;

    // 4. System sets progressUuEe
    this.progressUuEe = Config.get(APP_STATUS_PROGRESS_UUEE_CONFIG_NAME);

    // 5. System sets progressUri
    this.progressUri =
      Config.get(APP_STATUS_PROGRESS_BASE_URI_CONFIG_NAME)
        ? UriBuilder.parse(Config.get(APP_STATUS_PROGRESS_BASE_URI_CONFIG_NAME))
        : null;

    // 6. System sets progressBusCode
    this.progressBusCode =
      Config.get(APP_STATUS_PROGRESS_BUS_CODE_CONFIG_NAME)
        ? Config.get(APP_STATUS_PROGRESS_BUS_CODE_CONFIG_NAME)
        : `${APP_STATUS.toLowerCase()}_${Config.get("asid")}`;

    // 7. System sets progressExpirePeriod
    this.progressExpirePeriod =
      Config.get(APP_STATUS_PROGRESS_EXPIRE_PERIOD_CONFIG_NAME)
        ? Config.getNumber(APP_STATUS_PROGRESS_EXPIRE_PERIOD_CONFIG_NAME)
        : APP_STATUS_PROGRESS_EXPIRE_PERIOD_DEFAULT_VALUE;

    // 8. System sets nodeName from environment (nodeName format example:   "nodeName": "uuappg01_async-uu_script_engineg02_async-1617198494548.1.nkvnwdhr0k5w5pvcw5x2vsfpj"),
    this.nodeName = typeof process.env.UU_CLOUD_NODE_NAME !== "undefined"
      ? process.env.UU_CLOUD_NODE_NAME
      : `uuappg01-${APPINFO.uuSubApp.replace("-server", "")}-${new Date().getTime()}.1.${new Date().getTime()}`;

    // 9. System sets spp
    let product = this.nodeName.split("-")[1].split("_");
    this.spp = product.length === 4 ? product.pop() : SPP_DEFAULT;

    // 10. System sets progressCode
    this.progressCode = this.spp === SPP_DEFAULT
      ? this.nodeName.slice(this.nodeName.lastIndexOf("-") + 1).replace(/\./g, "_")
      : this.nodeName.slice(this.nodeName.lastIndexOf("-") + 1).replace(/\./g, "_") + `_${this.spp}`;

    // 11. System sets asid
    this.asid = Config.get("asid");

    // 12. System sets runtime stack code
    this.runtimeStackCode = typeof process.env.UU_CLOUD_RUNTIME_STACK_CODE !== "undefined" ? process.env.UU_CLOUD_RUNTIME_STACK_CODE : "";

    // 13. Systems sets node start time
    this.uuCloudNodeStartTime = NODE_START_TIME;

    // 14. Systems sets progressDataHistoryCount
    this.progressDataHistoryCount = Config.get(APP_STATUS_PROGRESS_DATA_HISTORY_COUNT_CONFIG_NAME)
      ? Config.getNumber(APP_STATUS_PROGRESS_DATA_HISTORY_COUNT_CONFIG_NAME)
      : APP_STATUS_PROGRESS_DATA_HISTORY_COUNT_DEFAULT_VALUE;
  }

  async update() {

    // 1. System sets estimatedNextProgressTs, expireAt and uuSubAppName
    let date = new Date();
    let estimatedNextProgressTs = new Date(date.getTime());
    estimatedNextProgressTs.setSeconds(estimatedNextProgressTs.getSeconds() + this.progressUpdatePeriod);
    let expireAt = new Date(date.getTime());
    expireAt.setTime(expireAt.getTime() + (this.progressExpirePeriod * 1000));
    let uuSubAppName = this.nodeName
      .split("-")[1]
      .split("_")
      .map((s, i) => i === 0 ? s : s && s[0].toUpperCase() + s.slice(1))
      .slice(0, 3)
      .join("");

    // 2. System prepares progress proceedDtoIn
    let componentData = AppStatusCounter.restart();
    let proceedDtoIn = {
      code: this.progressCode,
      estimatedNextProgressTs: estimatedNextProgressTs.toISOString(),
      lockSecret: LOCKSECRET,
      delayWarning: this.progressWarningPeriod,
      delayError: this.progressErrorPeriod,
      expireAt: expireAt.toISOString(),
      data: {
        uuSubAppName: uuSubAppName,
        uuSubAppVersion: APPINFO.uuSubAppVersion,
        asid: this.asid,
        spp: this.spp,
        uuAppRuntimeStack: this.runtimeStackCode,
        uuCloudNodeName: this.nodeName,
        uuCloudNodeStartTime: this.uuCloudNodeStartTime,
        componentData
      }
    };

    // 3. System sets progress/proceed useCase
    this.progressUri.setUseCase(PROGRESS_PROCEED);

    // 4. System sets session
    let session;
    if (this.progressUuEe) { // 4.A
      session = await AuthenticationService.authenticate(this.progressUuEe);
    } else { // 4.B
      session = await AuthenticationService.authenticateSystemIdentity();
    }

    // 5. System tries to proceed progress
    try { // 5.A.
      await AppClient.post(this.progressUri, proceedDtoIn, { session });
    } catch (e) { // 5.B. // TODO refactor this try/catch hell

      // 5.B.2. System checks if progressDoesNotExist or progressIsNotInProperState error occured and procceses it
      if (e.code && (e.code.endsWith(PROGRESS_DOES_NOT_EXIST))) { //5.B.1.A.
        LOGGER.info(`Progress representing the current node doesn't exist (code ${proceedDtoIn.code}). Creating...`)

        // 5.B.2.A.1. System parses node_set_unique_id and node_number_in_node_set from progressCode
        let nodeSetUniqueId = this.progressCode.split("_")[0];
        let nodeNumberInNodeSet = this.progressCode.split("_")[1];

        // 5.B.2.A.2. System prepares progressCreateDtoIn
        let progressCreateDtoIn = {
          code: this.progressCode,
          progressBusCode: this.progressBusCode,
          name: this.spp === SPP_DEFAULT ? `Node ${nodeNumberInNodeSet}` : `Node ${nodeNumberInNodeSet} (${this.spp})`
        };

        // 5.B.2.A.3. node number 1 in each nodeSet checks if exist progressBus and old progresses
        if (nodeNumberInNodeSet === "1") {

          // 5.B.2.A.3.A.1. System tries to get progressBus with all progresses
          try { // 5.B.2.A.3.A.1.A.

            // 5.B.2.A.3.A.1.A.1. System sets use case to progressBus/load
            this.progressUri.setUseCase(PROGRESS_BUS_LOAD);

            // 5.B.2.A.3.A.1.A.2. System loads progressBus using AppClient with session from HDS 4.
            let progressBus = await AppClient.get(this.progressUri, { code: this.progressBusCode }, { session });

            // 5.B.2.A.3.A.1.A.3. System checks for progresses and removes old ones if necessary
            if (progressBus.progressList.length > 0) { // 5.B.2.A.3.A.1.A.3.A.

              // 5.B.2.A.3.A.1.A.3.A.1. For each progress
              for (let progress of progressBus.progressList) {

                // 5.B.2.A.3.A.1.A.3.A.1.1. System parses node ids from progress.code
                let nodeIdsFromProgress = progress.code.split("_");
                let _nodeSetUniqueId = progress.code.split("_")[0];

                // 5.B.2.A.3.A.1.A.3.A.1.2. System checks if app is deployed after undeploy or redeployed with different version
                if ((nodeSetUniqueId !== _nodeSetUniqueId && nodeIdsFromProgress.length < 4 && this.spp === SPP_DEFAULT)
                  || (nodeSetUniqueId !== _nodeSetUniqueId && this.spp === nodeIdsFromProgress[3])
                  || (progress.data.uuSubAppVersion !== APPINFO.uuSubAppVersion && nodeIdsFromProgress.length < 4 && this.spp === SPP_DEFAULT)
                  || (progress.data.uuSubAppVersion !== APPINFO.uuSubAppVersion && this.spp === nodeIdsFromProgress[3])) { //5.B.2.A.3.A.1.A.3.A.1.2.A.

                  LOGGER.debug(`Deleting old progress representing node of previous deployment(code ${progress.code}).`)

                  // 5.B.2.A.3.A.1.A.3.A.1.2.A.1. System prepares progressEndDtoIn for ending progress.
                  let progressEndDtoIn = {
                    code: progress.code,
                    lockSecret: LOCKSECRET
                  }

                  // 5.B.2.A.3.A.1.A.3.A.1.2.A.2. System sets use case to progress/end
                  this.progressUri.setUseCase(PROGRESS_END);

                  // 5.B.2.A.3.A.1.A.3.A.1.2.A.3. System tries to end old progress
                  try { // 5.B.2.A.3.A.1.A.3.A.1.2.A.3.A.
                    await AppClient.post(this.progressUri, progressEndDtoIn, { session })
                  } catch (e) { // 5.B.2.A.3.A.1.A.3.A.1.2.A.3.B.
                    LOGGER.error(`Progress end failed: `, e);
                  }

                  // 5.B.2.A.3.A.1.A.3.A.1.2.A.4. System sets use case to progress/delete
                  this.progressUri.setUseCase(PROGRESS_DELETE);

                  // 5.B.2.A.3.A.1.A.3.A.1.2.A.5. System tries to delete old progress
                  try { // 5.B.2.A.3.A.1.A.3.A.1.2.A.5.A.
                    await AppClient.post(this.progressUri, { code: progress.code }, { session });
                  } catch (e) { // 5.B.2.A.3.A.1.A.3.A.1.2.A.5.B.
                    LOGGER.error(`Progress delete failed: `, e);
                  }
                }
              }
            }
          } catch (e) { // 5.B.2.A.3.A.1.B.
            // 5.B.2.A.3.A.1.B.1. progressBus/load failed
            if (e.code && e.code.endsWith(PROGRESS_BUS_DOES_NOT_EXIST)) { // 5.B.2.A.3.A.1.B.1.A.
              LOGGER.info(`ProgressBus for the current asid (${this.asid} doesn't exist. Creating...`)

              // 5.B.2.A.3.A.1.B.1.A.1. System prepares progressBusCreateDtoIn
              let progressBusCreateDtoIn = {
                code: this.progressBusCode,
                name: uuSubAppName,
                desc: this.asid,
                authorizationStrategy: AUTHORIZATION_STRATEGY,
                progressDataHistoryCount: this.progressDataHistoryCount,
                data: {
                  uuSubAppName: uuSubAppName,
                  uuSubAppVersion: APPINFO.uuSubAppVersion,
                  asid: this.asid
                }
              };

              // 5.B.2.A.3.A.1.B.1.A.2. System sets use case to progressBus/create
              this.progressUri.setUseCase(PROGRESS_BUS_CREATE);

              // 5.B.2.A.3.A.1.B.1.A.3. System tries to create progressBus
              try { // 5.B.2.A.3.A.1.B.1.A.3.A.
                await AppClient.post(this.progressUri, progressBusCreateDtoIn, { session });
              } catch (e) { // 5.B.2.A.3.A.1.B.1.A.3.B.
                LOGGER.error(`ProgressBus create failed: `, e);
                return;
              }
            } else { // 5.B.2.A.3.A.1.B.1.B.
              LOGGER.error(`ProgressBus load failed: `, e);
              return;
            }
          }
        }

        // 5.B.2.A.4. System sets progress/create use case
        this.progressUri.setUseCase(PROGRESS_CREATE);

        // 5.B.2.A.5. System tries to create new progress
        try { // 5.B.2.A.5.A.
          await AppClient.post(this.progressUri, progressCreateDtoIn, { session });
        } catch (e) { // 5.B.2.A.5.B.
          LOGGER.error(`Progress create failed: `, e);
          return;
        }

        // 5.B.2.A.6...
        await this.startAndProceedProgress(proceedDtoIn, session);
        return;
      } else if (e.code && e.code.endsWith(PROGRESS_IS_NOT_IN_PROPER_STATE)) { // 5.B.2.B.

        // 5.B.2.B.1. If e.paramMap.state exist and is in one of the state "waiting", "completed", "completedWithWarning" or "completedWithError"
        if (e.paramMap && e.paramMap.state && PROGRESS_STATES.includes(e.paramMap.state)) { // 5.B.2.B.1.A.

          // 5.B.2.B.1.A.1...
          await this.startAndProceedProgress(proceedDtoIn, session);
          return;
        }
      } else if (e.code && e.code === ("uu-appg01/authorization/accessDenied")) {
        LOGGER.error(
          `Failed to update progress. User ${session.getIdentity().getUuIdentity()} doesn't have permission to call ${this.progressUri} with code ${this.progressCode}. Please configure permissions properly (or use different user using ${APP_STATUS_PROGRESS_UUEE_CONFIG_NAME} deploy parameter.`);
        return;
      }
      LOGGER.error(`Progress proceed failed: `, e);
    }
  }

  async startAndProceedProgress(proceedDtoIn, session) {
    // 5.B.2.A.6. System sets progress/start use case
    this.progressUri.setUseCase(PROGRESS_START);

    // 5.B.2.A.7. System prepares progressStartDtoIn
    let progressStartDtoIn = {
      code: this.progressCode,
      lockSecret: LOCKSECRET
    };

    // 5.B.2.A.8. System tries to start progress
    try { // 5.B.2.A.8.A.
      await AppClient.post(this.progressUri, progressStartDtoIn, { session });
    } catch (e) { // 5.B.2.A.8.B.
      LOGGER.error(`Progress start failed: `, e);
      return;
    }

    // 5.B.2.A.9. System sets progress/proceed use case
    this.progressUri.setUseCase(PROGRESS_PROCEED);

    // 5.B.2.A.10. System tries to proceed progress
    try { // 5.B.2.A.10.A.
      await AppClient.post(this.progressUri, proceedDtoIn, { session });
    } catch (e) { // 5.B.2.A.10.B.
      LOGGER.error(`Progress proceed failed: `, e);
    }
  }

  getProgressUpdatePeriod() {
    return this.progressUpdatePeriod;
  }

  getAppStatusProgressBaseUriConfigName() {
    return APP_STATUS_PROGRESS_BASE_URI_CONFIG_NAME;
  }

  getAppStatusProgressUuEeConfigName() {
    return APP_STATUS_PROGRESS_UUEE_CONFIG_NAME;
  }
}

module.exports = new StatusUpdater();
