"use strict";
const AppStatusComponent = require("../components/app-status-component.js")
const MIDDLEWARE_ORDER = -10;
const NS_PER_SEC = 1e9;
const NS_PER_MS = 1e6;

class AppStatusMiddleware {
  constructor() {
    this.name = "App Status Middleware";
    this.order = MIDDLEWARE_ORDER;
  }

  async ensure(req, res) {
    let resData = {};
    let session = res.locals.session;
    // prevent empty session, oidc/callback etc...
    if (session && session.getAuthenticationId()) {
      let uuId = session.getIdentity().getUuIdentity();
      let systemId;
      // get id of system identity
      if (session.getClientIdentity() && session.getClientIdentity().getUuAppKey()) {
        systemId = session.getClientIdentity().getUuAppKey().getAwid();
      }
      resData = { ...resData, uuId, systemId }
    }
    // gets error code
    if (res.locals.dispatchedError && res.locals.dispatchedError.code) resData.errorCode = res.locals.dispatchedError.code;
    if (!resData.errorCode && res.locals.dispatchedErrorCode) resData.errorCode = res.locals.dispatchedErrorCode;
    // gets the name of called use case
    if (res.locals.ucProperties && res.locals.ucProperties.name) resData.ucName = res.locals.ucProperties.name;
    if (!resData.ucName && res.locals.ucProperties && res.locals.ucProperties._name) resData.ucName = res.locals.ucProperties._name
    // gets awid of called app
    if (res.locals.uri) resData.awid = res.locals.uri.getAwid();
    // measures code execution time in nanoseconds
    let time = process.hrtime(res.locals.startRequestTime);
    let nanos = time[0] * NS_PER_SEC + time[1];
    // set reqTime in milliseconds
    resData.reqTime = nanos / NS_PER_MS;
    // sets status code
    resData.statusCode = res.statusCode;
    // record status of response
    await AppStatusComponent.record(resData)
  }
}

module.exports = AppStatusMiddleware;
