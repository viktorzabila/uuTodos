"use strict";

const OidcCmdError = require("./oidc-cmd-error.js");

const InitOidcClient = {

  UC_CODE: `${OidcCmdError.ERROR_PREFIX}initOidcClient/`,

  InvalidDtoInError: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${InitOidcClient.UC_CODE}invalidDtoIn`;
    }
  },

  InvalidCredentials: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Provided oidc client credentials are not valid.";
      this.code = `${InitOidcClient.UC_CODE}invalidCredentials`;
    }
  },

  IntegrationNotEnabled: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Integration with uuOidcg02 is not enabled.";
      this.code = `${InitOidcClient.UC_CODE}integrationNotEnabled`;
    }
  },

  AppNotInitialized: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "The application is not initialized.";
      this.code = `${InitOidcClient.UC_CODE}appNotInitialized`;
    }
  },

  AppWorkspaceNotInitialized: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "The application workspace is not initialized.";
      this.code = `${InitOidcClient.UC_CODE}appWorkspaceNotInitialized`;
    }
  },

  RetrievingOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Retrieving of OidcClient failed.";
      this.code = `${InitOidcClient.UC_CODE}retrievingOfOidcClientFailed`;
    }
  },

  OidcClientDoesNotExist: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "OidcClient does not exist.";
      this.code = `${InitOidcClient.UC_CODE}oidcClientDoesNotExist`;
    }
  },

  UpdateOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Update of OidcClient failed.";
      this.code = `${InitOidcClient.UC_CODE}updateOfOidcClientFailed`;
      this.status = 500;
    }
  },

  RegistrationOfPublicKeyFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Registration of OidcClient public key failed.";
      this.code = `${InitOidcClient.UC_CODE}registrationOfPublicKeyFailed`;
      this.status = 500;
    }
  },

  StoringOfOidcClientConfigurationFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Storing of OidcClient configuration failed.";
      this.code = `${InitOidcClient.UC_CODE}storingOfOidcClientConfigurationFailed`;
      this.status = 500;
    }
  }

};

const SetAllowedRedirects = {

  UC_CODE: `${OidcCmdError.ERROR_PREFIX}setAllowedRedirects/`,

  InvalidDtoInError: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SetAllowedRedirects.UC_CODE}invalidDtoIn`;
    }
  },

  IntegrationNotEnabled: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Integration with uuOidcg02 is not enabled.";
      this.code = `${SetAllowedRedirects.UC_CODE}integrationNotEnabled`;
    }
  },

  LoadingOfOidcClientConfigurationFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Loading of OidcClient configuration failed.";
      this.code = `${SetAllowedRedirects.UC_CODE}loadingOfOidcClientConfigurationFailed`;
      this.status = 500;
    }
  },

  NoOidcClientConfigured: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "No OidcClient is configured for awid, call oidc/initOidcClient first.";
      this.code = `${SetAllowedRedirects.UC_CODE}noOidcClientConfigured`;
    }
  },

  RetrievingOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Retrieving of OidcClient failed.";
      this.code = `${SetAllowedRedirects.UC_CODE}retrievingOfOidcClientFailed`;
      this.status = 500;
    }
  },

  OidcClientDoesNotExist: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "OidcClient does not exist.";
      this.code = `${SetAllowedRedirects.UC_CODE}oidcClientDoesNotExist`;
      this.status = 500;
    }
  },

  UpdateOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Update of OidcClient failed.";
      this.code = `${SetAllowedRedirects.UC_CODE}updateOfOidcClientFailed`;
      this.status = 500;
    }
  }

};

const GetAllowedRedirects = {

  UC_CODE: `${OidcCmdError.ERROR_PREFIX}getAllowedRedirects/`,

  InvalidDtoInError: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${GetAllowedRedirects.UC_CODE}invalidDtoIn`;
    }
  },

  IntegrationNotEnabled: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Integration with uuOidcg02 is not enabled.";
      this.code = `${GetAllowedRedirects.UC_CODE}integrationNotEnabled`;
    }
  },

  LoadingOfOidcClientConfigurationFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Loading of OidcClient configuration failed.";
      this.code = `${GetAllowedRedirects.UC_CODE}loadingOfOidcClientConfigurationFailed`;
      this.status = 500;
    }
  },

  NoOidcClientConfigured: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "No OidcClient is configured for awid, call oidc/initOidcClient first.";
      this.code = `${GetAllowedRedirects.UC_CODE}noOidcClientConfigured`;
    }
  },

  RetrievingOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Retrieving of OidcClient failed.";
      this.code = `${GetAllowedRedirects.UC_CODE}retrievingOfOidcClientFailed`;
      this.status = 500;
    }
  },

  OidcClientDoesNotExist: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "OidcClient does not exist.";
      this.code = `${GetAllowedRedirects.UC_CODE}oidcClientDoesNotExist`;
      this.status = 500;
    }
  },

  UpdateOfOidcClientFailed: class extends OidcCmdError {
    constructor() {
      super(...arguments);
      this.message = "Update of OidcClient failed.";
      this.code = `${GetAllowedRedirects.UC_CODE}updateOfOidcClientFailed`;
      this.status = 500;
    }
  }

};

module.exports = {
  InitOidcClient,
  SetAllowedRedirects,
  GetAllowedRedirects
};
