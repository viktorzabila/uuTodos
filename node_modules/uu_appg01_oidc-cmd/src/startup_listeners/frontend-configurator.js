"use strict";

const {ClientConfigurator} = require("uu_appg01_core-appserver");
const {Config} = require("uu_appg01_core-utils");
const {ClientCredentialsProvider} = require("uu_appg01_oidc").Internal;

const CONFIG_PREFIX = "uu_app_oidc_";
const CLIENT_ID_SUFFIX = "_client_id";
const CREDENTIALS_CONFIG = new RegExp(`^${CONFIG_PREFIX}(.+)_client_credentials$`);
const OAUTH_REALIZATION_SUFFIX = "_oauth_realization";

class FrontendConfigurator {

  async onStartup() {
    ClientConfigurator.registerConfigurationProvider(this);
  }

  async getClientConfiguration() {
    let result = {
      uu_app_oidc_backend_available: true,
      uu_app_oidc_backend_grant_call_token_available: true
    };
    // Propagate all OIDC configuration...
    let configObject = Config.toJSON();
    for (let key of Object.keys(configObject)) {
      if (key.startsWith(CONFIG_PREFIX)) {
        // ...with exception of client credentials and backend oauth realization config
        let isCredentialsConfig = key.match(CREDENTIALS_CONFIG);
        if (isCredentialsConfig) {
          // If client credentials are configured and custom client_id for frontend
          // is not set, propagate client_id from credentials configuration.
          let providerName = isCredentialsConfig[1];
          let clientIdConfig = `${CONFIG_PREFIX}${providerName}${CLIENT_ID_SUFFIX}`;
          if (!configObject[clientIdConfig]) {
            let credentials = configObject[key];
            if (typeof credentials === "string") {
              credentials = ClientCredentialsProvider._getFromFile(credentials);
            }
            credentials = ClientCredentialsProvider._getFromHash(credentials);
            result[clientIdConfig] = credentials.client_id;
          }
        } else if (!key.endsWith(OAUTH_REALIZATION_SUFFIX)) {
          result[key] = configObject[key];
        }
      }
    }
    return result;
  }

}

module.exports = FrontendConfigurator;
