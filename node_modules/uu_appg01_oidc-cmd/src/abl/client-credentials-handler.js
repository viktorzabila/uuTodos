"use strict";

const { generateKeyPair } = require('crypto');
const generateKeyPairAsync = generateKeyPair ? require("util").promisify(generateKeyPair) : null;
const NodeRsa = require("node-rsa");
const {Config} = require("uu_appg01_core-utils");
const {LoggerFactory} = require("uu_appg01_core-logging");
const {DaoFactory} = require("uu_appg01_datastore");
const {UseCaseContext} = require("uu_appg01_core-appserver");
const {UuSubAppInstance, UuAppWorkspace, UuAppSecretStore} = require("uu_appg01_workspace");
const {ClientCredentialsProvider} = require("uu_appg01_oidc").Internal;

const ASID = Config.get("asid");
const IS_DEV_ENV = Config.isProfileActive("test", "development");
const SECRET_SET = "uuAppOidcClientKey";
const UNREGISTERED_CLIENT_ID_PREFIX = "uu-oidc:unregistered-client:";
const CONFIG_PREFIX = "uu_app_oidc_providers_";
const CREDENTIALS_SUFFIX = "_client_credentials";
const LOGGER = LoggerFactory.get("uuapp.oidc.appserver.ClientCredentialsHandler");

/**
 * Component for managing of OidcClient credentials registration.
 */
class ClientCredentialsHandler {

  /**
   * Generates new private and public key to be used for OidcClient authentication.
   * @returns {{privateKey: *, publicKey: *}} Private and public key.
   */
  static async generateClientKeyPair() {
    if (generateKeyPairAsync) {
      return generateKeyPairAsync('rsa', {
        modulusLength: 2048,
        publicKeyEncoding: { type: 'spki', format: 'pem' },
        privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
      });
    } else {
      let nodeRsa = new NodeRsa({b: 2048});
      nodeRsa.generateKeyPair();
      return {
        privateKey: nodeRsa.exportKey("private"),
        publicKey: nodeRsa.exportKey("public")
      };
    }
  }

  /**
   * Configures OidcClient for given AWID/ASID and service.
   * @param awid Awid or Asid
   * @param providerName Service name
   * @param clientId ClientId of registered OidcClient
   * @param credentials Private and public key or client secret
   * @returns {Promise<null>} Void
   */
  static async configureOidcClient(awid, providerName, clientId, credentials) {
    if (!DaoFactory.isDataStoreOn()) {
      return null;
    }
    if (awid === ASID) {
      let oidcClientMap = await UuSubAppInstance.getConfigParameter("oidcClientMap");
      if (!oidcClientMap) {
        oidcClientMap = {};
      }
      oidcClientMap[providerName] = clientId;
      await UuSubAppInstance.setConfigParameter("oidcClientMap", oidcClientMap);
    } else {
      let oidcClientMap = await UuAppWorkspace.getConfigParameter(awid, "oidcClientMap");
      if (!oidcClientMap) {
        oidcClientMap = {};
      }
      oidcClientMap[providerName] = clientId;
      await UuAppWorkspace.setConfigParameter(awid, "oidcClientMap", oidcClientMap);
    }
    if (credentials.keyPair) {
      await UuAppSecretStore.putSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Private`, credentials.keyPair.privateKey);
      await UuAppSecretStore.putSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Public`, credentials.keyPair.publicKey);
    } else {
      await UuAppSecretStore.putSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Secret`, credentials.clientSecret);
    }
    return null;
  }

  /**
   * Returns clientId registered for given AWID/ASID and service.
   * @param providerName Service name
   * @param awid Awid or Asid
   * @returns {Promise<null|*>} Registered clientId
   */
  static async getClientId(providerName, awid = null) {
    // If datastore is disabled or client credentials are set via configuration, do not load from awid/asid
    if (!DaoFactory.isDataStoreOn() || Config.get(`${CONFIG_PREFIX}${providerName}${CREDENTIALS_SUFFIX}`)) {
      return null;
    }
    if (!awid) {
      awid = this._getAwidFromContext();
    }
    if (!awid) {
      LOGGER.debug("Unable to get awid from use case context (probably due to invocation outside of use case scope). Using asid.");
      awid = ASID;
    }
    let oidcClientMap;
    if (awid === ASID) {
      try {
        oidcClientMap = await UuSubAppInstance.getConfigParameter("oidcClientMap");
      } catch (e) {
        LOGGER.error(`Unable to load OidcClient for asid ${ASID} and service ${providerName}. Using default OidcClient from configuration.`, e);
      }
      if (oidcClientMap && oidcClientMap[providerName]) {
        return oidcClientMap[providerName];
      } else {
        return null;
      }
    } else {
      try {
        oidcClientMap = await UuAppWorkspace.getConfigParameter(awid, "oidcClientMap");
      } catch (e) {
        LOGGER.error(`Unable to load OidcClient for awid ${awid} and service ${providerName}. Using OidcClient from asid.`, e);
      }
      if (oidcClientMap && oidcClientMap[providerName]) {
        return oidcClientMap[providerName];
      } else {
        this._logWarningInProdcutionEnv(`Missing configuration of OidcClient for awid ${awid} and service ${providerName}. Using OidcClient from asid.`);
        try {
          oidcClientMap = await UuSubAppInstance.getConfigParameter("oidcClientMap");
        } catch (e) {
          LOGGER.error(`Unable to load OidcClient for asid ${ASID} and service ${providerName}. Using default OidcClient from configuration.`, e);
        }
        if (oidcClientMap && oidcClientMap[providerName]) {
          return oidcClientMap[providerName];
        } else {
          return null;
        }
      }
    }
  }

  /**
   * Returns client credentials based on given service and awid.
   * @param providerName Name of service
   * @param awid awid or asid of oidc client. If not provided, this value is resolved from the current use case context.
   * @returns {Promise<{clientId, clientPrivateKey}|null>} Client credentials
   * @see ClientCredentialsProvider.getClientCredentials
   */
  static async getClientCredentials(providerName, awid = null) {
    // If datastore is disabled or client credentials are set via configuration, do not load from awid/asid
    if (!DaoFactory.isDataStoreOn() || Config.get(`${CONFIG_PREFIX}${providerName}${CREDENTIALS_SUFFIX}`)) {
      return null;
    }
    if (!awid) {
      awid = this._getAwidFromContext();
    }
    if (!awid) {
      LOGGER.debug("Unable to get awid from use case context (probably due to invocation outside of use case scope). Using OidcClient from asid.");
      return await this._getCredentialsFromAsid(providerName);
    }
    if (awid === ASID) {
      return await this._getCredentialsFromAsid(providerName);
    } else {
      return (await this._getCredentialsFromAwid(awid, providerName)) || (await this._getCredentialsFromAsid(providerName));
    }
  }

  /**
   * Returns credentials of unregistered client composed of AWID/ASID from
   * current use case context.
   * @param providerName Name of service
   * @returns {Promise<{clientId: string, clientSecret: string}|null>} Unregistered client credentials
   * @see ClientCredentialsProvider.getClientCredentials
   */
  static async getUnregisteredCredentials(providerName) {
    let awid = this._getAwidFromContext();
    if (!awid) {
      return null;
    }
    let clientId = `${UNREGISTERED_CLIENT_ID_PREFIX}${awid}`;
    let clientSecret = "unregistered";
    return {clientId, clientSecret};
  }

  static _getAwidFromContext() {
    if (!UseCaseContext.isAvailable()) {
      return null;
    }
    let uri = UseCaseContext.getUri();
    return uri ? uri.getAwid() : null;
  }

  static async _getCredentialsFromAwid(awid, providerName) {
    let oidcClientMap;
    try {
      oidcClientMap = await UuAppWorkspace.getConfigParameter(awid, "oidcClientMap");
    } catch (e) {
      LOGGER.error(`Unable to load OidcClient for awid ${awid} and service ${providerName}. Using OidcClient from asid.`, e);
      return null;
    }
    if (!oidcClientMap || !oidcClientMap[providerName]) {
      this._logWarningInProdcutionEnv(`Missing configuration of OidcClient for awid ${awid} and service ${providerName}. Using OidcClient from asid.`);
      return null;
    }
    let clientId = oidcClientMap[providerName];
    let clientPrivateKey;
    try {
      clientPrivateKey = await UuAppSecretStore.getSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Private`);
    } catch (e) {
      LOGGER.error(`Unable to load credentials of OidcClient ${clientId} for awid ${awid}. Using OidcClient from asid.`, e);
      return null;
    }
    if (!clientPrivateKey) {
      let clientSecret;
      try {
        clientSecret = await UuAppSecretStore.getSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Secret`);
      } catch (e) {
        LOGGER.error(`Unable to load credentials of OidcClient ${clientId} for awid ${awid}. Using OidcClient from asid.`, e);
        return null;
      }
      if (!clientSecret) {
        this._logWarningInProdcutionEnv(`Missing configuration of OidcClient for awid ${awid} and service ${providerName}. Using OidcClient from asid.`);
        return null;
      }
      return {clientId, clientSecret};
    }
    return {clientId, clientPrivateKey};
  }

  static async _getCredentialsFromAsid(providerName) {
    let oidcClientMap;
    try {
      oidcClientMap = await UuSubAppInstance.getConfigParameter("oidcClientMap");
    } catch (e) {
      LOGGER.error(`Unable to load OidcClient for asid ${ASID} and service ${providerName}. Using default OidcClient from configuration.`, e);
      return null;
    }
    if (!oidcClientMap || !oidcClientMap[providerName]) {
      this._logWarningInProdcutionEnv(`Missing configuration of OidcClient for asid ${ASID} and service ${providerName}. Using default OidcClient from configuration.`);
      return null;
    }
    let clientId = oidcClientMap[providerName];
    let clientPrivateKey;
    try {
      clientPrivateKey = await UuAppSecretStore.getSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Private`);
    } catch (e) {
      LOGGER.error(`Unable to load credentials of OidcClient ${clientId} for asid ${ASID}. Using default OidcClient from configuration.`, e);
      return null;
    }
    if (!clientPrivateKey) {
      let clientSecret;
      try {
        clientSecret = await UuAppSecretStore.getSecret(ASID, SECRET_SET, `${providerName}|${clientId}|Secret`);
      } catch (e) {
        LOGGER.error(`Unable to load credentials of OidcClient ${clientId} for asid ${ASID}. Using default OidcClient from configuration.`, e);
        return null;
      }
      if (!clientSecret) {
        this._logWarningInProdcutionEnv(`Missing configuration of OidcClient for asid ${ASID} and service ${providerName}. Using default OidcClient from configuration.`);
        return null;
      }
      return {clientId, clientSecret};
    }
    return {clientId, clientPrivateKey};
  }

  static _logWarningInProdcutionEnv(message) {
    if (IS_DEV_ENV) {
      LOGGER.debug(message)
    } else {
      LOGGER.warn(message);
    }
  }

}

// Register component as custom credentials provider
ClientCredentialsProvider.setExternalProvider(ClientCredentialsHandler);

module.exports = ClientCredentialsHandler;
