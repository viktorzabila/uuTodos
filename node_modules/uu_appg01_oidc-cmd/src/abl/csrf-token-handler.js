"use strict";

const Crypto = require("crypto");
const {Digest} = require("uu_appg01_core-utils");
const {ClientCredentialsProvider} = require("uu_appg01_oidc").Internal;

class CsrfTokenHandler {

  static createCsrfToken(uri, credentials, sessionId, expiresAt) {
    let salt = Crypto.randomBytes(16).toString("hex");
    let clientSecret = credentials.client_private_key || credentials.client_secret;
    let tokenValue = `${sessionId};${uri.getWorkspace()};${clientSecret};${salt}`;
    return `${expiresAt}.${Digest.sha1(tokenValue)}.${salt}`;
  }

  static async isCsrfTokenValid(token, uri, session) {
    let [expiresAt, tokenValue, salt] = token.split(".");
    if (!expiresAt || !tokenValue || !salt) {
      return false;
    }
    if (Number(expiresAt) * 1000 < Date.now()) {
      return false;
    }
    let clientCredentials = await ClientCredentialsProvider.getClientCredentials(session.getServiceName());
    let clientSecret = clientCredentials.client_private_key || clientCredentials.client_secret;
    let expectedValue = Digest.sha1(`${session.getId()};${uri.getWorkspace()};${clientSecret};${salt}`);
    return tokenValue === expectedValue;
  }

}

module.exports = CsrfTokenHandler;
